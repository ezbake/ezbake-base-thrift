/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.base.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CommunityMembership implements org.apache.thrift.TBase<CommunityMembership, CommunityMembership._Fields>, java.io.Serializable, Cloneable, Comparable<CommunityMembership> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommunityMembership");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORGANIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("organization", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("groups", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField REGIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("regions", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField TOPICS_FIELD_DESC = new org.apache.thrift.protocol.TField("topics", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommunityMembershipStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommunityMembershipTupleSchemeFactory());
  }

  public String name; // required
  public String type; // required
  public String organization; // optional
  public List<String> groups; // optional
  public List<String> regions; // optional
  public List<String> topics; // optional
  public Map<String,Boolean> flags; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    TYPE((short)2, "type"),
    ORGANIZATION((short)3, "organization"),
    GROUPS((short)4, "groups"),
    REGIONS((short)5, "regions"),
    TOPICS((short)6, "topics"),
    FLAGS((short)7, "flags");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // TYPE
          return TYPE;
        case 3: // ORGANIZATION
          return ORGANIZATION;
        case 4: // GROUPS
          return GROUPS;
        case 5: // REGIONS
          return REGIONS;
        case 6: // TOPICS
          return TOPICS;
        case 7: // FLAGS
          return FLAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ORGANIZATION,_Fields.GROUPS,_Fields.REGIONS,_Fields.TOPICS,_Fields.FLAGS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGANIZATION, new org.apache.thrift.meta_data.FieldMetaData("organization", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUPS, new org.apache.thrift.meta_data.FieldMetaData("groups", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REGIONS, new org.apache.thrift.meta_data.FieldMetaData("regions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TOPICS, new org.apache.thrift.meta_data.FieldMetaData("topics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommunityMembership.class, metaDataMap);
  }

  public CommunityMembership() {
  }

  public CommunityMembership(
    String name,
    String type)
  {
    this();
    this.name = name;
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommunityMembership(CommunityMembership other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetOrganization()) {
      this.organization = other.organization;
    }
    if (other.isSetGroups()) {
      List<String> __this__groups = new ArrayList<String>(other.groups);
      this.groups = __this__groups;
    }
    if (other.isSetRegions()) {
      List<String> __this__regions = new ArrayList<String>(other.regions);
      this.regions = __this__regions;
    }
    if (other.isSetTopics()) {
      List<String> __this__topics = new ArrayList<String>(other.topics);
      this.topics = __this__topics;
    }
    if (other.isSetFlags()) {
      Map<String,Boolean> __this__flags = new HashMap<String,Boolean>(other.flags);
      this.flags = __this__flags;
    }
  }

  public CommunityMembership deepCopy() {
    return new CommunityMembership(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.type = null;
    this.organization = null;
    this.groups = null;
    this.regions = null;
    this.topics = null;
    this.flags = null;
  }

  public String getName() {
    return this.name;
  }

  public CommunityMembership setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public CommunityMembership setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getOrganization() {
    return this.organization;
  }

  public CommunityMembership setOrganization(String organization) {
    this.organization = organization;
    return this;
  }

  public void unsetOrganization() {
    this.organization = null;
  }

  /** Returns true if field organization is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganization() {
    return this.organization != null;
  }

  public void setOrganizationIsSet(boolean value) {
    if (!value) {
      this.organization = null;
    }
  }

  public int getGroupsSize() {
    return (this.groups == null) ? 0 : this.groups.size();
  }

  public java.util.Iterator<String> getGroupsIterator() {
    return (this.groups == null) ? null : this.groups.iterator();
  }

  public void addToGroups(String elem) {
    if (this.groups == null) {
      this.groups = new ArrayList<String>();
    }
    this.groups.add(elem);
  }

  public List<String> getGroups() {
    return this.groups;
  }

  public CommunityMembership setGroups(List<String> groups) {
    this.groups = groups;
    return this;
  }

  public void unsetGroups() {
    this.groups = null;
  }

  /** Returns true if field groups is set (has been assigned a value) and false otherwise */
  public boolean isSetGroups() {
    return this.groups != null;
  }

  public void setGroupsIsSet(boolean value) {
    if (!value) {
      this.groups = null;
    }
  }

  public int getRegionsSize() {
    return (this.regions == null) ? 0 : this.regions.size();
  }

  public java.util.Iterator<String> getRegionsIterator() {
    return (this.regions == null) ? null : this.regions.iterator();
  }

  public void addToRegions(String elem) {
    if (this.regions == null) {
      this.regions = new ArrayList<String>();
    }
    this.regions.add(elem);
  }

  public List<String> getRegions() {
    return this.regions;
  }

  public CommunityMembership setRegions(List<String> regions) {
    this.regions = regions;
    return this;
  }

  public void unsetRegions() {
    this.regions = null;
  }

  /** Returns true if field regions is set (has been assigned a value) and false otherwise */
  public boolean isSetRegions() {
    return this.regions != null;
  }

  public void setRegionsIsSet(boolean value) {
    if (!value) {
      this.regions = null;
    }
  }

  public int getTopicsSize() {
    return (this.topics == null) ? 0 : this.topics.size();
  }

  public java.util.Iterator<String> getTopicsIterator() {
    return (this.topics == null) ? null : this.topics.iterator();
  }

  public void addToTopics(String elem) {
    if (this.topics == null) {
      this.topics = new ArrayList<String>();
    }
    this.topics.add(elem);
  }

  public List<String> getTopics() {
    return this.topics;
  }

  public CommunityMembership setTopics(List<String> topics) {
    this.topics = topics;
    return this;
  }

  public void unsetTopics() {
    this.topics = null;
  }

  /** Returns true if field topics is set (has been assigned a value) and false otherwise */
  public boolean isSetTopics() {
    return this.topics != null;
  }

  public void setTopicsIsSet(boolean value) {
    if (!value) {
      this.topics = null;
    }
  }

  public int getFlagsSize() {
    return (this.flags == null) ? 0 : this.flags.size();
  }

  public void putToFlags(String key, boolean val) {
    if (this.flags == null) {
      this.flags = new HashMap<String,Boolean>();
    }
    this.flags.put(key, val);
  }

  public Map<String,Boolean> getFlags() {
    return this.flags;
  }

  public CommunityMembership setFlags(Map<String,Boolean> flags) {
    this.flags = flags;
    return this;
  }

  public void unsetFlags() {
    this.flags = null;
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return this.flags != null;
  }

  public void setFlagsIsSet(boolean value) {
    if (!value) {
      this.flags = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case ORGANIZATION:
      if (value == null) {
        unsetOrganization();
      } else {
        setOrganization((String)value);
      }
      break;

    case GROUPS:
      if (value == null) {
        unsetGroups();
      } else {
        setGroups((List<String>)value);
      }
      break;

    case REGIONS:
      if (value == null) {
        unsetRegions();
      } else {
        setRegions((List<String>)value);
      }
      break;

    case TOPICS:
      if (value == null) {
        unsetTopics();
      } else {
        setTopics((List<String>)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((Map<String,Boolean>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case TYPE:
      return getType();

    case ORGANIZATION:
      return getOrganization();

    case GROUPS:
      return getGroups();

    case REGIONS:
      return getRegions();

    case TOPICS:
      return getTopics();

    case FLAGS:
      return getFlags();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case ORGANIZATION:
      return isSetOrganization();
    case GROUPS:
      return isSetGroups();
    case REGIONS:
      return isSetRegions();
    case TOPICS:
      return isSetTopics();
    case FLAGS:
      return isSetFlags();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommunityMembership)
      return this.equals((CommunityMembership)that);
    return false;
  }

  public boolean equals(CommunityMembership that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_organization = true && this.isSetOrganization();
    boolean that_present_organization = true && that.isSetOrganization();
    if (this_present_organization || that_present_organization) {
      if (!(this_present_organization && that_present_organization))
        return false;
      if (!this.organization.equals(that.organization))
        return false;
    }

    boolean this_present_groups = true && this.isSetGroups();
    boolean that_present_groups = true && that.isSetGroups();
    if (this_present_groups || that_present_groups) {
      if (!(this_present_groups && that_present_groups))
        return false;
      if (!this.groups.equals(that.groups))
        return false;
    }

    boolean this_present_regions = true && this.isSetRegions();
    boolean that_present_regions = true && that.isSetRegions();
    if (this_present_regions || that_present_regions) {
      if (!(this_present_regions && that_present_regions))
        return false;
      if (!this.regions.equals(that.regions))
        return false;
    }

    boolean this_present_topics = true && this.isSetTopics();
    boolean that_present_topics = true && that.isSetTopics();
    if (this_present_topics || that_present_topics) {
      if (!(this_present_topics && that_present_topics))
        return false;
      if (!this.topics.equals(that.topics))
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (!this.flags.equals(that.flags))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CommunityMembership other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganization()).compareTo(other.isSetOrganization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organization, other.organization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroups()).compareTo(other.isSetGroups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groups, other.groups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegions()).compareTo(other.isSetRegions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regions, other.regions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopics()).compareTo(other.isSetTopics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topics, other.topics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommunityMembership(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetOrganization()) {
      if (!first) sb.append(", ");
      sb.append("organization:");
      if (this.organization == null) {
        sb.append("null");
      } else {
        sb.append(this.organization);
      }
      first = false;
    }
    if (isSetGroups()) {
      if (!first) sb.append(", ");
      sb.append("groups:");
      if (this.groups == null) {
        sb.append("null");
      } else {
        sb.append(this.groups);
      }
      first = false;
    }
    if (isSetRegions()) {
      if (!first) sb.append(", ");
      sb.append("regions:");
      if (this.regions == null) {
        sb.append("null");
      } else {
        sb.append(this.regions);
      }
      first = false;
    }
    if (isSetTopics()) {
      if (!first) sb.append(", ");
      sb.append("topics:");
      if (this.topics == null) {
        sb.append("null");
      } else {
        sb.append(this.topics);
      }
      first = false;
    }
    if (isSetFlags()) {
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        sb.append(this.flags);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommunityMembershipStandardSchemeFactory implements SchemeFactory {
    public CommunityMembershipStandardScheme getScheme() {
      return new CommunityMembershipStandardScheme();
    }
  }

  private static class CommunityMembershipStandardScheme extends StandardScheme<CommunityMembership> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommunityMembership struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORGANIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.organization = iprot.readString();
              struct.setOrganizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.groups = new ArrayList<String>(_list30.size);
                for (int _i31 = 0; _i31 < _list30.size; ++_i31)
                {
                  String _elem32;
                  _elem32 = iprot.readString();
                  struct.groups.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setGroupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REGIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.regions = new ArrayList<String>(_list33.size);
                for (int _i34 = 0; _i34 < _list33.size; ++_i34)
                {
                  String _elem35;
                  _elem35 = iprot.readString();
                  struct.regions.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setRegionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOPICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.topics = new ArrayList<String>(_list36.size);
                for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                {
                  String _elem38;
                  _elem38 = iprot.readString();
                  struct.topics.add(_elem38);
                }
                iprot.readListEnd();
              }
              struct.setTopicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map39 = iprot.readMapBegin();
                struct.flags = new HashMap<String,Boolean>(2*_map39.size);
                for (int _i40 = 0; _i40 < _map39.size; ++_i40)
                {
                  String _key41;
                  boolean _val42;
                  _key41 = iprot.readString();
                  _val42 = iprot.readBool();
                  struct.flags.put(_key41, _val42);
                }
                iprot.readMapEnd();
              }
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommunityMembership struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.organization != null) {
        if (struct.isSetOrganization()) {
          oprot.writeFieldBegin(ORGANIZATION_FIELD_DESC);
          oprot.writeString(struct.organization);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groups != null) {
        if (struct.isSetGroups()) {
          oprot.writeFieldBegin(GROUPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.groups.size()));
            for (String _iter43 : struct.groups)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.regions != null) {
        if (struct.isSetRegions()) {
          oprot.writeFieldBegin(REGIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.regions.size()));
            for (String _iter44 : struct.regions)
            {
              oprot.writeString(_iter44);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.topics != null) {
        if (struct.isSetTopics()) {
          oprot.writeFieldBegin(TOPICS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.topics.size()));
            for (String _iter45 : struct.topics)
            {
              oprot.writeString(_iter45);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.flags != null) {
        if (struct.isSetFlags()) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, struct.flags.size()));
            for (Map.Entry<String, Boolean> _iter46 : struct.flags.entrySet())
            {
              oprot.writeString(_iter46.getKey());
              oprot.writeBool(_iter46.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommunityMembershipTupleSchemeFactory implements SchemeFactory {
    public CommunityMembershipTupleScheme getScheme() {
      return new CommunityMembershipTupleScheme();
    }
  }

  private static class CommunityMembershipTupleScheme extends TupleScheme<CommunityMembership> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommunityMembership struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeString(struct.type);
      BitSet optionals = new BitSet();
      if (struct.isSetOrganization()) {
        optionals.set(0);
      }
      if (struct.isSetGroups()) {
        optionals.set(1);
      }
      if (struct.isSetRegions()) {
        optionals.set(2);
      }
      if (struct.isSetTopics()) {
        optionals.set(3);
      }
      if (struct.isSetFlags()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOrganization()) {
        oprot.writeString(struct.organization);
      }
      if (struct.isSetGroups()) {
        {
          oprot.writeI32(struct.groups.size());
          for (String _iter47 : struct.groups)
          {
            oprot.writeString(_iter47);
          }
        }
      }
      if (struct.isSetRegions()) {
        {
          oprot.writeI32(struct.regions.size());
          for (String _iter48 : struct.regions)
          {
            oprot.writeString(_iter48);
          }
        }
      }
      if (struct.isSetTopics()) {
        {
          oprot.writeI32(struct.topics.size());
          for (String _iter49 : struct.topics)
          {
            oprot.writeString(_iter49);
          }
        }
      }
      if (struct.isSetFlags()) {
        {
          oprot.writeI32(struct.flags.size());
          for (Map.Entry<String, Boolean> _iter50 : struct.flags.entrySet())
          {
            oprot.writeString(_iter50.getKey());
            oprot.writeBool(_iter50.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommunityMembership struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.type = iprot.readString();
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.organization = iprot.readString();
        struct.setOrganizationIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list51 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.groups = new ArrayList<String>(_list51.size);
          for (int _i52 = 0; _i52 < _list51.size; ++_i52)
          {
            String _elem53;
            _elem53 = iprot.readString();
            struct.groups.add(_elem53);
          }
        }
        struct.setGroupsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list54 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.regions = new ArrayList<String>(_list54.size);
          for (int _i55 = 0; _i55 < _list54.size; ++_i55)
          {
            String _elem56;
            _elem56 = iprot.readString();
            struct.regions.add(_elem56);
          }
        }
        struct.setRegionsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.topics = new ArrayList<String>(_list57.size);
          for (int _i58 = 0; _i58 < _list57.size; ++_i58)
          {
            String _elem59;
            _elem59 = iprot.readString();
            struct.topics.add(_elem59);
          }
        }
        struct.setTopicsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map60 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.flags = new HashMap<String,Boolean>(2*_map60.size);
          for (int _i61 = 0; _i61 < _map60.size; ++_i61)
          {
            String _key62;
            boolean _val63;
            _key62 = iprot.readString();
            _val63 = iprot.readBool();
            struct.flags.put(_key62, _val63);
          }
        }
        struct.setFlagsIsSet(true);
      }
    }
  }

}

