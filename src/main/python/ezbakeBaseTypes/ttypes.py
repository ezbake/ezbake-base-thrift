#   Copyright (C) 2013-2014 Computer Sciences Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ezbakeBaseAuthorizations.ttypes
import ezbakeBaseVisibility.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TokenType(object):
  USER = 0
  APP = 1

  _VALUES_TO_NAMES = {
    0: "USER",
    1: "APP",
  }

  _NAMES_TO_VALUES = {
    "USER": 0,
    "APP": 1,
  }

class EzSecurityTokenExceptionType(object):
  EXPIRED = 0
  INVALID_SIGNATURE = 1
  INVALID_SECURITY_ID = 2

  _VALUES_TO_NAMES = {
    0: "EXPIRED",
    1: "INVALID_SIGNATURE",
    2: "INVALID_SECURITY_ID",
  }

  _NAMES_TO_VALUES = {
    "EXPIRED": 0,
    "INVALID_SIGNATURE": 1,
    "INVALID_SECURITY_ID": 2,
  }


class TimeZone(object):
  """
  Attributes:
   - hour
   - minute
   - afterUTC
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'hour', None, None, ), # 1
    (2, TType.I16, 'minute', None, None, ), # 2
    (3, TType.BOOL, 'afterUTC', None, None, ), # 3
  )

  def __init__(self, hour=None, minute=None, afterUTC=None,):
    self.hour = hour
    self.minute = minute
    self.afterUTC = afterUTC

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.hour = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.minute = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.afterUTC = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TimeZone')
    if self.hour is not None:
      oprot.writeFieldBegin('hour', TType.I16, 1)
      oprot.writeI16(self.hour)
      oprot.writeFieldEnd()
    if self.minute is not None:
      oprot.writeFieldBegin('minute', TType.I16, 2)
      oprot.writeI16(self.minute)
      oprot.writeFieldEnd()
    if self.afterUTC is not None:
      oprot.writeFieldBegin('afterUTC', TType.BOOL, 3)
      oprot.writeBool(self.afterUTC)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.hour is None:
      raise TProtocol.TProtocolException(message='Required field hour is unset!')
    if self.minute is None:
      raise TProtocol.TProtocolException(message='Required field minute is unset!')
    if self.afterUTC is None:
      raise TProtocol.TProtocolException(message='Required field afterUTC is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Time(object):
  """
  Attributes:
   - hour
   - minute
   - second
   - millisecond
   - tz
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'hour', None, None, ), # 1
    (2, TType.I16, 'minute', None, None, ), # 2
    (3, TType.I16, 'second', None, None, ), # 3
    (4, TType.I16, 'millisecond', None, None, ), # 4
    (5, TType.STRUCT, 'tz', (TimeZone, TimeZone.thrift_spec), None, ), # 5
  )

  def __init__(self, hour=None, minute=None, second=None, millisecond=None, tz=None,):
    self.hour = hour
    self.minute = minute
    self.second = second
    self.millisecond = millisecond
    self.tz = tz

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.hour = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.minute = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.second = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.millisecond = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.tz = TimeZone()
          self.tz.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Time')
    if self.hour is not None:
      oprot.writeFieldBegin('hour', TType.I16, 1)
      oprot.writeI16(self.hour)
      oprot.writeFieldEnd()
    if self.minute is not None:
      oprot.writeFieldBegin('minute', TType.I16, 2)
      oprot.writeI16(self.minute)
      oprot.writeFieldEnd()
    if self.second is not None:
      oprot.writeFieldBegin('second', TType.I16, 3)
      oprot.writeI16(self.second)
      oprot.writeFieldEnd()
    if self.millisecond is not None:
      oprot.writeFieldBegin('millisecond', TType.I16, 4)
      oprot.writeI16(self.millisecond)
      oprot.writeFieldEnd()
    if self.tz is not None:
      oprot.writeFieldBegin('tz', TType.STRUCT, 5)
      self.tz.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.hour is None:
      raise TProtocol.TProtocolException(message='Required field hour is unset!')
    if self.minute is None:
      raise TProtocol.TProtocolException(message='Required field minute is unset!')
    if self.tz is None:
      raise TProtocol.TProtocolException(message='Required field tz is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Date(object):
  """
  Attributes:
   - month
   - day
   - year
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'month', None, None, ), # 1
    (2, TType.I16, 'day', None, None, ), # 2
    (3, TType.I16, 'year', None, None, ), # 3
  )

  def __init__(self, month=None, day=None, year=None,):
    self.month = month
    self.day = day
    self.year = year

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.month = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.day = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.year = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Date')
    if self.month is not None:
      oprot.writeFieldBegin('month', TType.I16, 1)
      oprot.writeI16(self.month)
      oprot.writeFieldEnd()
    if self.day is not None:
      oprot.writeFieldBegin('day', TType.I16, 2)
      oprot.writeI16(self.day)
      oprot.writeFieldEnd()
    if self.year is not None:
      oprot.writeFieldBegin('year', TType.I16, 3)
      oprot.writeI16(self.year)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.month is None:
      raise TProtocol.TProtocolException(message='Required field month is unset!')
    if self.day is None:
      raise TProtocol.TProtocolException(message='Required field day is unset!')
    if self.year is None:
      raise TProtocol.TProtocolException(message='Required field year is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DateTime(object):
  """
  Attributes:
   - date
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'date', (Date, Date.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'time', (Time, Time.thrift_spec), None, ), # 2
  )

  def __init__(self, date=None, time=None,):
    self.date = date
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.date = Date()
          self.date.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.time = Time()
          self.time.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DateTime')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRUCT, 1)
      self.date.write(oprot)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.STRUCT, 2)
      self.time.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Coordinate(object):
  """
  Attributes:
   - latitude
   - longitude
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'latitude', None, None, ), # 1
    (2, TType.DOUBLE, 'longitude', None, None, ), # 2
  )

  def __init__(self, latitude=None, longitude=None,):
    self.latitude = latitude
    self.longitude = longitude

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Coordinate')
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 1)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.latitude is None:
      raise TProtocol.TProtocolException(message='Required field latitude is unset!')
    if self.longitude is None:
      raise TProtocol.TProtocolException(message='Required field longitude is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Preview(object):
  """
  Attributes:
   - mimetype
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mimetype', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
  )

  def __init__(self, mimetype=None, content=None,):
    self.mimetype = mimetype
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mimetype = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Preview')
    if self.mimetype is not None:
      oprot.writeFieldBegin('mimetype', TType.STRING, 1)
      oprot.writeString(self.mimetype)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mimetype is None:
      raise TProtocol.TProtocolException(message='Required field mimetype is unset!')
    if self.content is None:
      raise TProtocol.TProtocolException(message='Required field content is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EnterpriseMetaData(object):
  """
  Enterprise metadata that contains additional information pertaining to a document.

  Attributes:
   - tags
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'tags', (TType.STRING,None,TType.STRING,None), None, ), # 1
  )

  def __init__(self, tags=None,):
    self.tags = tags

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.tags = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.tags[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EnterpriseMetaData')
    if self.tags is not None:
      oprot.writeFieldBegin('tags', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.tags))
      for kiter7,viter8 in self.tags.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SSR(object):
  """
  Standard Search Result. This object encapsulates a search result for a particular object that has been ingested
  and disseminated into ezbake. Each field represents a piece of metadata about the ingested object. It also provides
  faceting ability at query time.

  Attributes:
   - uri: The warehouse URI that correlates with this SSR object. The URI will point back to the original raw and parsed
  object in the warehouse.
   - visibility: The visibility of the SSR object and it's corresponding original document.
   - title: The title of this search result. This would typically be the title of the incoming document to which this SSR
  corresponds.
   - snippet: A snippet from the incoming document (if applicable). A typical case for including a snippet would be if the
  corresponding document has a summary.
   - resultDate: The date corresponding to the incoming document. This may be an event date from the document, or potentially a
  document creation date. This field is flexible and should be set to the most useful value for the end user.
   - coordinate: A geospatial coordinate that corresponds to the incoming document. This is only applicable in certain situations,
  but may provide the end user with extra context and search/faceting ability.
   - preview: A binary preview of the document. This field pertains to a thumbnail or other binary representation of the incoming
  document/object.
   - metaData: Enterprise metadata containing data that pipelines tag a document with. This would be
  additional pieces of information about the data that users can later search on.
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uri', None, None, ), # 1
    (2, TType.STRUCT, 'visibility', (ezbakeBaseVisibility.ttypes.Visibility, ezbakeBaseVisibility.ttypes.Visibility.thrift_spec), None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.STRING, 'snippet', None, None, ), # 4
    (5, TType.STRUCT, 'resultDate', (DateTime, DateTime.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'coordinate', (Coordinate, Coordinate.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'preview', (Preview, Preview.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'metaData', (EnterpriseMetaData, EnterpriseMetaData.thrift_spec), None, ), # 8
  )

  def __init__(self, uri=None, visibility=None, title=None, snippet=None, resultDate=None, coordinate=None, preview=None, metaData=None,):
    self.uri = uri
    self.visibility = visibility
    self.title = title
    self.snippet = snippet
    self.resultDate = resultDate
    self.coordinate = coordinate
    self.preview = preview
    self.metaData = metaData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uri = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.visibility = ezbakeBaseVisibility.ttypes.Visibility()
          self.visibility.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.snippet = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.resultDate = DateTime()
          self.resultDate.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.coordinate = Coordinate()
          self.coordinate.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.preview = Preview()
          self.preview.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.metaData = EnterpriseMetaData()
          self.metaData.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SSR')
    if self.uri is not None:
      oprot.writeFieldBegin('uri', TType.STRING, 1)
      oprot.writeString(self.uri)
      oprot.writeFieldEnd()
    if self.visibility is not None:
      oprot.writeFieldBegin('visibility', TType.STRUCT, 2)
      self.visibility.write(oprot)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.snippet is not None:
      oprot.writeFieldBegin('snippet', TType.STRING, 4)
      oprot.writeString(self.snippet)
      oprot.writeFieldEnd()
    if self.resultDate is not None:
      oprot.writeFieldBegin('resultDate', TType.STRUCT, 5)
      self.resultDate.write(oprot)
      oprot.writeFieldEnd()
    if self.coordinate is not None:
      oprot.writeFieldBegin('coordinate', TType.STRUCT, 6)
      self.coordinate.write(oprot)
      oprot.writeFieldEnd()
    if self.preview is not None:
      oprot.writeFieldBegin('preview', TType.STRUCT, 7)
      self.preview.write(oprot)
      oprot.writeFieldEnd()
    if self.metaData is not None:
      oprot.writeFieldBegin('metaData', TType.STRUCT, 8)
      self.metaData.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.uri is None:
      raise TProtocol.TProtocolException(message='Required field uri is unset!')
    if self.visibility is None:
      raise TProtocol.TProtocolException(message='Required field visibility is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserInfo(object):
  """
  Attributes:
   - principal
   - id
   - firstName
   - lastName
   - name
   - citizenship
   - emails
   - phoneNumbers
   - company
   - organization
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'principal', None, None, ), # 1
    (2, TType.STRING, 'id', None, None, ), # 2
    (3, TType.STRING, 'firstName', None, None, ), # 3
    (4, TType.STRING, 'lastName', None, None, ), # 4
    (5, TType.STRING, 'name', None, None, ), # 5
    (6, TType.STRING, 'citizenship', None, None, ), # 6
    (7, TType.MAP, 'emails', (TType.STRING,None,TType.STRING,None), None, ), # 7
    (8, TType.MAP, 'phoneNumbers', (TType.STRING,None,TType.STRING,None), None, ), # 8
    (9, TType.STRING, 'company', None, None, ), # 9
    (10, TType.STRING, 'organization', None, None, ), # 10
  )

  def __init__(self, principal=None, id=None, firstName=None, lastName=None, name=None, citizenship=None, emails=None, phoneNumbers=None, company=None, organization=None,):
    self.principal = principal
    self.id = id
    self.firstName = firstName
    self.lastName = lastName
    self.name = name
    self.citizenship = citizenship
    self.emails = emails
    self.phoneNumbers = phoneNumbers
    self.company = company
    self.organization = organization

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.principal = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.firstName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.lastName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.citizenship = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.emails = {}
          (_ktype10, _vtype11, _size9 ) = iprot.readMapBegin()
          for _i13 in xrange(_size9):
            _key14 = iprot.readString();
            _val15 = iprot.readString();
            self.emails[_key14] = _val15
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.phoneNumbers = {}
          (_ktype17, _vtype18, _size16 ) = iprot.readMapBegin()
          for _i20 in xrange(_size16):
            _key21 = iprot.readString();
            _val22 = iprot.readString();
            self.phoneNumbers[_key21] = _val22
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.company = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.organization = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserInfo')
    if self.principal is not None:
      oprot.writeFieldBegin('principal', TType.STRING, 1)
      oprot.writeString(self.principal)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 2)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.firstName is not None:
      oprot.writeFieldBegin('firstName', TType.STRING, 3)
      oprot.writeString(self.firstName)
      oprot.writeFieldEnd()
    if self.lastName is not None:
      oprot.writeFieldBegin('lastName', TType.STRING, 4)
      oprot.writeString(self.lastName)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 5)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.citizenship is not None:
      oprot.writeFieldBegin('citizenship', TType.STRING, 6)
      oprot.writeString(self.citizenship)
      oprot.writeFieldEnd()
    if self.emails is not None:
      oprot.writeFieldBegin('emails', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.emails))
      for kiter23,viter24 in self.emails.items():
        oprot.writeString(kiter23)
        oprot.writeString(viter24)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.phoneNumbers is not None:
      oprot.writeFieldBegin('phoneNumbers', TType.MAP, 8)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.phoneNumbers))
      for kiter25,viter26 in self.phoneNumbers.items():
        oprot.writeString(kiter25)
        oprot.writeString(viter26)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.company is not None:
      oprot.writeFieldBegin('company', TType.STRING, 9)
      oprot.writeString(self.company)
      oprot.writeFieldEnd()
    if self.organization is not None:
      oprot.writeFieldBegin('organization', TType.STRING, 10)
      oprot.writeString(self.organization)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.principal is None:
      raise TProtocol.TProtocolException(message='Required field principal is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AppInfo(object):
  """
  Attributes:
   - securityId
   - principal
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'securityId', None, None, ), # 1
    (2, TType.STRING, 'principal', None, None, ), # 2
  )

  def __init__(self, securityId=None, principal=None,):
    self.securityId = securityId
    self.principal = principal

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.securityId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.principal = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AppInfo')
    if self.securityId is not None:
      oprot.writeFieldBegin('securityId', TType.STRING, 1)
      oprot.writeString(self.securityId)
      oprot.writeFieldEnd()
    if self.principal is not None:
      oprot.writeFieldBegin('principal', TType.STRING, 2)
      oprot.writeString(self.principal)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.securityId is None:
      raise TProtocol.TProtocolException(message='Required field securityId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommunityMembership(object):
  """
  Attributes:
   - name
   - type
   - organization
   - groups
   - regions
   - topics
   - flags
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'type', None, None, ), # 2
    (3, TType.STRING, 'organization', None, None, ), # 3
    (4, TType.LIST, 'groups', (TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'regions', (TType.STRING,None), None, ), # 5
    (6, TType.LIST, 'topics', (TType.STRING,None), None, ), # 6
    (7, TType.MAP, 'flags', (TType.STRING,None,TType.BOOL,None), None, ), # 7
  )

  def __init__(self, name=None, type=None, organization=None, groups=None, regions=None, topics=None, flags=None,):
    self.name = name
    self.type = type
    self.organization = organization
    self.groups = groups
    self.regions = regions
    self.topics = topics
    self.flags = flags

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.organization = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.groups = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = iprot.readString();
            self.groups.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.regions = []
          (_etype36, _size33) = iprot.readListBegin()
          for _i37 in xrange(_size33):
            _elem38 = iprot.readString();
            self.regions.append(_elem38)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.topics = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = iprot.readString();
            self.topics.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.flags = {}
          (_ktype46, _vtype47, _size45 ) = iprot.readMapBegin()
          for _i49 in xrange(_size45):
            _key50 = iprot.readString();
            _val51 = iprot.readBool();
            self.flags[_key50] = _val51
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommunityMembership')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 2)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.organization is not None:
      oprot.writeFieldBegin('organization', TType.STRING, 3)
      oprot.writeString(self.organization)
      oprot.writeFieldEnd()
    if self.groups is not None:
      oprot.writeFieldBegin('groups', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.groups))
      for iter52 in self.groups:
        oprot.writeString(iter52)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.regions is not None:
      oprot.writeFieldBegin('regions', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.regions))
      for iter53 in self.regions:
        oprot.writeString(iter53)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.topics is not None:
      oprot.writeFieldBegin('topics', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.topics))
      for iter54 in self.topics:
        oprot.writeString(iter54)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.flags is not None:
      oprot.writeFieldBegin('flags', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.BOOL, len(self.flags))
      for kiter55,viter56 in self.flags.items():
        oprot.writeString(kiter55)
        oprot.writeBool(viter56)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ValidityCaveats(object):
  """
  Attributes:
   - issuer
   - issuedTo
   - issuedFor
   - issuedTime
   - notBefore
   - notAfter
   - signature
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'issuer', None, None, ), # 1
    (2, TType.STRING, 'issuedTo', None, None, ), # 2
    (3, TType.STRING, 'issuedFor', None, None, ), # 3
    (4, TType.I64, 'issuedTime', None, None, ), # 4
    (5, TType.I64, 'notBefore', None, None, ), # 5
    (6, TType.I64, 'notAfter', None, None, ), # 6
    (7, TType.STRING, 'signature', None, None, ), # 7
  )

  def __init__(self, issuer=None, issuedTo=None, issuedFor=None, issuedTime=None, notBefore=None, notAfter=None, signature=None,):
    self.issuer = issuer
    self.issuedTo = issuedTo
    self.issuedFor = issuedFor
    self.issuedTime = issuedTime
    self.notBefore = notBefore
    self.notAfter = notAfter
    self.signature = signature

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.issuer = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.issuedTo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.issuedFor = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.issuedTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.notBefore = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.notAfter = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.signature = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ValidityCaveats')
    if self.issuer is not None:
      oprot.writeFieldBegin('issuer', TType.STRING, 1)
      oprot.writeString(self.issuer)
      oprot.writeFieldEnd()
    if self.issuedTo is not None:
      oprot.writeFieldBegin('issuedTo', TType.STRING, 2)
      oprot.writeString(self.issuedTo)
      oprot.writeFieldEnd()
    if self.issuedFor is not None:
      oprot.writeFieldBegin('issuedFor', TType.STRING, 3)
      oprot.writeString(self.issuedFor)
      oprot.writeFieldEnd()
    if self.issuedTime is not None:
      oprot.writeFieldBegin('issuedTime', TType.I64, 4)
      oprot.writeI64(self.issuedTime)
      oprot.writeFieldEnd()
    if self.notBefore is not None:
      oprot.writeFieldBegin('notBefore', TType.I64, 5)
      oprot.writeI64(self.notBefore)
      oprot.writeFieldEnd()
    if self.notAfter is not None:
      oprot.writeFieldBegin('notAfter', TType.I64, 6)
      oprot.writeI64(self.notAfter)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRING, 7)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.issuer is None:
      raise TProtocol.TProtocolException(message='Required field issuer is unset!')
    if self.issuedTo is None:
      raise TProtocol.TProtocolException(message='Required field issuedTo is unset!')
    if self.notAfter is None:
      raise TProtocol.TProtocolException(message='Required field notAfter is unset!')
    if self.signature is None:
      raise TProtocol.TProtocolException(message='Required field signature is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EzSecurityPrincipal(object):
  """
  Attributes:
   - principal
   - issuer
   - validity
   - requestChain
   - externalID
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'principal', None, None, ), # 1
    (2, TType.STRUCT, 'validity', (ValidityCaveats, ValidityCaveats.thrift_spec), None, ), # 2
    (3, TType.LIST, 'requestChain', (TType.STRING,None), None, ), # 3
    (4, TType.STRING, 'externalID', None, None, ), # 4
    (5, TType.STRING, 'name', None, None, ), # 5
    (6, TType.STRING, 'issuer', None, None, ), # 6
  )

  def __init__(self, principal=None, issuer=None, validity=None, requestChain=None, externalID=None, name=None,):
    self.principal = principal
    self.issuer = issuer
    self.validity = validity
    self.requestChain = requestChain
    self.externalID = externalID
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.principal = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.issuer = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.validity = ValidityCaveats()
          self.validity.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.requestChain = []
          (_etype60, _size57) = iprot.readListBegin()
          for _i61 in xrange(_size57):
            _elem62 = iprot.readString();
            self.requestChain.append(_elem62)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.externalID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EzSecurityPrincipal')
    if self.principal is not None:
      oprot.writeFieldBegin('principal', TType.STRING, 1)
      oprot.writeString(self.principal)
      oprot.writeFieldEnd()
    if self.validity is not None:
      oprot.writeFieldBegin('validity', TType.STRUCT, 2)
      self.validity.write(oprot)
      oprot.writeFieldEnd()
    if self.requestChain is not None:
      oprot.writeFieldBegin('requestChain', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.requestChain))
      for iter63 in self.requestChain:
        oprot.writeString(iter63)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.externalID is not None:
      oprot.writeFieldBegin('externalID', TType.STRING, 4)
      oprot.writeString(self.externalID)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 5)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.issuer is not None:
      oprot.writeFieldBegin('issuer', TType.STRING, 6)
      oprot.writeString(self.issuer)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.principal is None:
      raise TProtocol.TProtocolException(message='Required field principal is unset!')
    if self.validity is None:
      raise TProtocol.TProtocolException(message='Required field validity is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EzSecurityToken(object):
  """
  Attributes:
   - validity
   - type
   - tokenPrincipal
   - authorizationLevel
   - authorizations
   - externalProjectGroups
   - externalCommunities
   - citizenship
   - organization
   - validForExternalRequest
   - externalRequestPrincipal
   - externalRequestPrincipalIssuer
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'validity', (ValidityCaveats, ValidityCaveats.thrift_spec), None, ), # 1
    (2, TType.I32, 'type', None,     0, ), # 2
    (3, TType.STRUCT, 'tokenPrincipal', (EzSecurityPrincipal, EzSecurityPrincipal.thrift_spec), None, ), # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'authorizationLevel', None, None, ), # 10
    (11, TType.STRUCT, 'authorizations', (ezbakeBaseAuthorizations.ttypes.Authorizations, ezbakeBaseAuthorizations.ttypes.Authorizations.thrift_spec), None, ), # 11
    None, # 12
    (13, TType.MAP, 'externalProjectGroups', (TType.STRING,None,TType.LIST,(TType.STRING,None)), None, ), # 13
    (14, TType.MAP, 'externalCommunities', (TType.STRING,None,TType.STRUCT,(CommunityMembership, CommunityMembership.thrift_spec)), None, ), # 14
    (15, TType.STRING, 'citizenship', None, None, ), # 15
    (16, TType.STRING, 'organization', None, None, ), # 16
    (17, TType.BOOL, 'validForExternalRequest', None, False, ), # 17
    (18, TType.STRING, 'externalRequestPrincipal', None, None, ), # 18
    (19, TType.STRING, 'externalRequestPrincipalIssuer', None, None, ), # 19
  )

  def __init__(self, validity=None, type=thrift_spec[2][4], tokenPrincipal=None, authorizationLevel=None, authorizations=None, externalProjectGroups=None, externalCommunities=None, citizenship=None, organization=None, validForExternalRequest=thrift_spec[17][4], externalRequestPrincipal=None, externalRequestPrincipalIssuer=None,):
    self.validity = validity
    self.type = type
    self.tokenPrincipal = tokenPrincipal
    self.authorizationLevel = authorizationLevel
    self.authorizations = authorizations
    self.externalProjectGroups = externalProjectGroups
    self.externalCommunities = externalCommunities
    self.citizenship = citizenship
    self.organization = organization
    self.validForExternalRequest = validForExternalRequest
    self.externalRequestPrincipal = externalRequestPrincipal
    self.externalRequestPrincipalIssuer = externalRequestPrincipalIssuer

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.validity = ValidityCaveats()
          self.validity.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.tokenPrincipal = EzSecurityPrincipal()
          self.tokenPrincipal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.authorizationLevel = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.authorizations = ezbakeBaseAuthorizations.ttypes.Authorizations()
          self.authorizations.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.MAP:
          self.externalProjectGroups = {}
          (_ktype65, _vtype66, _size64 ) = iprot.readMapBegin()
          for _i68 in xrange(_size64):
            _key69 = iprot.readString();
            _val70 = []
            (_etype74, _size71) = iprot.readListBegin()
            for _i75 in xrange(_size71):
              _elem76 = iprot.readString();
              _val70.append(_elem76)
            iprot.readListEnd()
            self.externalProjectGroups[_key69] = _val70
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.MAP:
          self.externalCommunities = {}
          (_ktype78, _vtype79, _size77 ) = iprot.readMapBegin()
          for _i81 in xrange(_size77):
            _key82 = iprot.readString();
            _val83 = CommunityMembership()
            _val83.read(iprot)
            self.externalCommunities[_key82] = _val83
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.citizenship = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.organization = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.BOOL:
          self.validForExternalRequest = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.externalRequestPrincipal = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.externalRequestPrincipalIssuer = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EzSecurityToken')
    if self.validity is not None:
      oprot.writeFieldBegin('validity', TType.STRUCT, 1)
      self.validity.write(oprot)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.tokenPrincipal is not None:
      oprot.writeFieldBegin('tokenPrincipal', TType.STRUCT, 3)
      self.tokenPrincipal.write(oprot)
      oprot.writeFieldEnd()
    if self.authorizationLevel is not None:
      oprot.writeFieldBegin('authorizationLevel', TType.STRING, 10)
      oprot.writeString(self.authorizationLevel)
      oprot.writeFieldEnd()
    if self.authorizations is not None:
      oprot.writeFieldBegin('authorizations', TType.STRUCT, 11)
      self.authorizations.write(oprot)
      oprot.writeFieldEnd()
    if self.externalProjectGroups is not None:
      oprot.writeFieldBegin('externalProjectGroups', TType.MAP, 13)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.externalProjectGroups))
      for kiter84,viter85 in self.externalProjectGroups.items():
        oprot.writeString(kiter84)
        oprot.writeListBegin(TType.STRING, len(viter85))
        for iter86 in viter85:
          oprot.writeString(iter86)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.externalCommunities is not None:
      oprot.writeFieldBegin('externalCommunities', TType.MAP, 14)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.externalCommunities))
      for kiter87,viter88 in self.externalCommunities.items():
        oprot.writeString(kiter87)
        viter88.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.citizenship is not None:
      oprot.writeFieldBegin('citizenship', TType.STRING, 15)
      oprot.writeString(self.citizenship)
      oprot.writeFieldEnd()
    if self.organization is not None:
      oprot.writeFieldBegin('organization', TType.STRING, 16)
      oprot.writeString(self.organization)
      oprot.writeFieldEnd()
    if self.validForExternalRequest is not None:
      oprot.writeFieldBegin('validForExternalRequest', TType.BOOL, 17)
      oprot.writeBool(self.validForExternalRequest)
      oprot.writeFieldEnd()
    if self.externalRequestPrincipal is not None:
      oprot.writeFieldBegin('externalRequestPrincipal', TType.STRING, 18)
      oprot.writeString(self.externalRequestPrincipal)
      oprot.writeFieldEnd()
    if self.externalRequestPrincipalIssuer is not None:
      oprot.writeFieldBegin('externalRequestPrincipalIssuer', TType.STRING, 19)
      oprot.writeString(self.externalRequestPrincipalIssuer)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.validity is None:
      raise TProtocol.TProtocolException(message='Required field validity is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.tokenPrincipal is None:
      raise TProtocol.TProtocolException(message='Required field tokenPrincipal is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EzSecurityTokenException(TException):
  """
  Attributes:
   - message
   - originalException
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.STRING, 'originalException', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
  )

  def __init__(self, message=None, originalException=None, type=None,):
    self.message = message
    self.originalException = originalException
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.originalException = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EzSecurityTokenException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.originalException is not None:
      oprot.writeFieldBegin('originalException', TType.STRING, 2)
      oprot.writeString(self.originalException)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.message is None:
      raise TProtocol.TProtocolException(message='Required field message is unset!')
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EzSecurityTokenJson(object):
  """
  Attributes:
   - json
   - signature
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'json', None, None, ), # 1
    (2, TType.STRING, 'signature', None, None, ), # 2
  )

  def __init__(self, json=None, signature=None,):
    self.json = json
    self.signature = signature

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.json = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.signature = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EzSecurityTokenJson')
    if self.json is not None:
      oprot.writeFieldBegin('json', TType.STRING, 1)
      oprot.writeString(self.json)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRING, 2)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.json is None:
      raise TProtocol.TProtocolException(message='Required field json is unset!')
    if self.signature is None:
      raise TProtocol.TProtocolException(message='Required field signature is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class X509Info(object):
  """
  Attributes:
   - subject
   - issuer
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'subject', None, None, ), # 1
    (2, TType.STRING, 'issuer', None, None, ), # 2
  )

  def __init__(self, subject=None, issuer=None,):
    self.subject = subject
    self.issuer = issuer

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.subject = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.issuer = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('X509Info')
    if self.subject is not None:
      oprot.writeFieldBegin('subject', TType.STRING, 1)
      oprot.writeString(self.subject)
      oprot.writeFieldEnd()
    if self.issuer is not None:
      oprot.writeFieldBegin('issuer', TType.STRING, 2)
      oprot.writeString(self.issuer)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.subject is None:
      raise TProtocol.TProtocolException(message='Required field subject is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProxyUserToken(object):
  """
  Attributes:
   - x509
   - issuedBy
   - issuedTo
   - issuedFor
   - notAfter
   - notBefore
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'x509', (X509Info, X509Info.thrift_spec), None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'issuedBy', None, None, ), # 10
    (11, TType.STRING, 'issuedTo', None, None, ), # 11
    (12, TType.STRING, 'issuedFor', None, None, ), # 12
    (13, TType.I64, 'notAfter', None, None, ), # 13
    (14, TType.I64, 'notBefore', None, None, ), # 14
  )

  def __init__(self, x509=None, issuedBy=None, issuedTo=None, issuedFor=None, notAfter=None, notBefore=None,):
    self.x509 = x509
    self.issuedBy = issuedBy
    self.issuedTo = issuedTo
    self.issuedFor = issuedFor
    self.notAfter = notAfter
    self.notBefore = notBefore

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.x509 = X509Info()
          self.x509.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.issuedBy = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.issuedTo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.issuedFor = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.notAfter = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.notBefore = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProxyUserToken')
    if self.x509 is not None:
      oprot.writeFieldBegin('x509', TType.STRUCT, 1)
      self.x509.write(oprot)
      oprot.writeFieldEnd()
    if self.issuedBy is not None:
      oprot.writeFieldBegin('issuedBy', TType.STRING, 10)
      oprot.writeString(self.issuedBy)
      oprot.writeFieldEnd()
    if self.issuedTo is not None:
      oprot.writeFieldBegin('issuedTo', TType.STRING, 11)
      oprot.writeString(self.issuedTo)
      oprot.writeFieldEnd()
    if self.issuedFor is not None:
      oprot.writeFieldBegin('issuedFor', TType.STRING, 12)
      oprot.writeString(self.issuedFor)
      oprot.writeFieldEnd()
    if self.notAfter is not None:
      oprot.writeFieldBegin('notAfter', TType.I64, 13)
      oprot.writeI64(self.notAfter)
      oprot.writeFieldEnd()
    if self.notBefore is not None:
      oprot.writeFieldBegin('notBefore', TType.I64, 14)
      oprot.writeI64(self.notBefore)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.issuedBy is None:
      raise TProtocol.TProtocolException(message='Required field issuedBy is unset!')
    if self.issuedTo is None:
      raise TProtocol.TProtocolException(message='Required field issuedTo is unset!')
    if self.notAfter is None:
      raise TProtocol.TProtocolException(message='Required field notAfter is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProxyPrincipal(object):
  """
  Attributes:
   - proxyToken
   - signature
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'proxyToken', None, None, ), # 1
    (2, TType.STRING, 'signature', None, None, ), # 2
  )

  def __init__(self, proxyToken=None, signature=None,):
    self.proxyToken = proxyToken
    self.signature = signature

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.proxyToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.signature = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProxyPrincipal')
    if self.proxyToken is not None:
      oprot.writeFieldBegin('proxyToken', TType.STRING, 1)
      oprot.writeString(self.proxyToken)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRING, 2)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.proxyToken is None:
      raise TProtocol.TProtocolException(message='Required field proxyToken is unset!')
    if self.signature is None:
      raise TProtocol.TProtocolException(message='Required field signature is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TokenRequest(object):
  """
  Attributes:
   - securityId
   - targetSecurityId
   - timestamp
   - type
   - caveats
   - proxyPrincipal
   - tokenPrincipal
   - principal
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'securityId', None, None, ), # 1
    (2, TType.STRING, 'targetSecurityId', None, None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    None, # 4
    (5, TType.I32, 'type', None,     0, ), # 5
    (6, TType.STRUCT, 'caveats', (ValidityCaveats, ValidityCaveats.thrift_spec), None, ), # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'proxyPrincipal', (ProxyPrincipal, ProxyPrincipal.thrift_spec), None, ), # 10
    (11, TType.STRUCT, 'tokenPrincipal', (EzSecurityToken, EzSecurityToken.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'principal', (EzSecurityPrincipal, EzSecurityPrincipal.thrift_spec), None, ), # 12
  )

  def __init__(self, securityId=None, targetSecurityId=None, timestamp=None, type=thrift_spec[5][4], caveats=None, proxyPrincipal=None, tokenPrincipal=None, principal=None,):
    self.securityId = securityId
    self.targetSecurityId = targetSecurityId
    self.timestamp = timestamp
    self.type = type
    self.caveats = caveats
    self.proxyPrincipal = proxyPrincipal
    self.tokenPrincipal = tokenPrincipal
    self.principal = principal

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.securityId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.targetSecurityId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.caveats = ValidityCaveats()
          self.caveats.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.proxyPrincipal = ProxyPrincipal()
          self.proxyPrincipal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.tokenPrincipal = EzSecurityToken()
          self.tokenPrincipal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.principal = EzSecurityPrincipal()
          self.principal.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TokenRequest')
    if self.securityId is not None:
      oprot.writeFieldBegin('securityId', TType.STRING, 1)
      oprot.writeString(self.securityId)
      oprot.writeFieldEnd()
    if self.targetSecurityId is not None:
      oprot.writeFieldBegin('targetSecurityId', TType.STRING, 2)
      oprot.writeString(self.targetSecurityId)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 5)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.caveats is not None:
      oprot.writeFieldBegin('caveats', TType.STRUCT, 6)
      self.caveats.write(oprot)
      oprot.writeFieldEnd()
    if self.proxyPrincipal is not None:
      oprot.writeFieldBegin('proxyPrincipal', TType.STRUCT, 10)
      self.proxyPrincipal.write(oprot)
      oprot.writeFieldEnd()
    if self.tokenPrincipal is not None:
      oprot.writeFieldBegin('tokenPrincipal', TType.STRUCT, 11)
      self.tokenPrincipal.write(oprot)
      oprot.writeFieldEnd()
    if self.principal is not None:
      oprot.writeFieldBegin('principal', TType.STRUCT, 12)
      self.principal.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.securityId is None:
      raise TProtocol.TProtocolException(message='Required field securityId is unset!')
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
