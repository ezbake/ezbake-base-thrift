#   Copyright (C) 2013-2014 Computer Sciences Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ezbakeBaseTypes.ttypes
import ezbakeBaseService.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class CancelStatus(object):
  NOT_CANCELED = 0
  CANCELED = 1
  CANCEL_IN_PROGRESS = 2
  CANNOT_CANCEL = 3

  _VALUES_TO_NAMES = {
    0: "NOT_CANCELED",
    1: "CANCELED",
    2: "CANCEL_IN_PROGRESS",
    3: "CANNOT_CANCEL",
  }

  _NAMES_TO_VALUES = {
    "NOT_CANCELED": 0,
    "CANCELED": 1,
    "CANCEL_IN_PROGRESS": 2,
    "CANNOT_CANCEL": 3,
  }

class PurgeStatus(object):
  UNKNOWN_ID = 0
  WAITING_TO_START = 1
  STARTING = 2
  PURGING = 3
  STOPPING = 4
  ERROR = 5
  FINISHED_COMPLETE = 6
  FINISHED_INCOMPLETE = 7

  _VALUES_TO_NAMES = {
    0: "UNKNOWN_ID",
    1: "WAITING_TO_START",
    2: "STARTING",
    3: "PURGING",
    4: "STOPPING",
    5: "ERROR",
    6: "FINISHED_COMPLETE",
    7: "FINISHED_INCOMPLETE",
  }

  _NAMES_TO_VALUES = {
    "UNKNOWN_ID": 0,
    "WAITING_TO_START": 1,
    "STARTING": 2,
    "PURGING": 3,
    "STOPPING": 4,
    "ERROR": 5,
    "FINISHED_COMPLETE": 6,
    "FINISHED_INCOMPLETE": 7,
  }


class PurgeException(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PurgeException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PurgeState(object):
  """
  Attributes:
   - purgeStatus
   - purgeId
   - timeStamp
   - purged
   - notPurged
   - suggestedPollPeriod
   - cancelStatus
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'purgeStatus', None, None, ), # 1
    (2, TType.I64, 'purgeId', None, None, ), # 2
    (3, TType.STRUCT, 'timeStamp', (ezbakeBaseTypes.ttypes.DateTime, ezbakeBaseTypes.ttypes.DateTime.thrift_spec), None, ), # 3
    (4, TType.SET, 'purged', (TType.I64,None), None, ), # 4
    (5, TType.SET, 'notPurged', (TType.I64,None), None, ), # 5
    (6, TType.I32, 'suggestedPollPeriod', None, None, ), # 6
    (7, TType.I32, 'cancelStatus', None,     0, ), # 7
  )

  def __init__(self, purgeStatus=None, purgeId=None, timeStamp=None, purged=None, notPurged=None, suggestedPollPeriod=None, cancelStatus=thrift_spec[7][4],):
    self.purgeStatus = purgeStatus
    self.purgeId = purgeId
    self.timeStamp = timeStamp
    self.purged = purged
    self.notPurged = notPurged
    self.suggestedPollPeriod = suggestedPollPeriod
    self.cancelStatus = cancelStatus

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.purgeStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.purgeId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.timeStamp = ezbakeBaseTypes.ttypes.DateTime()
          self.timeStamp.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.purged = set()
          (_etype3, _size0) = iprot.readSetBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.purged.add(_elem5)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.SET:
          self.notPurged = set()
          (_etype9, _size6) = iprot.readSetBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.notPurged.add(_elem11)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.suggestedPollPeriod = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.cancelStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PurgeState')
    if self.purgeStatus is not None:
      oprot.writeFieldBegin('purgeStatus', TType.I32, 1)
      oprot.writeI32(self.purgeStatus)
      oprot.writeFieldEnd()
    if self.purgeId is not None:
      oprot.writeFieldBegin('purgeId', TType.I64, 2)
      oprot.writeI64(self.purgeId)
      oprot.writeFieldEnd()
    if self.timeStamp is not None:
      oprot.writeFieldBegin('timeStamp', TType.STRUCT, 3)
      self.timeStamp.write(oprot)
      oprot.writeFieldEnd()
    if self.purged is not None:
      oprot.writeFieldBegin('purged', TType.SET, 4)
      oprot.writeSetBegin(TType.I64, len(self.purged))
      for iter12 in self.purged:
        oprot.writeI64(iter12)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.notPurged is not None:
      oprot.writeFieldBegin('notPurged', TType.SET, 5)
      oprot.writeSetBegin(TType.I64, len(self.notPurged))
      for iter13 in self.notPurged:
        oprot.writeI64(iter13)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.suggestedPollPeriod is not None:
      oprot.writeFieldBegin('suggestedPollPeriod', TType.I32, 6)
      oprot.writeI32(self.suggestedPollPeriod)
      oprot.writeFieldEnd()
    if self.cancelStatus is not None:
      oprot.writeFieldBegin('cancelStatus', TType.I32, 7)
      oprot.writeI32(self.cancelStatus)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.purgeStatus is None:
      raise TProtocol.TProtocolException(message='Required field purgeStatus is unset!')
    if self.purgeId is None:
      raise TProtocol.TProtocolException(message='Required field purgeId is unset!')
    if self.timeStamp is None:
      raise TProtocol.TProtocolException(message='Required field timeStamp is unset!')
    if self.purged is None:
      raise TProtocol.TProtocolException(message='Required field purged is unset!')
    if self.notPurged is None:
      raise TProtocol.TProtocolException(message='Required field notPurged is unset!')
    if self.suggestedPollPeriod is None:
      raise TProtocol.TProtocolException(message='Required field suggestedPollPeriod is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
