/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.base.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PlatformObjectVisibilities implements org.apache.thrift.TBase<PlatformObjectVisibilities, PlatformObjectVisibilities._Fields>, java.io.Serializable, Cloneable, Comparable<PlatformObjectVisibilities> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlatformObjectVisibilities");

  private static final org.apache.thrift.protocol.TField PLATFORM_OBJECT_READ_VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("platformObjectReadVisibility", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField PLATFORM_OBJECT_DISCOVER_VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("platformObjectDiscoverVisibility", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField PLATFORM_OBJECT_WRITE_VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("platformObjectWriteVisibility", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField PLATFORM_OBJECT_MANAGE_VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("platformObjectManageVisibility", org.apache.thrift.protocol.TType.SET, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlatformObjectVisibilitiesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlatformObjectVisibilitiesTupleSchemeFactory());
  }

  public Set<Long> platformObjectReadVisibility; // optional
  public Set<Long> platformObjectDiscoverVisibility; // optional
  public Set<Long> platformObjectWriteVisibility; // optional
  public Set<Long> platformObjectManageVisibility; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLATFORM_OBJECT_READ_VISIBILITY((short)1, "platformObjectReadVisibility"),
    PLATFORM_OBJECT_DISCOVER_VISIBILITY((short)2, "platformObjectDiscoverVisibility"),
    PLATFORM_OBJECT_WRITE_VISIBILITY((short)3, "platformObjectWriteVisibility"),
    PLATFORM_OBJECT_MANAGE_VISIBILITY((short)4, "platformObjectManageVisibility");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLATFORM_OBJECT_READ_VISIBILITY
          return PLATFORM_OBJECT_READ_VISIBILITY;
        case 2: // PLATFORM_OBJECT_DISCOVER_VISIBILITY
          return PLATFORM_OBJECT_DISCOVER_VISIBILITY;
        case 3: // PLATFORM_OBJECT_WRITE_VISIBILITY
          return PLATFORM_OBJECT_WRITE_VISIBILITY;
        case 4: // PLATFORM_OBJECT_MANAGE_VISIBILITY
          return PLATFORM_OBJECT_MANAGE_VISIBILITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PLATFORM_OBJECT_READ_VISIBILITY,_Fields.PLATFORM_OBJECT_DISCOVER_VISIBILITY,_Fields.PLATFORM_OBJECT_WRITE_VISIBILITY,_Fields.PLATFORM_OBJECT_MANAGE_VISIBILITY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLATFORM_OBJECT_READ_VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("platformObjectReadVisibility", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.PLATFORM_OBJECT_DISCOVER_VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("platformObjectDiscoverVisibility", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.PLATFORM_OBJECT_WRITE_VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("platformObjectWriteVisibility", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.PLATFORM_OBJECT_MANAGE_VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("platformObjectManageVisibility", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlatformObjectVisibilities.class, metaDataMap);
  }

  public PlatformObjectVisibilities() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlatformObjectVisibilities(PlatformObjectVisibilities other) {
    if (other.isSetPlatformObjectReadVisibility()) {
      Set<Long> __this__platformObjectReadVisibility = new HashSet<Long>(other.platformObjectReadVisibility);
      this.platformObjectReadVisibility = __this__platformObjectReadVisibility;
    }
    if (other.isSetPlatformObjectDiscoverVisibility()) {
      Set<Long> __this__platformObjectDiscoverVisibility = new HashSet<Long>(other.platformObjectDiscoverVisibility);
      this.platformObjectDiscoverVisibility = __this__platformObjectDiscoverVisibility;
    }
    if (other.isSetPlatformObjectWriteVisibility()) {
      Set<Long> __this__platformObjectWriteVisibility = new HashSet<Long>(other.platformObjectWriteVisibility);
      this.platformObjectWriteVisibility = __this__platformObjectWriteVisibility;
    }
    if (other.isSetPlatformObjectManageVisibility()) {
      Set<Long> __this__platformObjectManageVisibility = new HashSet<Long>(other.platformObjectManageVisibility);
      this.platformObjectManageVisibility = __this__platformObjectManageVisibility;
    }
  }

  public PlatformObjectVisibilities deepCopy() {
    return new PlatformObjectVisibilities(this);
  }

  @Override
  public void clear() {
    this.platformObjectReadVisibility = null;
    this.platformObjectDiscoverVisibility = null;
    this.platformObjectWriteVisibility = null;
    this.platformObjectManageVisibility = null;
  }

  public int getPlatformObjectReadVisibilitySize() {
    return (this.platformObjectReadVisibility == null) ? 0 : this.platformObjectReadVisibility.size();
  }

  public java.util.Iterator<Long> getPlatformObjectReadVisibilityIterator() {
    return (this.platformObjectReadVisibility == null) ? null : this.platformObjectReadVisibility.iterator();
  }

  public void addToPlatformObjectReadVisibility(long elem) {
    if (this.platformObjectReadVisibility == null) {
      this.platformObjectReadVisibility = new HashSet<Long>();
    }
    this.platformObjectReadVisibility.add(elem);
  }

  public Set<Long> getPlatformObjectReadVisibility() {
    return this.platformObjectReadVisibility;
  }

  public PlatformObjectVisibilities setPlatformObjectReadVisibility(Set<Long> platformObjectReadVisibility) {
    this.platformObjectReadVisibility = platformObjectReadVisibility;
    return this;
  }

  public void unsetPlatformObjectReadVisibility() {
    this.platformObjectReadVisibility = null;
  }

  /** Returns true if field platformObjectReadVisibility is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformObjectReadVisibility() {
    return this.platformObjectReadVisibility != null;
  }

  public void setPlatformObjectReadVisibilityIsSet(boolean value) {
    if (!value) {
      this.platformObjectReadVisibility = null;
    }
  }

  public int getPlatformObjectDiscoverVisibilitySize() {
    return (this.platformObjectDiscoverVisibility == null) ? 0 : this.platformObjectDiscoverVisibility.size();
  }

  public java.util.Iterator<Long> getPlatformObjectDiscoverVisibilityIterator() {
    return (this.platformObjectDiscoverVisibility == null) ? null : this.platformObjectDiscoverVisibility.iterator();
  }

  public void addToPlatformObjectDiscoverVisibility(long elem) {
    if (this.platformObjectDiscoverVisibility == null) {
      this.platformObjectDiscoverVisibility = new HashSet<Long>();
    }
    this.platformObjectDiscoverVisibility.add(elem);
  }

  public Set<Long> getPlatformObjectDiscoverVisibility() {
    return this.platformObjectDiscoverVisibility;
  }

  public PlatformObjectVisibilities setPlatformObjectDiscoverVisibility(Set<Long> platformObjectDiscoverVisibility) {
    this.platformObjectDiscoverVisibility = platformObjectDiscoverVisibility;
    return this;
  }

  public void unsetPlatformObjectDiscoverVisibility() {
    this.platformObjectDiscoverVisibility = null;
  }

  /** Returns true if field platformObjectDiscoverVisibility is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformObjectDiscoverVisibility() {
    return this.platformObjectDiscoverVisibility != null;
  }

  public void setPlatformObjectDiscoverVisibilityIsSet(boolean value) {
    if (!value) {
      this.platformObjectDiscoverVisibility = null;
    }
  }

  public int getPlatformObjectWriteVisibilitySize() {
    return (this.platformObjectWriteVisibility == null) ? 0 : this.platformObjectWriteVisibility.size();
  }

  public java.util.Iterator<Long> getPlatformObjectWriteVisibilityIterator() {
    return (this.platformObjectWriteVisibility == null) ? null : this.platformObjectWriteVisibility.iterator();
  }

  public void addToPlatformObjectWriteVisibility(long elem) {
    if (this.platformObjectWriteVisibility == null) {
      this.platformObjectWriteVisibility = new HashSet<Long>();
    }
    this.platformObjectWriteVisibility.add(elem);
  }

  public Set<Long> getPlatformObjectWriteVisibility() {
    return this.platformObjectWriteVisibility;
  }

  public PlatformObjectVisibilities setPlatformObjectWriteVisibility(Set<Long> platformObjectWriteVisibility) {
    this.platformObjectWriteVisibility = platformObjectWriteVisibility;
    return this;
  }

  public void unsetPlatformObjectWriteVisibility() {
    this.platformObjectWriteVisibility = null;
  }

  /** Returns true if field platformObjectWriteVisibility is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformObjectWriteVisibility() {
    return this.platformObjectWriteVisibility != null;
  }

  public void setPlatformObjectWriteVisibilityIsSet(boolean value) {
    if (!value) {
      this.platformObjectWriteVisibility = null;
    }
  }

  public int getPlatformObjectManageVisibilitySize() {
    return (this.platformObjectManageVisibility == null) ? 0 : this.platformObjectManageVisibility.size();
  }

  public java.util.Iterator<Long> getPlatformObjectManageVisibilityIterator() {
    return (this.platformObjectManageVisibility == null) ? null : this.platformObjectManageVisibility.iterator();
  }

  public void addToPlatformObjectManageVisibility(long elem) {
    if (this.platformObjectManageVisibility == null) {
      this.platformObjectManageVisibility = new HashSet<Long>();
    }
    this.platformObjectManageVisibility.add(elem);
  }

  public Set<Long> getPlatformObjectManageVisibility() {
    return this.platformObjectManageVisibility;
  }

  public PlatformObjectVisibilities setPlatformObjectManageVisibility(Set<Long> platformObjectManageVisibility) {
    this.platformObjectManageVisibility = platformObjectManageVisibility;
    return this;
  }

  public void unsetPlatformObjectManageVisibility() {
    this.platformObjectManageVisibility = null;
  }

  /** Returns true if field platformObjectManageVisibility is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformObjectManageVisibility() {
    return this.platformObjectManageVisibility != null;
  }

  public void setPlatformObjectManageVisibilityIsSet(boolean value) {
    if (!value) {
      this.platformObjectManageVisibility = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLATFORM_OBJECT_READ_VISIBILITY:
      if (value == null) {
        unsetPlatformObjectReadVisibility();
      } else {
        setPlatformObjectReadVisibility((Set<Long>)value);
      }
      break;

    case PLATFORM_OBJECT_DISCOVER_VISIBILITY:
      if (value == null) {
        unsetPlatformObjectDiscoverVisibility();
      } else {
        setPlatformObjectDiscoverVisibility((Set<Long>)value);
      }
      break;

    case PLATFORM_OBJECT_WRITE_VISIBILITY:
      if (value == null) {
        unsetPlatformObjectWriteVisibility();
      } else {
        setPlatformObjectWriteVisibility((Set<Long>)value);
      }
      break;

    case PLATFORM_OBJECT_MANAGE_VISIBILITY:
      if (value == null) {
        unsetPlatformObjectManageVisibility();
      } else {
        setPlatformObjectManageVisibility((Set<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLATFORM_OBJECT_READ_VISIBILITY:
      return getPlatformObjectReadVisibility();

    case PLATFORM_OBJECT_DISCOVER_VISIBILITY:
      return getPlatformObjectDiscoverVisibility();

    case PLATFORM_OBJECT_WRITE_VISIBILITY:
      return getPlatformObjectWriteVisibility();

    case PLATFORM_OBJECT_MANAGE_VISIBILITY:
      return getPlatformObjectManageVisibility();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLATFORM_OBJECT_READ_VISIBILITY:
      return isSetPlatformObjectReadVisibility();
    case PLATFORM_OBJECT_DISCOVER_VISIBILITY:
      return isSetPlatformObjectDiscoverVisibility();
    case PLATFORM_OBJECT_WRITE_VISIBILITY:
      return isSetPlatformObjectWriteVisibility();
    case PLATFORM_OBJECT_MANAGE_VISIBILITY:
      return isSetPlatformObjectManageVisibility();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PlatformObjectVisibilities)
      return this.equals((PlatformObjectVisibilities)that);
    return false;
  }

  public boolean equals(PlatformObjectVisibilities that) {
    if (that == null)
      return false;

    boolean this_present_platformObjectReadVisibility = true && this.isSetPlatformObjectReadVisibility();
    boolean that_present_platformObjectReadVisibility = true && that.isSetPlatformObjectReadVisibility();
    if (this_present_platformObjectReadVisibility || that_present_platformObjectReadVisibility) {
      if (!(this_present_platformObjectReadVisibility && that_present_platformObjectReadVisibility))
        return false;
      if (!this.platformObjectReadVisibility.equals(that.platformObjectReadVisibility))
        return false;
    }

    boolean this_present_platformObjectDiscoverVisibility = true && this.isSetPlatformObjectDiscoverVisibility();
    boolean that_present_platformObjectDiscoverVisibility = true && that.isSetPlatformObjectDiscoverVisibility();
    if (this_present_platformObjectDiscoverVisibility || that_present_platformObjectDiscoverVisibility) {
      if (!(this_present_platformObjectDiscoverVisibility && that_present_platformObjectDiscoverVisibility))
        return false;
      if (!this.platformObjectDiscoverVisibility.equals(that.platformObjectDiscoverVisibility))
        return false;
    }

    boolean this_present_platformObjectWriteVisibility = true && this.isSetPlatformObjectWriteVisibility();
    boolean that_present_platformObjectWriteVisibility = true && that.isSetPlatformObjectWriteVisibility();
    if (this_present_platformObjectWriteVisibility || that_present_platformObjectWriteVisibility) {
      if (!(this_present_platformObjectWriteVisibility && that_present_platformObjectWriteVisibility))
        return false;
      if (!this.platformObjectWriteVisibility.equals(that.platformObjectWriteVisibility))
        return false;
    }

    boolean this_present_platformObjectManageVisibility = true && this.isSetPlatformObjectManageVisibility();
    boolean that_present_platformObjectManageVisibility = true && that.isSetPlatformObjectManageVisibility();
    if (this_present_platformObjectManageVisibility || that_present_platformObjectManageVisibility) {
      if (!(this_present_platformObjectManageVisibility && that_present_platformObjectManageVisibility))
        return false;
      if (!this.platformObjectManageVisibility.equals(that.platformObjectManageVisibility))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PlatformObjectVisibilities other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlatformObjectReadVisibility()).compareTo(other.isSetPlatformObjectReadVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformObjectReadVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformObjectReadVisibility, other.platformObjectReadVisibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformObjectDiscoverVisibility()).compareTo(other.isSetPlatformObjectDiscoverVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformObjectDiscoverVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformObjectDiscoverVisibility, other.platformObjectDiscoverVisibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformObjectWriteVisibility()).compareTo(other.isSetPlatformObjectWriteVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformObjectWriteVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformObjectWriteVisibility, other.platformObjectWriteVisibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformObjectManageVisibility()).compareTo(other.isSetPlatformObjectManageVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformObjectManageVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformObjectManageVisibility, other.platformObjectManageVisibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PlatformObjectVisibilities(");
    boolean first = true;

    if (isSetPlatformObjectReadVisibility()) {
      sb.append("platformObjectReadVisibility:");
      if (this.platformObjectReadVisibility == null) {
        sb.append("null");
      } else {
        sb.append(this.platformObjectReadVisibility);
      }
      first = false;
    }
    if (isSetPlatformObjectDiscoverVisibility()) {
      if (!first) sb.append(", ");
      sb.append("platformObjectDiscoverVisibility:");
      if (this.platformObjectDiscoverVisibility == null) {
        sb.append("null");
      } else {
        sb.append(this.platformObjectDiscoverVisibility);
      }
      first = false;
    }
    if (isSetPlatformObjectWriteVisibility()) {
      if (!first) sb.append(", ");
      sb.append("platformObjectWriteVisibility:");
      if (this.platformObjectWriteVisibility == null) {
        sb.append("null");
      } else {
        sb.append(this.platformObjectWriteVisibility);
      }
      first = false;
    }
    if (isSetPlatformObjectManageVisibility()) {
      if (!first) sb.append(", ");
      sb.append("platformObjectManageVisibility:");
      if (this.platformObjectManageVisibility == null) {
        sb.append("null");
      } else {
        sb.append(this.platformObjectManageVisibility);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlatformObjectVisibilitiesStandardSchemeFactory implements SchemeFactory {
    public PlatformObjectVisibilitiesStandardScheme getScheme() {
      return new PlatformObjectVisibilitiesStandardScheme();
    }
  }

  private static class PlatformObjectVisibilitiesStandardScheme extends StandardScheme<PlatformObjectVisibilities> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PlatformObjectVisibilities struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLATFORM_OBJECT_READ_VISIBILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.platformObjectReadVisibility = new HashSet<Long>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  long _elem2;
                  _elem2 = iprot.readI64();
                  struct.platformObjectReadVisibility.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setPlatformObjectReadVisibilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLATFORM_OBJECT_DISCOVER_VISIBILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.platformObjectDiscoverVisibility = new HashSet<Long>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  long _elem5;
                  _elem5 = iprot.readI64();
                  struct.platformObjectDiscoverVisibility.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setPlatformObjectDiscoverVisibilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLATFORM_OBJECT_WRITE_VISIBILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.platformObjectWriteVisibility = new HashSet<Long>(2*_set6.size);
                for (int _i7 = 0; _i7 < _set6.size; ++_i7)
                {
                  long _elem8;
                  _elem8 = iprot.readI64();
                  struct.platformObjectWriteVisibility.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setPlatformObjectWriteVisibilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLATFORM_OBJECT_MANAGE_VISIBILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set9 = iprot.readSetBegin();
                struct.platformObjectManageVisibility = new HashSet<Long>(2*_set9.size);
                for (int _i10 = 0; _i10 < _set9.size; ++_i10)
                {
                  long _elem11;
                  _elem11 = iprot.readI64();
                  struct.platformObjectManageVisibility.add(_elem11);
                }
                iprot.readSetEnd();
              }
              struct.setPlatformObjectManageVisibilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PlatformObjectVisibilities struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.platformObjectReadVisibility != null) {
        if (struct.isSetPlatformObjectReadVisibility()) {
          oprot.writeFieldBegin(PLATFORM_OBJECT_READ_VISIBILITY_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.platformObjectReadVisibility.size()));
            for (long _iter12 : struct.platformObjectReadVisibility)
            {
              oprot.writeI64(_iter12);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.platformObjectDiscoverVisibility != null) {
        if (struct.isSetPlatformObjectDiscoverVisibility()) {
          oprot.writeFieldBegin(PLATFORM_OBJECT_DISCOVER_VISIBILITY_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.platformObjectDiscoverVisibility.size()));
            for (long _iter13 : struct.platformObjectDiscoverVisibility)
            {
              oprot.writeI64(_iter13);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.platformObjectWriteVisibility != null) {
        if (struct.isSetPlatformObjectWriteVisibility()) {
          oprot.writeFieldBegin(PLATFORM_OBJECT_WRITE_VISIBILITY_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.platformObjectWriteVisibility.size()));
            for (long _iter14 : struct.platformObjectWriteVisibility)
            {
              oprot.writeI64(_iter14);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.platformObjectManageVisibility != null) {
        if (struct.isSetPlatformObjectManageVisibility()) {
          oprot.writeFieldBegin(PLATFORM_OBJECT_MANAGE_VISIBILITY_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.platformObjectManageVisibility.size()));
            for (long _iter15 : struct.platformObjectManageVisibility)
            {
              oprot.writeI64(_iter15);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlatformObjectVisibilitiesTupleSchemeFactory implements SchemeFactory {
    public PlatformObjectVisibilitiesTupleScheme getScheme() {
      return new PlatformObjectVisibilitiesTupleScheme();
    }
  }

  private static class PlatformObjectVisibilitiesTupleScheme extends TupleScheme<PlatformObjectVisibilities> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlatformObjectVisibilities struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlatformObjectReadVisibility()) {
        optionals.set(0);
      }
      if (struct.isSetPlatformObjectDiscoverVisibility()) {
        optionals.set(1);
      }
      if (struct.isSetPlatformObjectWriteVisibility()) {
        optionals.set(2);
      }
      if (struct.isSetPlatformObjectManageVisibility()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPlatformObjectReadVisibility()) {
        {
          oprot.writeI32(struct.platformObjectReadVisibility.size());
          for (long _iter16 : struct.platformObjectReadVisibility)
          {
            oprot.writeI64(_iter16);
          }
        }
      }
      if (struct.isSetPlatformObjectDiscoverVisibility()) {
        {
          oprot.writeI32(struct.platformObjectDiscoverVisibility.size());
          for (long _iter17 : struct.platformObjectDiscoverVisibility)
          {
            oprot.writeI64(_iter17);
          }
        }
      }
      if (struct.isSetPlatformObjectWriteVisibility()) {
        {
          oprot.writeI32(struct.platformObjectWriteVisibility.size());
          for (long _iter18 : struct.platformObjectWriteVisibility)
          {
            oprot.writeI64(_iter18);
          }
        }
      }
      if (struct.isSetPlatformObjectManageVisibility()) {
        {
          oprot.writeI32(struct.platformObjectManageVisibility.size());
          for (long _iter19 : struct.platformObjectManageVisibility)
          {
            oprot.writeI64(_iter19);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlatformObjectVisibilities struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set20 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.platformObjectReadVisibility = new HashSet<Long>(2*_set20.size);
          for (int _i21 = 0; _i21 < _set20.size; ++_i21)
          {
            long _elem22;
            _elem22 = iprot.readI64();
            struct.platformObjectReadVisibility.add(_elem22);
          }
        }
        struct.setPlatformObjectReadVisibilityIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set23 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.platformObjectDiscoverVisibility = new HashSet<Long>(2*_set23.size);
          for (int _i24 = 0; _i24 < _set23.size; ++_i24)
          {
            long _elem25;
            _elem25 = iprot.readI64();
            struct.platformObjectDiscoverVisibility.add(_elem25);
          }
        }
        struct.setPlatformObjectDiscoverVisibilityIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set26 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.platformObjectWriteVisibility = new HashSet<Long>(2*_set26.size);
          for (int _i27 = 0; _i27 < _set26.size; ++_i27)
          {
            long _elem28;
            _elem28 = iprot.readI64();
            struct.platformObjectWriteVisibility.add(_elem28);
          }
        }
        struct.setPlatformObjectWriteVisibilityIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set29 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.platformObjectManageVisibility = new HashSet<Long>(2*_set29.size);
          for (int _i30 = 0; _i30 < _set29.size; ++_i30)
          {
            long _elem31;
            _elem31 = iprot.readI64();
            struct.platformObjectManageVisibility.add(_elem31);
          }
        }
        struct.setPlatformObjectManageVisibilityIsSet(true);
      }
    }
  }

}

