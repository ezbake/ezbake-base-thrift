/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "EzBakeBasePurgeService.h"
#include "thrift/async/TAsyncChannel.h"

namespace ezbake { namespace base { namespace thrift {

uint32_t EzBakeBasePurgeService_beginPurge_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_purgeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->purgeCallbackService);
          this->__isset.purgeCallbackService = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->purgeId);
          isset_purgeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->idsToPurge.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readSetBegin(_etype19, _size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              int64_t _elem21;
              xfer += iprot->readI64(_elem21);
              this->idsToPurge.insert(_elem21);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.idsToPurge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->initiatorToken.read(iprot);
          this->__isset.initiatorToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_purgeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EzBakeBasePurgeService_beginPurge_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_beginPurge_args");

  xfer += oprot->writeFieldBegin("purgeCallbackService", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->purgeCallbackService);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->purgeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idsToPurge", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->idsToPurge.size()));
    std::set<int64_t> ::const_iterator _iter22;
    for (_iter22 = this->idsToPurge.begin(); _iter22 != this->idsToPurge.end(); ++_iter22)
    {
      xfer += oprot->writeI64((*_iter22));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initiatorToken", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->initiatorToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_beginPurge_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_beginPurge_pargs");

  xfer += oprot->writeFieldBegin("purgeCallbackService", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->purgeCallbackService)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->purgeId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idsToPurge", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->idsToPurge)).size()));
    std::set<int64_t> ::const_iterator _iter23;
    for (_iter23 = (*(this->idsToPurge)).begin(); _iter23 != (*(this->idsToPurge)).end(); ++_iter23)
    {
      xfer += oprot->writeI64((*_iter23));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initiatorToken", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->initiatorToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_beginPurge_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenException.read(iprot);
          this->__isset.tokenException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EzBakeBasePurgeService_beginPurge_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_beginPurge_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.e) {
    xfer += oprot->writeFieldBegin("e", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->e.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.tokenException) {
    xfer += oprot->writeFieldBegin("tokenException", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->tokenException.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_beginPurge_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenException.read(iprot);
          this->__isset.tokenException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EzBakeBasePurgeService_beginPurge_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_beginPurge_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.e) {
    xfer += oprot->writeFieldBegin("e", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->e.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tokenException) {
    xfer += oprot->writeFieldBegin("tokenException", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->tokenException.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_beginVirusPurge_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_purgeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->purgeCallbackService);
          this->__isset.purgeCallbackService = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->purgeId);
          isset_purgeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->idsToPurge.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readSetBegin(_etype27, _size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              int64_t _elem29;
              xfer += iprot->readI64(_elem29);
              this->idsToPurge.insert(_elem29);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.idsToPurge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->initiatorToken.read(iprot);
          this->__isset.initiatorToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_purgeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EzBakeBasePurgeService_beginVirusPurge_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_beginVirusPurge_args");

  xfer += oprot->writeFieldBegin("purgeCallbackService", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->purgeCallbackService);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->purgeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idsToPurge", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->idsToPurge.size()));
    std::set<int64_t> ::const_iterator _iter30;
    for (_iter30 = this->idsToPurge.begin(); _iter30 != this->idsToPurge.end(); ++_iter30)
    {
      xfer += oprot->writeI64((*_iter30));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initiatorToken", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->initiatorToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_beginVirusPurge_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_beginVirusPurge_pargs");

  xfer += oprot->writeFieldBegin("purgeCallbackService", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->purgeCallbackService)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->purgeId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idsToPurge", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->idsToPurge)).size()));
    std::set<int64_t> ::const_iterator _iter31;
    for (_iter31 = (*(this->idsToPurge)).begin(); _iter31 != (*(this->idsToPurge)).end(); ++_iter31)
    {
      xfer += oprot->writeI64((*_iter31));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initiatorToken", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->initiatorToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_beginVirusPurge_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenException.read(iprot);
          this->__isset.tokenException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EzBakeBasePurgeService_beginVirusPurge_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_beginVirusPurge_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.e) {
    xfer += oprot->writeFieldBegin("e", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->e.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.tokenException) {
    xfer += oprot->writeFieldBegin("tokenException", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->tokenException.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_beginVirusPurge_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenException.read(iprot);
          this->__isset.tokenException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EzBakeBasePurgeService_beginVirusPurge_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_beginVirusPurge_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.e) {
    xfer += oprot->writeFieldBegin("e", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->e.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tokenException) {
    xfer += oprot->writeFieldBegin("tokenException", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->tokenException.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_purgeStatus_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_token = false;
  bool isset_purgeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          isset_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->purgeId);
          isset_purgeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_token)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_purgeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EzBakeBasePurgeService_purgeStatus_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_purgeStatus_args");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->purgeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_purgeStatus_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_purgeStatus_pargs");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->token)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->purgeId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_purgeStatus_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenException.read(iprot);
          this->__isset.tokenException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EzBakeBasePurgeService_purgeStatus_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_purgeStatus_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.tokenException) {
    xfer += oprot->writeFieldBegin("tokenException", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->tokenException.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_purgeStatus_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenException.read(iprot);
          this->__isset.tokenException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EzBakeBasePurgeService_purgeStatus_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_purgeStatus_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tokenException) {
    xfer += oprot->writeFieldBegin("tokenException", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->tokenException.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_cancelPurge_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_token = false;
  bool isset_purgeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          isset_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->purgeId);
          isset_purgeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_token)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_purgeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EzBakeBasePurgeService_cancelPurge_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_cancelPurge_args");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->purgeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_cancelPurge_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_cancelPurge_pargs");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->token)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->purgeId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_cancelPurge_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenException.read(iprot);
          this->__isset.tokenException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EzBakeBasePurgeService_cancelPurge_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_cancelPurge_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.tokenException) {
    xfer += oprot->writeFieldBegin("tokenException", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->tokenException.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t EzBakeBasePurgeService_cancelPurge_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenException.read(iprot);
          this->__isset.tokenException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EzBakeBasePurgeService_cancelPurge_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EzBakeBasePurgeService_cancelPurge_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tokenException) {
    xfer += oprot->writeFieldBegin("tokenException", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->tokenException.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void EzBakeBasePurgeServiceClient::beginPurge(PurgeState& _return, const std::string& purgeCallbackService, const int64_t purgeId, const std::set<int64_t> & idsToPurge, const  ::ezbake::base::thrift::EzSecurityToken& initiatorToken)
{
  send_beginPurge(purgeCallbackService, purgeId, idsToPurge, initiatorToken);
  recv_beginPurge(_return);
}

void EzBakeBasePurgeServiceClient::send_beginPurge(const std::string& purgeCallbackService, const int64_t purgeId, const std::set<int64_t> & idsToPurge, const  ::ezbake::base::thrift::EzSecurityToken& initiatorToken)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("beginPurge", ::apache::thrift::protocol::T_CALL, cseqid);

  EzBakeBasePurgeService_beginPurge_pargs args;
  args.purgeCallbackService = &purgeCallbackService;
  args.purgeId = &purgeId;
  args.idsToPurge = &idsToPurge;
  args.initiatorToken = &initiatorToken;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void EzBakeBasePurgeServiceClient::recv_beginPurge(PurgeState& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("beginPurge") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EzBakeBasePurgeService_beginPurge_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.e) {
    throw result.e;
  }
  if (result.__isset.tokenException) {
    throw result.tokenException;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "beginPurge failed: unknown result");
}

void EzBakeBasePurgeServiceClient::beginVirusPurge(PurgeState& _return, const std::string& purgeCallbackService, const int64_t purgeId, const std::set<int64_t> & idsToPurge, const  ::ezbake::base::thrift::EzSecurityToken& initiatorToken)
{
  send_beginVirusPurge(purgeCallbackService, purgeId, idsToPurge, initiatorToken);
  recv_beginVirusPurge(_return);
}

void EzBakeBasePurgeServiceClient::send_beginVirusPurge(const std::string& purgeCallbackService, const int64_t purgeId, const std::set<int64_t> & idsToPurge, const  ::ezbake::base::thrift::EzSecurityToken& initiatorToken)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("beginVirusPurge", ::apache::thrift::protocol::T_CALL, cseqid);

  EzBakeBasePurgeService_beginVirusPurge_pargs args;
  args.purgeCallbackService = &purgeCallbackService;
  args.purgeId = &purgeId;
  args.idsToPurge = &idsToPurge;
  args.initiatorToken = &initiatorToken;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void EzBakeBasePurgeServiceClient::recv_beginVirusPurge(PurgeState& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("beginVirusPurge") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EzBakeBasePurgeService_beginVirusPurge_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.e) {
    throw result.e;
  }
  if (result.__isset.tokenException) {
    throw result.tokenException;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "beginVirusPurge failed: unknown result");
}

void EzBakeBasePurgeServiceClient::purgeStatus(PurgeState& _return, const  ::ezbake::base::thrift::EzSecurityToken& token, const int64_t purgeId)
{
  send_purgeStatus(token, purgeId);
  recv_purgeStatus(_return);
}

void EzBakeBasePurgeServiceClient::send_purgeStatus(const  ::ezbake::base::thrift::EzSecurityToken& token, const int64_t purgeId)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("purgeStatus", ::apache::thrift::protocol::T_CALL, cseqid);

  EzBakeBasePurgeService_purgeStatus_pargs args;
  args.token = &token;
  args.purgeId = &purgeId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void EzBakeBasePurgeServiceClient::recv_purgeStatus(PurgeState& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("purgeStatus") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EzBakeBasePurgeService_purgeStatus_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.tokenException) {
    throw result.tokenException;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "purgeStatus failed: unknown result");
}

void EzBakeBasePurgeServiceClient::cancelPurge(PurgeState& _return, const  ::ezbake::base::thrift::EzSecurityToken& token, const int64_t purgeId)
{
  send_cancelPurge(token, purgeId);
  recv_cancelPurge(_return);
}

void EzBakeBasePurgeServiceClient::send_cancelPurge(const  ::ezbake::base::thrift::EzSecurityToken& token, const int64_t purgeId)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cancelPurge", ::apache::thrift::protocol::T_CALL, cseqid);

  EzBakeBasePurgeService_cancelPurge_pargs args;
  args.token = &token;
  args.purgeId = &purgeId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void EzBakeBasePurgeServiceClient::recv_cancelPurge(PurgeState& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cancelPurge") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EzBakeBasePurgeService_cancelPurge_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.tokenException) {
    throw result.tokenException;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cancelPurge failed: unknown result");
}

bool EzBakeBasePurgeServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    return  ::ezbake::base::thrift::EzBakeBaseServiceProcessor::dispatchCall(iprot, oprot, fname, seqid, callContext);
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void EzBakeBasePurgeServiceProcessor::process_beginPurge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.beginPurge", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.beginPurge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "EzBakeBasePurgeService.beginPurge");
  }

  EzBakeBasePurgeService_beginPurge_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "EzBakeBasePurgeService.beginPurge", bytes);
  }

  EzBakeBasePurgeService_beginPurge_result result;
  try {
    iface_->beginPurge(result.success, args.purgeCallbackService, args.purgeId, args.idsToPurge, args.initiatorToken);
    result.__isset.success = true;
  } catch (PurgeException &e) {
    result.e = e;
    result.__isset.e = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &tokenException) {
    result.tokenException = tokenException;
    result.__isset.tokenException = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "EzBakeBasePurgeService.beginPurge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("beginPurge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "EzBakeBasePurgeService.beginPurge");
  }

  oprot->writeMessageBegin("beginPurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "EzBakeBasePurgeService.beginPurge", bytes);
  }
}

void EzBakeBasePurgeServiceProcessor::process_beginVirusPurge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.beginVirusPurge", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.beginVirusPurge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "EzBakeBasePurgeService.beginVirusPurge");
  }

  EzBakeBasePurgeService_beginVirusPurge_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "EzBakeBasePurgeService.beginVirusPurge", bytes);
  }

  EzBakeBasePurgeService_beginVirusPurge_result result;
  try {
    iface_->beginVirusPurge(result.success, args.purgeCallbackService, args.purgeId, args.idsToPurge, args.initiatorToken);
    result.__isset.success = true;
  } catch (PurgeException &e) {
    result.e = e;
    result.__isset.e = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &tokenException) {
    result.tokenException = tokenException;
    result.__isset.tokenException = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "EzBakeBasePurgeService.beginVirusPurge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("beginVirusPurge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "EzBakeBasePurgeService.beginVirusPurge");
  }

  oprot->writeMessageBegin("beginVirusPurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "EzBakeBasePurgeService.beginVirusPurge", bytes);
  }
}

void EzBakeBasePurgeServiceProcessor::process_purgeStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.purgeStatus", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.purgeStatus");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "EzBakeBasePurgeService.purgeStatus");
  }

  EzBakeBasePurgeService_purgeStatus_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "EzBakeBasePurgeService.purgeStatus", bytes);
  }

  EzBakeBasePurgeService_purgeStatus_result result;
  try {
    iface_->purgeStatus(result.success, args.token, args.purgeId);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &tokenException) {
    result.tokenException = tokenException;
    result.__isset.tokenException = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "EzBakeBasePurgeService.purgeStatus");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("purgeStatus", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "EzBakeBasePurgeService.purgeStatus");
  }

  oprot->writeMessageBegin("purgeStatus", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "EzBakeBasePurgeService.purgeStatus", bytes);
  }
}

void EzBakeBasePurgeServiceProcessor::process_cancelPurge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.cancelPurge", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.cancelPurge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "EzBakeBasePurgeService.cancelPurge");
  }

  EzBakeBasePurgeService_cancelPurge_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "EzBakeBasePurgeService.cancelPurge", bytes);
  }

  EzBakeBasePurgeService_cancelPurge_result result;
  try {
    iface_->cancelPurge(result.success, args.token, args.purgeId);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &tokenException) {
    result.tokenException = tokenException;
    result.__isset.tokenException = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "EzBakeBasePurgeService.cancelPurge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cancelPurge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "EzBakeBasePurgeService.cancelPurge");
  }

  oprot->writeMessageBegin("cancelPurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "EzBakeBasePurgeService.cancelPurge", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > EzBakeBasePurgeServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< EzBakeBasePurgeServiceIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< EzBakeBasePurgeServiceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new EzBakeBasePurgeServiceProcessor(handler));
  return processor;
}
void EzBakeBasePurgeServiceCobClient::beginPurge(tcxx::function<void(EzBakeBasePurgeServiceCobClient* client)> cob, const std::string& purgeCallbackService, const int64_t purgeId, const std::set<int64_t> & idsToPurge, const  ::ezbake::base::thrift::EzSecurityToken& initiatorToken)
{
  send_beginPurge(purgeCallbackService, purgeId, idsToPurge, initiatorToken);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void EzBakeBasePurgeServiceCobClient::send_beginPurge(const std::string& purgeCallbackService, const int64_t purgeId, const std::set<int64_t> & idsToPurge, const  ::ezbake::base::thrift::EzSecurityToken& initiatorToken)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("beginPurge", ::apache::thrift::protocol::T_CALL, cseqid);

  EzBakeBasePurgeService_beginPurge_pargs args;
  args.purgeCallbackService = &purgeCallbackService;
  args.purgeId = &purgeId;
  args.idsToPurge = &idsToPurge;
  args.initiatorToken = &initiatorToken;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void EzBakeBasePurgeServiceCobClient::recv_beginPurge(PurgeState& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("beginPurge") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    EzBakeBasePurgeService_beginPurge_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.e) {
      completed = true;
      completed__(true);
      throw result.e;
    }
    if (result.__isset.tokenException) {
      completed = true;
      completed__(true);
      throw result.tokenException;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "beginPurge failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void EzBakeBasePurgeServiceCobClient::beginVirusPurge(tcxx::function<void(EzBakeBasePurgeServiceCobClient* client)> cob, const std::string& purgeCallbackService, const int64_t purgeId, const std::set<int64_t> & idsToPurge, const  ::ezbake::base::thrift::EzSecurityToken& initiatorToken)
{
  send_beginVirusPurge(purgeCallbackService, purgeId, idsToPurge, initiatorToken);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void EzBakeBasePurgeServiceCobClient::send_beginVirusPurge(const std::string& purgeCallbackService, const int64_t purgeId, const std::set<int64_t> & idsToPurge, const  ::ezbake::base::thrift::EzSecurityToken& initiatorToken)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("beginVirusPurge", ::apache::thrift::protocol::T_CALL, cseqid);

  EzBakeBasePurgeService_beginVirusPurge_pargs args;
  args.purgeCallbackService = &purgeCallbackService;
  args.purgeId = &purgeId;
  args.idsToPurge = &idsToPurge;
  args.initiatorToken = &initiatorToken;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void EzBakeBasePurgeServiceCobClient::recv_beginVirusPurge(PurgeState& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("beginVirusPurge") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    EzBakeBasePurgeService_beginVirusPurge_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.e) {
      completed = true;
      completed__(true);
      throw result.e;
    }
    if (result.__isset.tokenException) {
      completed = true;
      completed__(true);
      throw result.tokenException;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "beginVirusPurge failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void EzBakeBasePurgeServiceCobClient::purgeStatus(tcxx::function<void(EzBakeBasePurgeServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& token, const int64_t purgeId)
{
  send_purgeStatus(token, purgeId);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void EzBakeBasePurgeServiceCobClient::send_purgeStatus(const  ::ezbake::base::thrift::EzSecurityToken& token, const int64_t purgeId)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("purgeStatus", ::apache::thrift::protocol::T_CALL, cseqid);

  EzBakeBasePurgeService_purgeStatus_pargs args;
  args.token = &token;
  args.purgeId = &purgeId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void EzBakeBasePurgeServiceCobClient::recv_purgeStatus(PurgeState& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("purgeStatus") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    EzBakeBasePurgeService_purgeStatus_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.tokenException) {
      completed = true;
      completed__(true);
      throw result.tokenException;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "purgeStatus failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void EzBakeBasePurgeServiceCobClient::cancelPurge(tcxx::function<void(EzBakeBasePurgeServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& token, const int64_t purgeId)
{
  send_cancelPurge(token, purgeId);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void EzBakeBasePurgeServiceCobClient::send_cancelPurge(const  ::ezbake::base::thrift::EzSecurityToken& token, const int64_t purgeId)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cancelPurge", ::apache::thrift::protocol::T_CALL, cseqid);

  EzBakeBasePurgeService_cancelPurge_pargs args;
  args.token = &token;
  args.purgeId = &purgeId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void EzBakeBasePurgeServiceCobClient::recv_cancelPurge(PurgeState& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("cancelPurge") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    EzBakeBasePurgeService_cancelPurge_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.tokenException) {
      completed = true;
      completed__(true);
      throw result.tokenException;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cancelPurge failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void EzBakeBasePurgeServiceAsyncProcessor::dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    return  ::ezbake::base::thrift::EzBakeBaseServiceAsyncProcessor::dispatchCall(cob, iprot, oprot, fname, seqid);
  }
  (this->*(pfn->second))(cob, seqid, iprot, oprot);
  return;
}

void EzBakeBasePurgeServiceAsyncProcessor::process_beginPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  EzBakeBasePurgeService_beginPurge_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.beginPurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.beginPurge");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "EzBakeBasePurgeService.beginPurge");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "EzBakeBasePurgeService.beginPurge", bytes);
    }
  }
  catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "EzBakeBasePurgeService.beginPurge");
    }
    return cob(false);
  }
  freer.unregister();
  void (EzBakeBasePurgeServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeState& _return) =
    &EzBakeBasePurgeServiceAsyncProcessor::return_beginPurge;
  void (EzBakeBasePurgeServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &EzBakeBasePurgeServiceAsyncProcessor::throw_beginPurge;
  iface_->beginPurge(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.purgeCallbackService,
      args.purgeId,
      args.idsToPurge,
      args.initiatorToken);
}

void EzBakeBasePurgeServiceAsyncProcessor::return_beginPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeState& _return)
{
  EzBakeBasePurgeService_beginPurge_presult result;
  result.success = const_cast<PurgeState*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.beginPurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.beginPurge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "EzBakeBasePurgeService.beginPurge");
  }

  oprot->writeMessageBegin("beginPurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "EzBakeBasePurgeService.beginPurge", bytes);
  }
  return cob(true);
}

void EzBakeBasePurgeServiceAsyncProcessor::throw_beginPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.beginPurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.beginPurge");

  EzBakeBasePurgeService_beginPurge_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch (PurgeException &e) {
    result.e = e;
    result.__isset.e = true;
  }
  catch ( ::ezbake::base::thrift::EzSecurityTokenException &tokenException) {
    result.tokenException = tokenException;
    result.__isset.tokenException = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "EzBakeBasePurgeService.beginPurge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("beginPurge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "EzBakeBasePurgeService.beginPurge");
  }

  oprot->writeMessageBegin("beginPurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "EzBakeBasePurgeService.beginPurge", bytes);
  }
  return cob(true);
}

void EzBakeBasePurgeServiceAsyncProcessor::process_beginVirusPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  EzBakeBasePurgeService_beginVirusPurge_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.beginVirusPurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.beginVirusPurge");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "EzBakeBasePurgeService.beginVirusPurge");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "EzBakeBasePurgeService.beginVirusPurge", bytes);
    }
  }
  catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "EzBakeBasePurgeService.beginVirusPurge");
    }
    return cob(false);
  }
  freer.unregister();
  void (EzBakeBasePurgeServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeState& _return) =
    &EzBakeBasePurgeServiceAsyncProcessor::return_beginVirusPurge;
  void (EzBakeBasePurgeServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &EzBakeBasePurgeServiceAsyncProcessor::throw_beginVirusPurge;
  iface_->beginVirusPurge(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.purgeCallbackService,
      args.purgeId,
      args.idsToPurge,
      args.initiatorToken);
}

void EzBakeBasePurgeServiceAsyncProcessor::return_beginVirusPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeState& _return)
{
  EzBakeBasePurgeService_beginVirusPurge_presult result;
  result.success = const_cast<PurgeState*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.beginVirusPurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.beginVirusPurge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "EzBakeBasePurgeService.beginVirusPurge");
  }

  oprot->writeMessageBegin("beginVirusPurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "EzBakeBasePurgeService.beginVirusPurge", bytes);
  }
  return cob(true);
}

void EzBakeBasePurgeServiceAsyncProcessor::throw_beginVirusPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.beginVirusPurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.beginVirusPurge");

  EzBakeBasePurgeService_beginVirusPurge_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch (PurgeException &e) {
    result.e = e;
    result.__isset.e = true;
  }
  catch ( ::ezbake::base::thrift::EzSecurityTokenException &tokenException) {
    result.tokenException = tokenException;
    result.__isset.tokenException = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "EzBakeBasePurgeService.beginVirusPurge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("beginVirusPurge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "EzBakeBasePurgeService.beginVirusPurge");
  }

  oprot->writeMessageBegin("beginVirusPurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "EzBakeBasePurgeService.beginVirusPurge", bytes);
  }
  return cob(true);
}

void EzBakeBasePurgeServiceAsyncProcessor::process_purgeStatus(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  EzBakeBasePurgeService_purgeStatus_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.purgeStatus", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.purgeStatus");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "EzBakeBasePurgeService.purgeStatus");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "EzBakeBasePurgeService.purgeStatus", bytes);
    }
  }
  catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "EzBakeBasePurgeService.purgeStatus");
    }
    return cob(false);
  }
  freer.unregister();
  void (EzBakeBasePurgeServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeState& _return) =
    &EzBakeBasePurgeServiceAsyncProcessor::return_purgeStatus;
  void (EzBakeBasePurgeServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &EzBakeBasePurgeServiceAsyncProcessor::throw_purgeStatus;
  iface_->purgeStatus(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.token,
      args.purgeId);
}

void EzBakeBasePurgeServiceAsyncProcessor::return_purgeStatus(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeState& _return)
{
  EzBakeBasePurgeService_purgeStatus_presult result;
  result.success = const_cast<PurgeState*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.purgeStatus", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.purgeStatus");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "EzBakeBasePurgeService.purgeStatus");
  }

  oprot->writeMessageBegin("purgeStatus", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "EzBakeBasePurgeService.purgeStatus", bytes);
  }
  return cob(true);
}

void EzBakeBasePurgeServiceAsyncProcessor::throw_purgeStatus(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.purgeStatus", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.purgeStatus");

  EzBakeBasePurgeService_purgeStatus_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &tokenException) {
    result.tokenException = tokenException;
    result.__isset.tokenException = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "EzBakeBasePurgeService.purgeStatus");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("purgeStatus", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "EzBakeBasePurgeService.purgeStatus");
  }

  oprot->writeMessageBegin("purgeStatus", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "EzBakeBasePurgeService.purgeStatus", bytes);
  }
  return cob(true);
}

void EzBakeBasePurgeServiceAsyncProcessor::process_cancelPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  EzBakeBasePurgeService_cancelPurge_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.cancelPurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.cancelPurge");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "EzBakeBasePurgeService.cancelPurge");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "EzBakeBasePurgeService.cancelPurge", bytes);
    }
  }
  catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "EzBakeBasePurgeService.cancelPurge");
    }
    return cob(false);
  }
  freer.unregister();
  void (EzBakeBasePurgeServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeState& _return) =
    &EzBakeBasePurgeServiceAsyncProcessor::return_cancelPurge;
  void (EzBakeBasePurgeServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &EzBakeBasePurgeServiceAsyncProcessor::throw_cancelPurge;
  iface_->cancelPurge(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.token,
      args.purgeId);
}

void EzBakeBasePurgeServiceAsyncProcessor::return_cancelPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeState& _return)
{
  EzBakeBasePurgeService_cancelPurge_presult result;
  result.success = const_cast<PurgeState*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.cancelPurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.cancelPurge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "EzBakeBasePurgeService.cancelPurge");
  }

  oprot->writeMessageBegin("cancelPurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "EzBakeBasePurgeService.cancelPurge", bytes);
  }
  return cob(true);
}

void EzBakeBasePurgeServiceAsyncProcessor::throw_cancelPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("EzBakeBasePurgeService.cancelPurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EzBakeBasePurgeService.cancelPurge");

  EzBakeBasePurgeService_cancelPurge_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &tokenException) {
    result.tokenException = tokenException;
    result.__isset.tokenException = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "EzBakeBasePurgeService.cancelPurge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cancelPurge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "EzBakeBasePurgeService.cancelPurge");
  }

  oprot->writeMessageBegin("cancelPurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "EzBakeBasePurgeService.cancelPurge", bytes);
  }
  return cob(true);
}

::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > EzBakeBasePurgeServiceAsyncProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< EzBakeBasePurgeServiceCobSvIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< EzBakeBasePurgeServiceCobSvIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > processor(new EzBakeBasePurgeServiceAsyncProcessor(handler));
  return processor;
}
}}} // namespace

