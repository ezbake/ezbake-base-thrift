/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.base.thrift.metrics;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MetricRegistryThrift implements org.apache.thrift.TBase<MetricRegistryThrift, MetricRegistryThrift._Fields>, java.io.Serializable, Cloneable, Comparable<MetricRegistryThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetricRegistryThrift");

  private static final org.apache.thrift.protocol.TField GAUGES_FIELD_DESC = new org.apache.thrift.protocol.TField("gauges", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField COUNTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("counters", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField HISTOGRAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("histograms", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField METERS_FIELD_DESC = new org.apache.thrift.protocol.TField("meters", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField TIMERS_FIELD_DESC = new org.apache.thrift.protocol.TField("timers", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetricRegistryThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MetricRegistryThriftTupleSchemeFactory());
  }

  public Map<String,GaugeThrift> gauges; // required
  public Map<String,CounterThrift> counters; // required
  public Map<String,HistogramThrift> histograms; // required
  public Map<String,MeteredThrift> meters; // required
  public Map<String,TimerThrift> timers; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GAUGES((short)1, "gauges"),
    COUNTERS((short)2, "counters"),
    HISTOGRAMS((short)3, "histograms"),
    METERS((short)4, "meters"),
    TIMERS((short)5, "timers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GAUGES
          return GAUGES;
        case 2: // COUNTERS
          return COUNTERS;
        case 3: // HISTOGRAMS
          return HISTOGRAMS;
        case 4: // METERS
          return METERS;
        case 5: // TIMERS
          return TIMERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GAUGES, new org.apache.thrift.meta_data.FieldMetaData("gauges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GaugeThrift.class))));
    tmpMap.put(_Fields.COUNTERS, new org.apache.thrift.meta_data.FieldMetaData("counters", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CounterThrift.class))));
    tmpMap.put(_Fields.HISTOGRAMS, new org.apache.thrift.meta_data.FieldMetaData("histograms", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HistogramThrift.class))));
    tmpMap.put(_Fields.METERS, new org.apache.thrift.meta_data.FieldMetaData("meters", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeteredThrift.class))));
    tmpMap.put(_Fields.TIMERS, new org.apache.thrift.meta_data.FieldMetaData("timers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimerThrift.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetricRegistryThrift.class, metaDataMap);
  }

  public MetricRegistryThrift() {
  }

  public MetricRegistryThrift(
    Map<String,GaugeThrift> gauges,
    Map<String,CounterThrift> counters,
    Map<String,HistogramThrift> histograms,
    Map<String,MeteredThrift> meters,
    Map<String,TimerThrift> timers)
  {
    this();
    this.gauges = gauges;
    this.counters = counters;
    this.histograms = histograms;
    this.meters = meters;
    this.timers = timers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MetricRegistryThrift(MetricRegistryThrift other) {
    if (other.isSetGauges()) {
      Map<String,GaugeThrift> __this__gauges = new HashMap<String,GaugeThrift>(other.gauges.size());
      for (Map.Entry<String, GaugeThrift> other_element : other.gauges.entrySet()) {

        String other_element_key = other_element.getKey();
        GaugeThrift other_element_value = other_element.getValue();

        String __this__gauges_copy_key = other_element_key;

        GaugeThrift __this__gauges_copy_value = new GaugeThrift(other_element_value);

        __this__gauges.put(__this__gauges_copy_key, __this__gauges_copy_value);
      }
      this.gauges = __this__gauges;
    }
    if (other.isSetCounters()) {
      Map<String,CounterThrift> __this__counters = new HashMap<String,CounterThrift>(other.counters.size());
      for (Map.Entry<String, CounterThrift> other_element : other.counters.entrySet()) {

        String other_element_key = other_element.getKey();
        CounterThrift other_element_value = other_element.getValue();

        String __this__counters_copy_key = other_element_key;

        CounterThrift __this__counters_copy_value = new CounterThrift(other_element_value);

        __this__counters.put(__this__counters_copy_key, __this__counters_copy_value);
      }
      this.counters = __this__counters;
    }
    if (other.isSetHistograms()) {
      Map<String,HistogramThrift> __this__histograms = new HashMap<String,HistogramThrift>(other.histograms.size());
      for (Map.Entry<String, HistogramThrift> other_element : other.histograms.entrySet()) {

        String other_element_key = other_element.getKey();
        HistogramThrift other_element_value = other_element.getValue();

        String __this__histograms_copy_key = other_element_key;

        HistogramThrift __this__histograms_copy_value = new HistogramThrift(other_element_value);

        __this__histograms.put(__this__histograms_copy_key, __this__histograms_copy_value);
      }
      this.histograms = __this__histograms;
    }
    if (other.isSetMeters()) {
      Map<String,MeteredThrift> __this__meters = new HashMap<String,MeteredThrift>(other.meters.size());
      for (Map.Entry<String, MeteredThrift> other_element : other.meters.entrySet()) {

        String other_element_key = other_element.getKey();
        MeteredThrift other_element_value = other_element.getValue();

        String __this__meters_copy_key = other_element_key;

        MeteredThrift __this__meters_copy_value = new MeteredThrift(other_element_value);

        __this__meters.put(__this__meters_copy_key, __this__meters_copy_value);
      }
      this.meters = __this__meters;
    }
    if (other.isSetTimers()) {
      Map<String,TimerThrift> __this__timers = new HashMap<String,TimerThrift>(other.timers.size());
      for (Map.Entry<String, TimerThrift> other_element : other.timers.entrySet()) {

        String other_element_key = other_element.getKey();
        TimerThrift other_element_value = other_element.getValue();

        String __this__timers_copy_key = other_element_key;

        TimerThrift __this__timers_copy_value = new TimerThrift(other_element_value);

        __this__timers.put(__this__timers_copy_key, __this__timers_copy_value);
      }
      this.timers = __this__timers;
    }
  }

  public MetricRegistryThrift deepCopy() {
    return new MetricRegistryThrift(this);
  }

  @Override
  public void clear() {
    this.gauges = null;
    this.counters = null;
    this.histograms = null;
    this.meters = null;
    this.timers = null;
  }

  public int getGaugesSize() {
    return (this.gauges == null) ? 0 : this.gauges.size();
  }

  public void putToGauges(String key, GaugeThrift val) {
    if (this.gauges == null) {
      this.gauges = new HashMap<String,GaugeThrift>();
    }
    this.gauges.put(key, val);
  }

  public Map<String,GaugeThrift> getGauges() {
    return this.gauges;
  }

  public MetricRegistryThrift setGauges(Map<String,GaugeThrift> gauges) {
    this.gauges = gauges;
    return this;
  }

  public void unsetGauges() {
    this.gauges = null;
  }

  /** Returns true if field gauges is set (has been assigned a value) and false otherwise */
  public boolean isSetGauges() {
    return this.gauges != null;
  }

  public void setGaugesIsSet(boolean value) {
    if (!value) {
      this.gauges = null;
    }
  }

  public int getCountersSize() {
    return (this.counters == null) ? 0 : this.counters.size();
  }

  public void putToCounters(String key, CounterThrift val) {
    if (this.counters == null) {
      this.counters = new HashMap<String,CounterThrift>();
    }
    this.counters.put(key, val);
  }

  public Map<String,CounterThrift> getCounters() {
    return this.counters;
  }

  public MetricRegistryThrift setCounters(Map<String,CounterThrift> counters) {
    this.counters = counters;
    return this;
  }

  public void unsetCounters() {
    this.counters = null;
  }

  /** Returns true if field counters is set (has been assigned a value) and false otherwise */
  public boolean isSetCounters() {
    return this.counters != null;
  }

  public void setCountersIsSet(boolean value) {
    if (!value) {
      this.counters = null;
    }
  }

  public int getHistogramsSize() {
    return (this.histograms == null) ? 0 : this.histograms.size();
  }

  public void putToHistograms(String key, HistogramThrift val) {
    if (this.histograms == null) {
      this.histograms = new HashMap<String,HistogramThrift>();
    }
    this.histograms.put(key, val);
  }

  public Map<String,HistogramThrift> getHistograms() {
    return this.histograms;
  }

  public MetricRegistryThrift setHistograms(Map<String,HistogramThrift> histograms) {
    this.histograms = histograms;
    return this;
  }

  public void unsetHistograms() {
    this.histograms = null;
  }

  /** Returns true if field histograms is set (has been assigned a value) and false otherwise */
  public boolean isSetHistograms() {
    return this.histograms != null;
  }

  public void setHistogramsIsSet(boolean value) {
    if (!value) {
      this.histograms = null;
    }
  }

  public int getMetersSize() {
    return (this.meters == null) ? 0 : this.meters.size();
  }

  public void putToMeters(String key, MeteredThrift val) {
    if (this.meters == null) {
      this.meters = new HashMap<String,MeteredThrift>();
    }
    this.meters.put(key, val);
  }

  public Map<String,MeteredThrift> getMeters() {
    return this.meters;
  }

  public MetricRegistryThrift setMeters(Map<String,MeteredThrift> meters) {
    this.meters = meters;
    return this;
  }

  public void unsetMeters() {
    this.meters = null;
  }

  /** Returns true if field meters is set (has been assigned a value) and false otherwise */
  public boolean isSetMeters() {
    return this.meters != null;
  }

  public void setMetersIsSet(boolean value) {
    if (!value) {
      this.meters = null;
    }
  }

  public int getTimersSize() {
    return (this.timers == null) ? 0 : this.timers.size();
  }

  public void putToTimers(String key, TimerThrift val) {
    if (this.timers == null) {
      this.timers = new HashMap<String,TimerThrift>();
    }
    this.timers.put(key, val);
  }

  public Map<String,TimerThrift> getTimers() {
    return this.timers;
  }

  public MetricRegistryThrift setTimers(Map<String,TimerThrift> timers) {
    this.timers = timers;
    return this;
  }

  public void unsetTimers() {
    this.timers = null;
  }

  /** Returns true if field timers is set (has been assigned a value) and false otherwise */
  public boolean isSetTimers() {
    return this.timers != null;
  }

  public void setTimersIsSet(boolean value) {
    if (!value) {
      this.timers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GAUGES:
      if (value == null) {
        unsetGauges();
      } else {
        setGauges((Map<String,GaugeThrift>)value);
      }
      break;

    case COUNTERS:
      if (value == null) {
        unsetCounters();
      } else {
        setCounters((Map<String,CounterThrift>)value);
      }
      break;

    case HISTOGRAMS:
      if (value == null) {
        unsetHistograms();
      } else {
        setHistograms((Map<String,HistogramThrift>)value);
      }
      break;

    case METERS:
      if (value == null) {
        unsetMeters();
      } else {
        setMeters((Map<String,MeteredThrift>)value);
      }
      break;

    case TIMERS:
      if (value == null) {
        unsetTimers();
      } else {
        setTimers((Map<String,TimerThrift>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GAUGES:
      return getGauges();

    case COUNTERS:
      return getCounters();

    case HISTOGRAMS:
      return getHistograms();

    case METERS:
      return getMeters();

    case TIMERS:
      return getTimers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GAUGES:
      return isSetGauges();
    case COUNTERS:
      return isSetCounters();
    case HISTOGRAMS:
      return isSetHistograms();
    case METERS:
      return isSetMeters();
    case TIMERS:
      return isSetTimers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MetricRegistryThrift)
      return this.equals((MetricRegistryThrift)that);
    return false;
  }

  public boolean equals(MetricRegistryThrift that) {
    if (that == null)
      return false;

    boolean this_present_gauges = true && this.isSetGauges();
    boolean that_present_gauges = true && that.isSetGauges();
    if (this_present_gauges || that_present_gauges) {
      if (!(this_present_gauges && that_present_gauges))
        return false;
      if (!this.gauges.equals(that.gauges))
        return false;
    }

    boolean this_present_counters = true && this.isSetCounters();
    boolean that_present_counters = true && that.isSetCounters();
    if (this_present_counters || that_present_counters) {
      if (!(this_present_counters && that_present_counters))
        return false;
      if (!this.counters.equals(that.counters))
        return false;
    }

    boolean this_present_histograms = true && this.isSetHistograms();
    boolean that_present_histograms = true && that.isSetHistograms();
    if (this_present_histograms || that_present_histograms) {
      if (!(this_present_histograms && that_present_histograms))
        return false;
      if (!this.histograms.equals(that.histograms))
        return false;
    }

    boolean this_present_meters = true && this.isSetMeters();
    boolean that_present_meters = true && that.isSetMeters();
    if (this_present_meters || that_present_meters) {
      if (!(this_present_meters && that_present_meters))
        return false;
      if (!this.meters.equals(that.meters))
        return false;
    }

    boolean this_present_timers = true && this.isSetTimers();
    boolean that_present_timers = true && that.isSetTimers();
    if (this_present_timers || that_present_timers) {
      if (!(this_present_timers && that_present_timers))
        return false;
      if (!this.timers.equals(that.timers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MetricRegistryThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGauges()).compareTo(other.isSetGauges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGauges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gauges, other.gauges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounters()).compareTo(other.isSetCounters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counters, other.counters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHistograms()).compareTo(other.isSetHistograms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHistograms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.histograms, other.histograms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeters()).compareTo(other.isSetMeters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meters, other.meters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimers()).compareTo(other.isSetTimers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timers, other.timers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MetricRegistryThrift(");
    boolean first = true;

    sb.append("gauges:");
    if (this.gauges == null) {
      sb.append("null");
    } else {
      sb.append(this.gauges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("counters:");
    if (this.counters == null) {
      sb.append("null");
    } else {
      sb.append(this.counters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("histograms:");
    if (this.histograms == null) {
      sb.append("null");
    } else {
      sb.append(this.histograms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meters:");
    if (this.meters == null) {
      sb.append("null");
    } else {
      sb.append(this.meters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timers:");
    if (this.timers == null) {
      sb.append("null");
    } else {
      sb.append(this.timers);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (gauges == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gauges' was not present! Struct: " + toString());
    }
    if (counters == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'counters' was not present! Struct: " + toString());
    }
    if (histograms == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'histograms' was not present! Struct: " + toString());
    }
    if (meters == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'meters' was not present! Struct: " + toString());
    }
    if (timers == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timers' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetricRegistryThriftStandardSchemeFactory implements SchemeFactory {
    public MetricRegistryThriftStandardScheme getScheme() {
      return new MetricRegistryThriftStandardScheme();
    }
  }

  private static class MetricRegistryThriftStandardScheme extends StandardScheme<MetricRegistryThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MetricRegistryThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GAUGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.gauges = new HashMap<String,GaugeThrift>(2*_map8.size);
                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                {
                  String _key10;
                  GaugeThrift _val11;
                  _key10 = iprot.readString();
                  _val11 = new GaugeThrift();
                  _val11.read(iprot);
                  struct.gauges.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setGaugesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin();
                struct.counters = new HashMap<String,CounterThrift>(2*_map12.size);
                for (int _i13 = 0; _i13 < _map12.size; ++_i13)
                {
                  String _key14;
                  CounterThrift _val15;
                  _key14 = iprot.readString();
                  _val15 = new CounterThrift();
                  _val15.read(iprot);
                  struct.counters.put(_key14, _val15);
                }
                iprot.readMapEnd();
              }
              struct.setCountersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HISTOGRAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.histograms = new HashMap<String,HistogramThrift>(2*_map16.size);
                for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                {
                  String _key18;
                  HistogramThrift _val19;
                  _key18 = iprot.readString();
                  _val19 = new HistogramThrift();
                  _val19.read(iprot);
                  struct.histograms.put(_key18, _val19);
                }
                iprot.readMapEnd();
              }
              struct.setHistogramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // METERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                struct.meters = new HashMap<String,MeteredThrift>(2*_map20.size);
                for (int _i21 = 0; _i21 < _map20.size; ++_i21)
                {
                  String _key22;
                  MeteredThrift _val23;
                  _key22 = iprot.readString();
                  _val23 = new MeteredThrift();
                  _val23.read(iprot);
                  struct.meters.put(_key22, _val23);
                }
                iprot.readMapEnd();
              }
              struct.setMetersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                struct.timers = new HashMap<String,TimerThrift>(2*_map24.size);
                for (int _i25 = 0; _i25 < _map24.size; ++_i25)
                {
                  String _key26;
                  TimerThrift _val27;
                  _key26 = iprot.readString();
                  _val27 = new TimerThrift();
                  _val27.read(iprot);
                  struct.timers.put(_key26, _val27);
                }
                iprot.readMapEnd();
              }
              struct.setTimersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MetricRegistryThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gauges != null) {
        oprot.writeFieldBegin(GAUGES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.gauges.size()));
          for (Map.Entry<String, GaugeThrift> _iter28 : struct.gauges.entrySet())
          {
            oprot.writeString(_iter28.getKey());
            _iter28.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.counters != null) {
        oprot.writeFieldBegin(COUNTERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.counters.size()));
          for (Map.Entry<String, CounterThrift> _iter29 : struct.counters.entrySet())
          {
            oprot.writeString(_iter29.getKey());
            _iter29.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.histograms != null) {
        oprot.writeFieldBegin(HISTOGRAMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.histograms.size()));
          for (Map.Entry<String, HistogramThrift> _iter30 : struct.histograms.entrySet())
          {
            oprot.writeString(_iter30.getKey());
            _iter30.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.meters != null) {
        oprot.writeFieldBegin(METERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.meters.size()));
          for (Map.Entry<String, MeteredThrift> _iter31 : struct.meters.entrySet())
          {
            oprot.writeString(_iter31.getKey());
            _iter31.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.timers != null) {
        oprot.writeFieldBegin(TIMERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.timers.size()));
          for (Map.Entry<String, TimerThrift> _iter32 : struct.timers.entrySet())
          {
            oprot.writeString(_iter32.getKey());
            _iter32.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetricRegistryThriftTupleSchemeFactory implements SchemeFactory {
    public MetricRegistryThriftTupleScheme getScheme() {
      return new MetricRegistryThriftTupleScheme();
    }
  }

  private static class MetricRegistryThriftTupleScheme extends TupleScheme<MetricRegistryThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MetricRegistryThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.gauges.size());
        for (Map.Entry<String, GaugeThrift> _iter33 : struct.gauges.entrySet())
        {
          oprot.writeString(_iter33.getKey());
          _iter33.getValue().write(oprot);
        }
      }
      {
        oprot.writeI32(struct.counters.size());
        for (Map.Entry<String, CounterThrift> _iter34 : struct.counters.entrySet())
        {
          oprot.writeString(_iter34.getKey());
          _iter34.getValue().write(oprot);
        }
      }
      {
        oprot.writeI32(struct.histograms.size());
        for (Map.Entry<String, HistogramThrift> _iter35 : struct.histograms.entrySet())
        {
          oprot.writeString(_iter35.getKey());
          _iter35.getValue().write(oprot);
        }
      }
      {
        oprot.writeI32(struct.meters.size());
        for (Map.Entry<String, MeteredThrift> _iter36 : struct.meters.entrySet())
        {
          oprot.writeString(_iter36.getKey());
          _iter36.getValue().write(oprot);
        }
      }
      {
        oprot.writeI32(struct.timers.size());
        for (Map.Entry<String, TimerThrift> _iter37 : struct.timers.entrySet())
        {
          oprot.writeString(_iter37.getKey());
          _iter37.getValue().write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MetricRegistryThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.gauges = new HashMap<String,GaugeThrift>(2*_map38.size);
        for (int _i39 = 0; _i39 < _map38.size; ++_i39)
        {
          String _key40;
          GaugeThrift _val41;
          _key40 = iprot.readString();
          _val41 = new GaugeThrift();
          _val41.read(iprot);
          struct.gauges.put(_key40, _val41);
        }
      }
      struct.setGaugesIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map42 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.counters = new HashMap<String,CounterThrift>(2*_map42.size);
        for (int _i43 = 0; _i43 < _map42.size; ++_i43)
        {
          String _key44;
          CounterThrift _val45;
          _key44 = iprot.readString();
          _val45 = new CounterThrift();
          _val45.read(iprot);
          struct.counters.put(_key44, _val45);
        }
      }
      struct.setCountersIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.histograms = new HashMap<String,HistogramThrift>(2*_map46.size);
        for (int _i47 = 0; _i47 < _map46.size; ++_i47)
        {
          String _key48;
          HistogramThrift _val49;
          _key48 = iprot.readString();
          _val49 = new HistogramThrift();
          _val49.read(iprot);
          struct.histograms.put(_key48, _val49);
        }
      }
      struct.setHistogramsIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.meters = new HashMap<String,MeteredThrift>(2*_map50.size);
        for (int _i51 = 0; _i51 < _map50.size; ++_i51)
        {
          String _key52;
          MeteredThrift _val53;
          _key52 = iprot.readString();
          _val53 = new MeteredThrift();
          _val53.read(iprot);
          struct.meters.put(_key52, _val53);
        }
      }
      struct.setMetersIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.timers = new HashMap<String,TimerThrift>(2*_map54.size);
        for (int _i55 = 0; _i55 < _map54.size; ++_i55)
        {
          String _key56;
          TimerThrift _val57;
          _key56 = iprot.readString();
          _val57 = new TimerThrift();
          _val57.read(iprot);
          struct.timers.put(_key56, _val57);
        }
      }
      struct.setTimersIsSet(true);
    }
  }

}

