#   Copyright (C) 2013-2014 Computer Sciences Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ezbakeBaseService.EzBakeBaseService
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(ezbakeBaseService.EzBakeBaseService.Iface):
  def getStandardSearchResultForURI(self, uri, userToken):
    """
    Parameters:
     - uri
     - userToken
    """
    pass

  def getStandardSearchResultForURIs(self, uris, userToken):
    """
    Parameters:
     - uris
     - userToken
    """
    pass


class Client(ezbakeBaseService.EzBakeBaseService.Client, Iface):
  def __init__(self, iprot, oprot=None):
    ezbakeBaseService.EzBakeBaseService.Client.__init__(self, iprot, oprot)

  def getStandardSearchResultForURI(self, uri, userToken):
    """
    Parameters:
     - uri
     - userToken
    """
    self.send_getStandardSearchResultForURI(uri, userToken)
    return self.recv_getStandardSearchResultForURI()

  def send_getStandardSearchResultForURI(self, uri, userToken):
    self._oprot.writeMessageBegin('getStandardSearchResultForURI', TMessageType.CALL, self._seqid)
    args = getStandardSearchResultForURI_args()
    args.uri = uri
    args.userToken = userToken
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getStandardSearchResultForURI(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getStandardSearchResultForURI_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getStandardSearchResultForURI failed: unknown result");

  def getStandardSearchResultForURIs(self, uris, userToken):
    """
    Parameters:
     - uris
     - userToken
    """
    self.send_getStandardSearchResultForURIs(uris, userToken)
    return self.recv_getStandardSearchResultForURIs()

  def send_getStandardSearchResultForURIs(self, uris, userToken):
    self._oprot.writeMessageBegin('getStandardSearchResultForURIs', TMessageType.CALL, self._seqid)
    args = getStandardSearchResultForURIs_args()
    args.uris = uris
    args.userToken = userToken
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getStandardSearchResultForURIs(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getStandardSearchResultForURIs_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getStandardSearchResultForURIs failed: unknown result");


class Processor(ezbakeBaseService.EzBakeBaseService.Processor, Iface, TProcessor):
  def __init__(self, handler):
    ezbakeBaseService.EzBakeBaseService.Processor.__init__(self, handler)
    self._processMap["getStandardSearchResultForURI"] = Processor.process_getStandardSearchResultForURI
    self._processMap["getStandardSearchResultForURIs"] = Processor.process_getStandardSearchResultForURIs

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getStandardSearchResultForURI(self, seqid, iprot, oprot):
    args = getStandardSearchResultForURI_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getStandardSearchResultForURI_result()
    result.success = self._handler.getStandardSearchResultForURI(args.uri, args.userToken)
    oprot.writeMessageBegin("getStandardSearchResultForURI", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getStandardSearchResultForURIs(self, seqid, iprot, oprot):
    args = getStandardSearchResultForURIs_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getStandardSearchResultForURIs_result()
    result.success = self._handler.getStandardSearchResultForURIs(args.uris, args.userToken)
    oprot.writeMessageBegin("getStandardSearchResultForURIs", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getStandardSearchResultForURI_args(object):
  """
  Attributes:
   - uri
   - userToken
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uri', None, None, ), # 1
    (2, TType.STRUCT, 'userToken', (ezbakeBaseTypes.ttypes.EzSecurityToken, ezbakeBaseTypes.ttypes.EzSecurityToken.thrift_spec), None, ), # 2
  )

  def __init__(self, uri=None, userToken=None,):
    self.uri = uri
    self.userToken = userToken

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uri = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.userToken = ezbakeBaseTypes.ttypes.EzSecurityToken()
          self.userToken.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStandardSearchResultForURI_args')
    if self.uri is not None:
      oprot.writeFieldBegin('uri', TType.STRING, 1)
      oprot.writeString(self.uri)
      oprot.writeFieldEnd()
    if self.userToken is not None:
      oprot.writeFieldBegin('userToken', TType.STRUCT, 2)
      self.userToken.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getStandardSearchResultForURI_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ezbakeBaseTypes.ttypes.SSR, ezbakeBaseTypes.ttypes.SSR.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ezbakeBaseTypes.ttypes.SSR()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStandardSearchResultForURI_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getStandardSearchResultForURIs_args(object):
  """
  Attributes:
   - uris
   - userToken
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'uris', (TType.STRING,None), None, ), # 1
    (2, TType.STRUCT, 'userToken', (ezbakeBaseTypes.ttypes.EzSecurityToken, ezbakeBaseTypes.ttypes.EzSecurityToken.thrift_spec), None, ), # 2
  )

  def __init__(self, uris=None, userToken=None,):
    self.uris = uris
    self.userToken = userToken

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.uris = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.uris.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.userToken = ezbakeBaseTypes.ttypes.EzSecurityToken()
          self.userToken.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStandardSearchResultForURIs_args')
    if self.uris is not None:
      oprot.writeFieldBegin('uris', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.uris))
      for iter6 in self.uris:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.userToken is not None:
      oprot.writeFieldBegin('userToken', TType.STRUCT, 2)
      self.userToken.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getStandardSearchResultForURIs_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ezbakeBaseTypes.ttypes.SSR, ezbakeBaseTypes.ttypes.SSR.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ezbakeBaseTypes.ttypes.SSR()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStandardSearchResultForURIs_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
