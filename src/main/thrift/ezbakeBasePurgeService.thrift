/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

namespace java ezbake.base.thrift
namespace cpp ezbake.base.thrift
namespace js ezbake.base.thrift

include "ezbakeBaseTypes.thrift"
include "ezbakeBaseService.thrift"

exception PurgeException {
    1: string message
}

enum CancelStatus{
    NOT_CANCELED,
    CANCELED,
    CANCEL_IN_PROGRESS,
    CANNOT_CANCEL
}

enum PurgeStatus {
   UNKNOWN_ID,
   WAITING_TO_START, /* only valid when this structure is generated by the central purge service */
   STARTING,
   PURGING,
   STOPPING,
   ERROR,
   FINISHED_COMPLETE,
   FINISHED_INCOMPLETE
}

struct PurgeState {
    1: required PurgeStatus purgeStatus,

    2: required i64 purgeId,

    /* The time at which this status was last updated */
    3: required ezbakeBaseTypes.DateTime timeStamp,

    /* The numbers in this set correspond to IDs  that were set in the initiating
       idsToPurge set, where the referenced ID was purged from
       this application either because it found and successfully completely removed, or because
       that ID was not found within this application.

       Ids may exist in both the purged and notPurged set. The central purge
       service will remove any ids in the notPurged set from the purged set automatically.

       The value for this parameter should not be considered valid if status is one of
         UNKNOWN_ID
         WAITING_TO_START */
    4: required set<i64> purged,

    /* The numbers in this set correspond to IDs that were set in the initiating
       idsToPurge set, where the referenced ID was found within this
       application’s data, but where this application was not able to completely remove data
       marked with this ID. If this set is of non-zero length, system administrators must contact
       app administrators to initiate manual purge

       The value for this parameter should not be considered valid if status is one of
         UNKNOWN_ID
         WAITING_TO_START */
    5: required set<i64> notPurged,

    /*  The suggested minimum period(ms) at which the central purge
        service should poll the status of a purge. (only a suggestion, may be
        ignored by the purge service)
     */
    6: required i32 suggestedPollPeriod,

    7: optional CancelStatus cancelStatus = CancelStatus.NOT_CANCELED
}


/**
 * This is the base thrift service an application needs to implement to support the centralized purging.  The
 * central purge service will call every application's purge service to initiate a purge operation.
 *
 *   +-------------------------+
 *   |                         |
 *   |  Central Purge Service  |
 *   |                         |
 *   +-----------+-------------+
 *               |              
 *               |              
 *               |              
 *   +-----------v-------------+
 *   |                         |
 *   |Application Purge Service|
 *   |                         |
 *   +-----------+-------------+
 *               |              
 *               |              
 *               |              
 *   +-----------v-------------+
 *   |                         |
 *   |    Data Access Layer    |
 *   |                         |
 *   +-------------------------+
 *
 */
service EzBakeBasePurgeService extends ezbakeBaseService.EzBakeBaseService
{
   /**
    * Start a purge of the given items.  This method will begin purging items
    * that match the given set of IDs and will call back to the
    * purgeCallbackService when the purge has completed. The return of this
    * function without exception indicates that the application has taken
    * responsibility of purging documents matching purgeIds from its data sets.
    * It does not indicate completion of the purge.
    *
    * Returns the state of the new purge request.
    *
    * @param purgeCallbackService ezDiscovery path of the purge service to
    *        call back to.
    * @param purgeId Unique id to use for this purge request. Will be the string
    *        representation of an i64 number in the case of a true purge, or be
    *        prefaced with “AgeOff_<rule#>_<timestamp>” in the case that this
    *        purge is occurring due to age-off processing. The implementing
    *        application typically should not care and should not take any
    *        action based on that fact.
    *
    * @param idsToPurge set<i64> containing all the items to purge. This should
    *        be sent to the data access layer to perform the purge. 
    * @param initiatorToken Security token for the service or user that
    *        initiated the purge.
    */
   PurgeState beginPurge(1: string purgeCallbackService,
                   2: required i64 purgeId,
                   3: set<i64> idsToPurge,
                   4: ezbakeBaseTypes.EzSecurityToken initiatorToken
   ) throws (1: PurgeException e,
             2: ezbakeBaseTypes.EzSecurityTokenException tokenException);

   PurgeState beginVirusPurge(1: string purgeCallbackService,
                      2: required i64 purgeId,
                      3: set<i64> idsToPurge,
                      4: ezbakeBaseTypes.EzSecurityToken initiatorToken
      ) throws (1: PurgeException e,
                2: ezbakeBaseTypes.EzSecurityTokenException tokenException);

   /**
    * Returns the state of a given purge request.
    *
    * @param purgeId Unique id to use for this purge request
    * @returns Status of the given purge, UNKNOWN_ID if it was not found
    */
   PurgeState purgeStatus(1: required ezbakeBaseTypes.EzSecurityToken token,
                          2: required i64 purgeId)
                       throws
                          (1: ezbakeBaseTypes.EzSecurityTokenException tokenException);
   /**
     * Request cancelling a purge that is currently running. In order to attempt
     * to not leave the application in an unstable state the application may not
     * be able to cancelt the purge.
     *
     * @param token Security token for the service or user that requested the cancel.
     * @param purgeId Unique id for the purge to cancel
     *
     * @returns CancelStatus the enum for the current state of the cancel.
    **/

   PurgeState cancelPurge(1: required ezbakeBaseTypes.EzSecurityToken token,
                            2: required i64 purgeId)
                       throws
                          (1: ezbakeBaseTypes.EzSecurityTokenException tokenException);
}
