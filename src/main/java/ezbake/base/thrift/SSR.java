/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.base.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Standard Search Result. This object encapsulates a search result for a particular object that has been ingested
 * and disseminated into ezbake. Each field represents a piece of metadata about the ingested object. It also provides
 * faceting ability at query time.
 */
public class SSR implements org.apache.thrift.TBase<SSR, SSR._Fields>, java.io.Serializable, Cloneable, Comparable<SSR> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SSR");

  private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("visibility", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SNIPPET_FIELD_DESC = new org.apache.thrift.protocol.TField("snippet", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RESULT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultDate", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField COORDINATE_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinate", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField PREVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("preview", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField META_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metaData", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SSRStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SSRTupleSchemeFactory());
  }

  /**
   * The warehouse URI that correlates with this SSR object. The URI will point back to the original raw and parsed
   * object in the warehouse.
   */
  public String uri; // required
  /**
   * The visibility of the SSR object and it's corresponding original document.
   */
  public ezbake.base.thrift.Visibility visibility; // required
  /**
   * The title of this search result. This would typically be the title of the incoming document to which this SSR
   * corresponds.
   */
  public String title; // optional
  /**
   * A snippet from the incoming document (if applicable). A typical case for including a snippet would be if the
   * corresponding document has a summary.
   */
  public String snippet; // optional
  /**
   * The date corresponding to the incoming document. This may be an event date from the document, or potentially a
   * document creation date. This field is flexible and should be set to the most useful value for the end user.
   */
  public DateTime resultDate; // optional
  /**
   * A geospatial coordinate that corresponds to the incoming document. This is only applicable in certain situations,
   * but may provide the end user with extra context and search/faceting ability.
   */
  public Coordinate coordinate; // optional
  /**
   * A binary preview of the document. This field pertains to a thumbnail or other binary representation of the incoming
   * document/object.
   */
  public Preview preview; // optional
  /**
   * Enterprise metadata containing data that pipelines tag a document with. This would be
   * additional pieces of information about the data that users can later search on.
   */
  public EnterpriseMetaData metaData; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The warehouse URI that correlates with this SSR object. The URI will point back to the original raw and parsed
     * object in the warehouse.
     */
    URI((short)1, "uri"),
    /**
     * The visibility of the SSR object and it's corresponding original document.
     */
    VISIBILITY((short)2, "visibility"),
    /**
     * The title of this search result. This would typically be the title of the incoming document to which this SSR
     * corresponds.
     */
    TITLE((short)3, "title"),
    /**
     * A snippet from the incoming document (if applicable). A typical case for including a snippet would be if the
     * corresponding document has a summary.
     */
    SNIPPET((short)4, "snippet"),
    /**
     * The date corresponding to the incoming document. This may be an event date from the document, or potentially a
     * document creation date. This field is flexible and should be set to the most useful value for the end user.
     */
    RESULT_DATE((short)5, "resultDate"),
    /**
     * A geospatial coordinate that corresponds to the incoming document. This is only applicable in certain situations,
     * but may provide the end user with extra context and search/faceting ability.
     */
    COORDINATE((short)6, "coordinate"),
    /**
     * A binary preview of the document. This field pertains to a thumbnail or other binary representation of the incoming
     * document/object.
     */
    PREVIEW((short)7, "preview"),
    /**
     * Enterprise metadata containing data that pipelines tag a document with. This would be
     * additional pieces of information about the data that users can later search on.
     */
    META_DATA((short)8, "metaData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URI
          return URI;
        case 2: // VISIBILITY
          return VISIBILITY;
        case 3: // TITLE
          return TITLE;
        case 4: // SNIPPET
          return SNIPPET;
        case 5: // RESULT_DATE
          return RESULT_DATE;
        case 6: // COORDINATE
          return COORDINATE;
        case 7: // PREVIEW
          return PREVIEW;
        case 8: // META_DATA
          return META_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.TITLE,_Fields.SNIPPET,_Fields.RESULT_DATE,_Fields.COORDINATE,_Fields.PREVIEW,_Fields.META_DATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("visibility", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.Visibility.class)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SNIPPET, new org.apache.thrift.meta_data.FieldMetaData("snippet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_DATE, new org.apache.thrift.meta_data.FieldMetaData("resultDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DateTime.class)));
    tmpMap.put(_Fields.COORDINATE, new org.apache.thrift.meta_data.FieldMetaData("coordinate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Coordinate.class)));
    tmpMap.put(_Fields.PREVIEW, new org.apache.thrift.meta_data.FieldMetaData("preview", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Preview.class)));
    tmpMap.put(_Fields.META_DATA, new org.apache.thrift.meta_data.FieldMetaData("metaData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EnterpriseMetaData.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SSR.class, metaDataMap);
  }

  public SSR() {
  }

  public SSR(
    String uri,
    ezbake.base.thrift.Visibility visibility)
  {
    this();
    this.uri = uri;
    this.visibility = visibility;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SSR(SSR other) {
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    if (other.isSetVisibility()) {
      this.visibility = new ezbake.base.thrift.Visibility(other.visibility);
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetSnippet()) {
      this.snippet = other.snippet;
    }
    if (other.isSetResultDate()) {
      this.resultDate = new DateTime(other.resultDate);
    }
    if (other.isSetCoordinate()) {
      this.coordinate = new Coordinate(other.coordinate);
    }
    if (other.isSetPreview()) {
      this.preview = new Preview(other.preview);
    }
    if (other.isSetMetaData()) {
      this.metaData = new EnterpriseMetaData(other.metaData);
    }
  }

  public SSR deepCopy() {
    return new SSR(this);
  }

  @Override
  public void clear() {
    this.uri = null;
    this.visibility = null;
    this.title = null;
    this.snippet = null;
    this.resultDate = null;
    this.coordinate = null;
    this.preview = null;
    this.metaData = null;
  }

  /**
   * The warehouse URI that correlates with this SSR object. The URI will point back to the original raw and parsed
   * object in the warehouse.
   */
  public String getUri() {
    return this.uri;
  }

  /**
   * The warehouse URI that correlates with this SSR object. The URI will point back to the original raw and parsed
   * object in the warehouse.
   */
  public SSR setUri(String uri) {
    this.uri = uri;
    return this;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  /**
   * The visibility of the SSR object and it's corresponding original document.
   */
  public ezbake.base.thrift.Visibility getVisibility() {
    return this.visibility;
  }

  /**
   * The visibility of the SSR object and it's corresponding original document.
   */
  public SSR setVisibility(ezbake.base.thrift.Visibility visibility) {
    this.visibility = visibility;
    return this;
  }

  public void unsetVisibility() {
    this.visibility = null;
  }

  /** Returns true if field visibility is set (has been assigned a value) and false otherwise */
  public boolean isSetVisibility() {
    return this.visibility != null;
  }

  public void setVisibilityIsSet(boolean value) {
    if (!value) {
      this.visibility = null;
    }
  }

  /**
   * The title of this search result. This would typically be the title of the incoming document to which this SSR
   * corresponds.
   */
  public String getTitle() {
    return this.title;
  }

  /**
   * The title of this search result. This would typically be the title of the incoming document to which this SSR
   * corresponds.
   */
  public SSR setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  /**
   * A snippet from the incoming document (if applicable). A typical case for including a snippet would be if the
   * corresponding document has a summary.
   */
  public String getSnippet() {
    return this.snippet;
  }

  /**
   * A snippet from the incoming document (if applicable). A typical case for including a snippet would be if the
   * corresponding document has a summary.
   */
  public SSR setSnippet(String snippet) {
    this.snippet = snippet;
    return this;
  }

  public void unsetSnippet() {
    this.snippet = null;
  }

  /** Returns true if field snippet is set (has been assigned a value) and false otherwise */
  public boolean isSetSnippet() {
    return this.snippet != null;
  }

  public void setSnippetIsSet(boolean value) {
    if (!value) {
      this.snippet = null;
    }
  }

  /**
   * The date corresponding to the incoming document. This may be an event date from the document, or potentially a
   * document creation date. This field is flexible and should be set to the most useful value for the end user.
   */
  public DateTime getResultDate() {
    return this.resultDate;
  }

  /**
   * The date corresponding to the incoming document. This may be an event date from the document, or potentially a
   * document creation date. This field is flexible and should be set to the most useful value for the end user.
   */
  public SSR setResultDate(DateTime resultDate) {
    this.resultDate = resultDate;
    return this;
  }

  public void unsetResultDate() {
    this.resultDate = null;
  }

  /** Returns true if field resultDate is set (has been assigned a value) and false otherwise */
  public boolean isSetResultDate() {
    return this.resultDate != null;
  }

  public void setResultDateIsSet(boolean value) {
    if (!value) {
      this.resultDate = null;
    }
  }

  /**
   * A geospatial coordinate that corresponds to the incoming document. This is only applicable in certain situations,
   * but may provide the end user with extra context and search/faceting ability.
   */
  public Coordinate getCoordinate() {
    return this.coordinate;
  }

  /**
   * A geospatial coordinate that corresponds to the incoming document. This is only applicable in certain situations,
   * but may provide the end user with extra context and search/faceting ability.
   */
  public SSR setCoordinate(Coordinate coordinate) {
    this.coordinate = coordinate;
    return this;
  }

  public void unsetCoordinate() {
    this.coordinate = null;
  }

  /** Returns true if field coordinate is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinate() {
    return this.coordinate != null;
  }

  public void setCoordinateIsSet(boolean value) {
    if (!value) {
      this.coordinate = null;
    }
  }

  /**
   * A binary preview of the document. This field pertains to a thumbnail or other binary representation of the incoming
   * document/object.
   */
  public Preview getPreview() {
    return this.preview;
  }

  /**
   * A binary preview of the document. This field pertains to a thumbnail or other binary representation of the incoming
   * document/object.
   */
  public SSR setPreview(Preview preview) {
    this.preview = preview;
    return this;
  }

  public void unsetPreview() {
    this.preview = null;
  }

  /** Returns true if field preview is set (has been assigned a value) and false otherwise */
  public boolean isSetPreview() {
    return this.preview != null;
  }

  public void setPreviewIsSet(boolean value) {
    if (!value) {
      this.preview = null;
    }
  }

  /**
   * Enterprise metadata containing data that pipelines tag a document with. This would be
   * additional pieces of information about the data that users can later search on.
   */
  public EnterpriseMetaData getMetaData() {
    return this.metaData;
  }

  /**
   * Enterprise metadata containing data that pipelines tag a document with. This would be
   * additional pieces of information about the data that users can later search on.
   */
  public SSR setMetaData(EnterpriseMetaData metaData) {
    this.metaData = metaData;
    return this;
  }

  public void unsetMetaData() {
    this.metaData = null;
  }

  /** Returns true if field metaData is set (has been assigned a value) and false otherwise */
  public boolean isSetMetaData() {
    return this.metaData != null;
  }

  public void setMetaDataIsSet(boolean value) {
    if (!value) {
      this.metaData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((String)value);
      }
      break;

    case VISIBILITY:
      if (value == null) {
        unsetVisibility();
      } else {
        setVisibility((ezbake.base.thrift.Visibility)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case SNIPPET:
      if (value == null) {
        unsetSnippet();
      } else {
        setSnippet((String)value);
      }
      break;

    case RESULT_DATE:
      if (value == null) {
        unsetResultDate();
      } else {
        setResultDate((DateTime)value);
      }
      break;

    case COORDINATE:
      if (value == null) {
        unsetCoordinate();
      } else {
        setCoordinate((Coordinate)value);
      }
      break;

    case PREVIEW:
      if (value == null) {
        unsetPreview();
      } else {
        setPreview((Preview)value);
      }
      break;

    case META_DATA:
      if (value == null) {
        unsetMetaData();
      } else {
        setMetaData((EnterpriseMetaData)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case URI:
      return getUri();

    case VISIBILITY:
      return getVisibility();

    case TITLE:
      return getTitle();

    case SNIPPET:
      return getSnippet();

    case RESULT_DATE:
      return getResultDate();

    case COORDINATE:
      return getCoordinate();

    case PREVIEW:
      return getPreview();

    case META_DATA:
      return getMetaData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case URI:
      return isSetUri();
    case VISIBILITY:
      return isSetVisibility();
    case TITLE:
      return isSetTitle();
    case SNIPPET:
      return isSetSnippet();
    case RESULT_DATE:
      return isSetResultDate();
    case COORDINATE:
      return isSetCoordinate();
    case PREVIEW:
      return isSetPreview();
    case META_DATA:
      return isSetMetaData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SSR)
      return this.equals((SSR)that);
    return false;
  }

  public boolean equals(SSR that) {
    if (that == null)
      return false;

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_visibility = true && this.isSetVisibility();
    boolean that_present_visibility = true && that.isSetVisibility();
    if (this_present_visibility || that_present_visibility) {
      if (!(this_present_visibility && that_present_visibility))
        return false;
      if (!this.visibility.equals(that.visibility))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_snippet = true && this.isSetSnippet();
    boolean that_present_snippet = true && that.isSetSnippet();
    if (this_present_snippet || that_present_snippet) {
      if (!(this_present_snippet && that_present_snippet))
        return false;
      if (!this.snippet.equals(that.snippet))
        return false;
    }

    boolean this_present_resultDate = true && this.isSetResultDate();
    boolean that_present_resultDate = true && that.isSetResultDate();
    if (this_present_resultDate || that_present_resultDate) {
      if (!(this_present_resultDate && that_present_resultDate))
        return false;
      if (!this.resultDate.equals(that.resultDate))
        return false;
    }

    boolean this_present_coordinate = true && this.isSetCoordinate();
    boolean that_present_coordinate = true && that.isSetCoordinate();
    if (this_present_coordinate || that_present_coordinate) {
      if (!(this_present_coordinate && that_present_coordinate))
        return false;
      if (!this.coordinate.equals(that.coordinate))
        return false;
    }

    boolean this_present_preview = true && this.isSetPreview();
    boolean that_present_preview = true && that.isSetPreview();
    if (this_present_preview || that_present_preview) {
      if (!(this_present_preview && that_present_preview))
        return false;
      if (!this.preview.equals(that.preview))
        return false;
    }

    boolean this_present_metaData = true && this.isSetMetaData();
    boolean that_present_metaData = true && that.isSetMetaData();
    if (this_present_metaData || that_present_metaData) {
      if (!(this_present_metaData && that_present_metaData))
        return false;
      if (!this.metaData.equals(that.metaData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SSR other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisibility()).compareTo(other.isSetVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibility, other.visibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnippet()).compareTo(other.isSetSnippet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnippet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snippet, other.snippet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultDate()).compareTo(other.isSetResultDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultDate, other.resultDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoordinate()).compareTo(other.isSetCoordinate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinate, other.coordinate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreview()).compareTo(other.isSetPreview());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreview()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preview, other.preview);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetaData()).compareTo(other.isSetMetaData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetaData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaData, other.metaData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SSR(");
    boolean first = true;

    sb.append("uri:");
    if (this.uri == null) {
      sb.append("null");
    } else {
      sb.append(this.uri);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("visibility:");
    if (this.visibility == null) {
      sb.append("null");
    } else {
      sb.append(this.visibility);
    }
    first = false;
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetSnippet()) {
      if (!first) sb.append(", ");
      sb.append("snippet:");
      if (this.snippet == null) {
        sb.append("null");
      } else {
        sb.append(this.snippet);
      }
      first = false;
    }
    if (isSetResultDate()) {
      if (!first) sb.append(", ");
      sb.append("resultDate:");
      if (this.resultDate == null) {
        sb.append("null");
      } else {
        sb.append(this.resultDate);
      }
      first = false;
    }
    if (isSetCoordinate()) {
      if (!first) sb.append(", ");
      sb.append("coordinate:");
      if (this.coordinate == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinate);
      }
      first = false;
    }
    if (isSetPreview()) {
      if (!first) sb.append(", ");
      sb.append("preview:");
      if (this.preview == null) {
        sb.append("null");
      } else {
        sb.append(this.preview);
      }
      first = false;
    }
    if (isSetMetaData()) {
      if (!first) sb.append(", ");
      sb.append("metaData:");
      if (this.metaData == null) {
        sb.append("null");
      } else {
        sb.append(this.metaData);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uri == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uri' was not present! Struct: " + toString());
    }
    if (visibility == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'visibility' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (visibility != null) {
      visibility.validate();
    }
    if (resultDate != null) {
      resultDate.validate();
    }
    if (coordinate != null) {
      coordinate.validate();
    }
    if (preview != null) {
      preview.validate();
    }
    if (metaData != null) {
      metaData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SSRStandardSchemeFactory implements SchemeFactory {
    public SSRStandardScheme getScheme() {
      return new SSRStandardScheme();
    }
  }

  private static class SSRStandardScheme extends StandardScheme<SSR> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SSR struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uri = iprot.readString();
              struct.setUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VISIBILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.visibility = new ezbake.base.thrift.Visibility();
              struct.visibility.read(iprot);
              struct.setVisibilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SNIPPET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snippet = iprot.readString();
              struct.setSnippetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESULT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resultDate = new DateTime();
              struct.resultDate.read(iprot);
              struct.setResultDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COORDINATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.coordinate = new Coordinate();
              struct.coordinate.read(iprot);
              struct.setCoordinateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PREVIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.preview = new Preview();
              struct.preview.read(iprot);
              struct.setPreviewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // META_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metaData = new EnterpriseMetaData();
              struct.metaData.read(iprot);
              struct.setMetaDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SSR struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uri != null) {
        oprot.writeFieldBegin(URI_FIELD_DESC);
        oprot.writeString(struct.uri);
        oprot.writeFieldEnd();
      }
      if (struct.visibility != null) {
        oprot.writeFieldBegin(VISIBILITY_FIELD_DESC);
        struct.visibility.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.snippet != null) {
        if (struct.isSetSnippet()) {
          oprot.writeFieldBegin(SNIPPET_FIELD_DESC);
          oprot.writeString(struct.snippet);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resultDate != null) {
        if (struct.isSetResultDate()) {
          oprot.writeFieldBegin(RESULT_DATE_FIELD_DESC);
          struct.resultDate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coordinate != null) {
        if (struct.isSetCoordinate()) {
          oprot.writeFieldBegin(COORDINATE_FIELD_DESC);
          struct.coordinate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.preview != null) {
        if (struct.isSetPreview()) {
          oprot.writeFieldBegin(PREVIEW_FIELD_DESC);
          struct.preview.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.metaData != null) {
        if (struct.isSetMetaData()) {
          oprot.writeFieldBegin(META_DATA_FIELD_DESC);
          struct.metaData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SSRTupleSchemeFactory implements SchemeFactory {
    public SSRTupleScheme getScheme() {
      return new SSRTupleScheme();
    }
  }

  private static class SSRTupleScheme extends TupleScheme<SSR> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SSR struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uri);
      struct.visibility.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetTitle()) {
        optionals.set(0);
      }
      if (struct.isSetSnippet()) {
        optionals.set(1);
      }
      if (struct.isSetResultDate()) {
        optionals.set(2);
      }
      if (struct.isSetCoordinate()) {
        optionals.set(3);
      }
      if (struct.isSetPreview()) {
        optionals.set(4);
      }
      if (struct.isSetMetaData()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetSnippet()) {
        oprot.writeString(struct.snippet);
      }
      if (struct.isSetResultDate()) {
        struct.resultDate.write(oprot);
      }
      if (struct.isSetCoordinate()) {
        struct.coordinate.write(oprot);
      }
      if (struct.isSetPreview()) {
        struct.preview.write(oprot);
      }
      if (struct.isSetMetaData()) {
        struct.metaData.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SSR struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uri = iprot.readString();
      struct.setUriIsSet(true);
      struct.visibility = new ezbake.base.thrift.Visibility();
      struct.visibility.read(iprot);
      struct.setVisibilityIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.snippet = iprot.readString();
        struct.setSnippetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.resultDate = new DateTime();
        struct.resultDate.read(iprot);
        struct.setResultDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.coordinate = new Coordinate();
        struct.coordinate.read(iprot);
        struct.setCoordinateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.preview = new Preview();
        struct.preview.read(iprot);
        struct.setPreviewIsSet(true);
      }
      if (incoming.get(5)) {
        struct.metaData = new EnterpriseMetaData();
        struct.metaData.read(iprot);
        struct.setMetaDataIsSet(true);
      }
    }
  }

}

