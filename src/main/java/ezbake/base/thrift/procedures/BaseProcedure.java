/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.base.thrift.procedures;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BaseProcedure {

  public interface Iface extends ezbake.base.thrift.EzBakeBaseService.Iface {

    public ezbake.base.thrift.SSR getStandardSearchResultForURI(String uri, ezbake.base.thrift.EzSecurityToken userToken) throws org.apache.thrift.TException;

    public ezbake.base.thrift.SSR getStandardSearchResultForURIs(List<String> uris, ezbake.base.thrift.EzSecurityToken userToken) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends ezbake.base.thrift.EzBakeBaseService .AsyncIface {

    public void getStandardSearchResultForURI(String uri, ezbake.base.thrift.EzSecurityToken userToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStandardSearchResultForURIs(List<String> uris, ezbake.base.thrift.EzSecurityToken userToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ezbake.base.thrift.EzBakeBaseService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ezbake.base.thrift.SSR getStandardSearchResultForURI(String uri, ezbake.base.thrift.EzSecurityToken userToken) throws org.apache.thrift.TException
    {
      send_getStandardSearchResultForURI(uri, userToken);
      return recv_getStandardSearchResultForURI();
    }

    public void send_getStandardSearchResultForURI(String uri, ezbake.base.thrift.EzSecurityToken userToken) throws org.apache.thrift.TException
    {
      getStandardSearchResultForURI_args args = new getStandardSearchResultForURI_args();
      args.setUri(uri);
      args.setUserToken(userToken);
      sendBase("getStandardSearchResultForURI", args);
    }

    public ezbake.base.thrift.SSR recv_getStandardSearchResultForURI() throws org.apache.thrift.TException
    {
      getStandardSearchResultForURI_result result = new getStandardSearchResultForURI_result();
      receiveBase(result, "getStandardSearchResultForURI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStandardSearchResultForURI failed: unknown result");
    }

    public ezbake.base.thrift.SSR getStandardSearchResultForURIs(List<String> uris, ezbake.base.thrift.EzSecurityToken userToken) throws org.apache.thrift.TException
    {
      send_getStandardSearchResultForURIs(uris, userToken);
      return recv_getStandardSearchResultForURIs();
    }

    public void send_getStandardSearchResultForURIs(List<String> uris, ezbake.base.thrift.EzSecurityToken userToken) throws org.apache.thrift.TException
    {
      getStandardSearchResultForURIs_args args = new getStandardSearchResultForURIs_args();
      args.setUris(uris);
      args.setUserToken(userToken);
      sendBase("getStandardSearchResultForURIs", args);
    }

    public ezbake.base.thrift.SSR recv_getStandardSearchResultForURIs() throws org.apache.thrift.TException
    {
      getStandardSearchResultForURIs_result result = new getStandardSearchResultForURIs_result();
      receiveBase(result, "getStandardSearchResultForURIs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStandardSearchResultForURIs failed: unknown result");
    }

  }
  public static class AsyncClient extends ezbake.base.thrift.EzBakeBaseService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getStandardSearchResultForURI(String uri, ezbake.base.thrift.EzSecurityToken userToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStandardSearchResultForURI_call method_call = new getStandardSearchResultForURI_call(uri, userToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStandardSearchResultForURI_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uri;
      private ezbake.base.thrift.EzSecurityToken userToken;
      public getStandardSearchResultForURI_call(String uri, ezbake.base.thrift.EzSecurityToken userToken, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uri = uri;
        this.userToken = userToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStandardSearchResultForURI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStandardSearchResultForURI_args args = new getStandardSearchResultForURI_args();
        args.setUri(uri);
        args.setUserToken(userToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.base.thrift.SSR getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStandardSearchResultForURI();
      }
    }

    public void getStandardSearchResultForURIs(List<String> uris, ezbake.base.thrift.EzSecurityToken userToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStandardSearchResultForURIs_call method_call = new getStandardSearchResultForURIs_call(uris, userToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStandardSearchResultForURIs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> uris;
      private ezbake.base.thrift.EzSecurityToken userToken;
      public getStandardSearchResultForURIs_call(List<String> uris, ezbake.base.thrift.EzSecurityToken userToken, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uris = uris;
        this.userToken = userToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStandardSearchResultForURIs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStandardSearchResultForURIs_args args = new getStandardSearchResultForURIs_args();
        args.setUris(uris);
        args.setUserToken(userToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.base.thrift.SSR getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStandardSearchResultForURIs();
      }
    }

  }

  public static class Processor<I extends Iface> extends ezbake.base.thrift.EzBakeBaseService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getStandardSearchResultForURI", new getStandardSearchResultForURI());
      processMap.put("getStandardSearchResultForURIs", new getStandardSearchResultForURIs());
      return processMap;
    }

    public static class getStandardSearchResultForURI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStandardSearchResultForURI_args> {
      public getStandardSearchResultForURI() {
        super("getStandardSearchResultForURI");
      }

      public getStandardSearchResultForURI_args getEmptyArgsInstance() {
        return new getStandardSearchResultForURI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStandardSearchResultForURI_result getResult(I iface, getStandardSearchResultForURI_args args) throws org.apache.thrift.TException {
        getStandardSearchResultForURI_result result = new getStandardSearchResultForURI_result();
        result.success = iface.getStandardSearchResultForURI(args.uri, args.userToken);
        return result;
      }
    }

    public static class getStandardSearchResultForURIs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStandardSearchResultForURIs_args> {
      public getStandardSearchResultForURIs() {
        super("getStandardSearchResultForURIs");
      }

      public getStandardSearchResultForURIs_args getEmptyArgsInstance() {
        return new getStandardSearchResultForURIs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStandardSearchResultForURIs_result getResult(I iface, getStandardSearchResultForURIs_args args) throws org.apache.thrift.TException {
        getStandardSearchResultForURIs_result result = new getStandardSearchResultForURIs_result();
        result.success = iface.getStandardSearchResultForURIs(args.uris, args.userToken);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends ezbake.base.thrift.EzBakeBaseService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getStandardSearchResultForURI", new getStandardSearchResultForURI());
      processMap.put("getStandardSearchResultForURIs", new getStandardSearchResultForURIs());
      return processMap;
    }

    public static class getStandardSearchResultForURI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStandardSearchResultForURI_args, ezbake.base.thrift.SSR> {
      public getStandardSearchResultForURI() {
        super("getStandardSearchResultForURI");
      }

      public getStandardSearchResultForURI_args getEmptyArgsInstance() {
        return new getStandardSearchResultForURI_args();
      }

      public AsyncMethodCallback<ezbake.base.thrift.SSR> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.base.thrift.SSR>() { 
          public void onComplete(ezbake.base.thrift.SSR o) {
            getStandardSearchResultForURI_result result = new getStandardSearchResultForURI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStandardSearchResultForURI_result result = new getStandardSearchResultForURI_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStandardSearchResultForURI_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.base.thrift.SSR> resultHandler) throws TException {
        iface.getStandardSearchResultForURI(args.uri, args.userToken,resultHandler);
      }
    }

    public static class getStandardSearchResultForURIs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStandardSearchResultForURIs_args, ezbake.base.thrift.SSR> {
      public getStandardSearchResultForURIs() {
        super("getStandardSearchResultForURIs");
      }

      public getStandardSearchResultForURIs_args getEmptyArgsInstance() {
        return new getStandardSearchResultForURIs_args();
      }

      public AsyncMethodCallback<ezbake.base.thrift.SSR> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.base.thrift.SSR>() { 
          public void onComplete(ezbake.base.thrift.SSR o) {
            getStandardSearchResultForURIs_result result = new getStandardSearchResultForURIs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStandardSearchResultForURIs_result result = new getStandardSearchResultForURIs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStandardSearchResultForURIs_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.base.thrift.SSR> resultHandler) throws TException {
        iface.getStandardSearchResultForURIs(args.uris, args.userToken,resultHandler);
      }
    }

  }

  public static class getStandardSearchResultForURI_args implements org.apache.thrift.TBase<getStandardSearchResultForURI_args, getStandardSearchResultForURI_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStandardSearchResultForURI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStandardSearchResultForURI_args");

    private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("userToken", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStandardSearchResultForURI_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStandardSearchResultForURI_argsTupleSchemeFactory());
    }

    public String uri; // required
    public ezbake.base.thrift.EzSecurityToken userToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URI((short)1, "uri"),
      USER_TOKEN((short)2, "userToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URI
            return URI;
          case 2: // USER_TOKEN
            return USER_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("userToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStandardSearchResultForURI_args.class, metaDataMap);
    }

    public getStandardSearchResultForURI_args() {
    }

    public getStandardSearchResultForURI_args(
      String uri,
      ezbake.base.thrift.EzSecurityToken userToken)
    {
      this();
      this.uri = uri;
      this.userToken = userToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStandardSearchResultForURI_args(getStandardSearchResultForURI_args other) {
      if (other.isSetUri()) {
        this.uri = other.uri;
      }
      if (other.isSetUserToken()) {
        this.userToken = new ezbake.base.thrift.EzSecurityToken(other.userToken);
      }
    }

    public getStandardSearchResultForURI_args deepCopy() {
      return new getStandardSearchResultForURI_args(this);
    }

    @Override
    public void clear() {
      this.uri = null;
      this.userToken = null;
    }

    public String getUri() {
      return this.uri;
    }

    public getStandardSearchResultForURI_args setUri(String uri) {
      this.uri = uri;
      return this;
    }

    public void unsetUri() {
      this.uri = null;
    }

    /** Returns true if field uri is set (has been assigned a value) and false otherwise */
    public boolean isSetUri() {
      return this.uri != null;
    }

    public void setUriIsSet(boolean value) {
      if (!value) {
        this.uri = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getUserToken() {
      return this.userToken;
    }

    public getStandardSearchResultForURI_args setUserToken(ezbake.base.thrift.EzSecurityToken userToken) {
      this.userToken = userToken;
      return this;
    }

    public void unsetUserToken() {
      this.userToken = null;
    }

    /** Returns true if field userToken is set (has been assigned a value) and false otherwise */
    public boolean isSetUserToken() {
      return this.userToken != null;
    }

    public void setUserTokenIsSet(boolean value) {
      if (!value) {
        this.userToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URI:
        if (value == null) {
          unsetUri();
        } else {
          setUri((String)value);
        }
        break;

      case USER_TOKEN:
        if (value == null) {
          unsetUserToken();
        } else {
          setUserToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URI:
        return getUri();

      case USER_TOKEN:
        return getUserToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URI:
        return isSetUri();
      case USER_TOKEN:
        return isSetUserToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStandardSearchResultForURI_args)
        return this.equals((getStandardSearchResultForURI_args)that);
      return false;
    }

    public boolean equals(getStandardSearchResultForURI_args that) {
      if (that == null)
        return false;

      boolean this_present_uri = true && this.isSetUri();
      boolean that_present_uri = true && that.isSetUri();
      if (this_present_uri || that_present_uri) {
        if (!(this_present_uri && that_present_uri))
          return false;
        if (!this.uri.equals(that.uri))
          return false;
      }

      boolean this_present_userToken = true && this.isSetUserToken();
      boolean that_present_userToken = true && that.isSetUserToken();
      if (this_present_userToken || that_present_userToken) {
        if (!(this_present_userToken && that_present_userToken))
          return false;
        if (!this.userToken.equals(that.userToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStandardSearchResultForURI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserToken()).compareTo(other.isSetUserToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userToken, other.userToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStandardSearchResultForURI_args(");
      boolean first = true;

      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userToken:");
      if (this.userToken == null) {
        sb.append("null");
      } else {
        sb.append(this.userToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userToken != null) {
        userToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStandardSearchResultForURI_argsStandardSchemeFactory implements SchemeFactory {
      public getStandardSearchResultForURI_argsStandardScheme getScheme() {
        return new getStandardSearchResultForURI_argsStandardScheme();
      }
    }

    private static class getStandardSearchResultForURI_argsStandardScheme extends StandardScheme<getStandardSearchResultForURI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStandardSearchResultForURI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uri = iprot.readString();
                struct.setUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userToken = new ezbake.base.thrift.EzSecurityToken();
                struct.userToken.read(iprot);
                struct.setUserTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStandardSearchResultForURI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uri != null) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          oprot.writeString(struct.uri);
          oprot.writeFieldEnd();
        }
        if (struct.userToken != null) {
          oprot.writeFieldBegin(USER_TOKEN_FIELD_DESC);
          struct.userToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStandardSearchResultForURI_argsTupleSchemeFactory implements SchemeFactory {
      public getStandardSearchResultForURI_argsTupleScheme getScheme() {
        return new getStandardSearchResultForURI_argsTupleScheme();
      }
    }

    private static class getStandardSearchResultForURI_argsTupleScheme extends TupleScheme<getStandardSearchResultForURI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStandardSearchResultForURI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUri()) {
          optionals.set(0);
        }
        if (struct.isSetUserToken()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUri()) {
          oprot.writeString(struct.uri);
        }
        if (struct.isSetUserToken()) {
          struct.userToken.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStandardSearchResultForURI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uri = iprot.readString();
          struct.setUriIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userToken = new ezbake.base.thrift.EzSecurityToken();
          struct.userToken.read(iprot);
          struct.setUserTokenIsSet(true);
        }
      }
    }

  }

  public static class getStandardSearchResultForURI_result implements org.apache.thrift.TBase<getStandardSearchResultForURI_result, getStandardSearchResultForURI_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStandardSearchResultForURI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStandardSearchResultForURI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStandardSearchResultForURI_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStandardSearchResultForURI_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.SSR success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.SSR.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStandardSearchResultForURI_result.class, metaDataMap);
    }

    public getStandardSearchResultForURI_result() {
    }

    public getStandardSearchResultForURI_result(
      ezbake.base.thrift.SSR success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStandardSearchResultForURI_result(getStandardSearchResultForURI_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.base.thrift.SSR(other.success);
      }
    }

    public getStandardSearchResultForURI_result deepCopy() {
      return new getStandardSearchResultForURI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ezbake.base.thrift.SSR getSuccess() {
      return this.success;
    }

    public getStandardSearchResultForURI_result setSuccess(ezbake.base.thrift.SSR success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.base.thrift.SSR)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStandardSearchResultForURI_result)
        return this.equals((getStandardSearchResultForURI_result)that);
      return false;
    }

    public boolean equals(getStandardSearchResultForURI_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStandardSearchResultForURI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStandardSearchResultForURI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStandardSearchResultForURI_resultStandardSchemeFactory implements SchemeFactory {
      public getStandardSearchResultForURI_resultStandardScheme getScheme() {
        return new getStandardSearchResultForURI_resultStandardScheme();
      }
    }

    private static class getStandardSearchResultForURI_resultStandardScheme extends StandardScheme<getStandardSearchResultForURI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStandardSearchResultForURI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.base.thrift.SSR();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStandardSearchResultForURI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStandardSearchResultForURI_resultTupleSchemeFactory implements SchemeFactory {
      public getStandardSearchResultForURI_resultTupleScheme getScheme() {
        return new getStandardSearchResultForURI_resultTupleScheme();
      }
    }

    private static class getStandardSearchResultForURI_resultTupleScheme extends TupleScheme<getStandardSearchResultForURI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStandardSearchResultForURI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStandardSearchResultForURI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ezbake.base.thrift.SSR();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStandardSearchResultForURIs_args implements org.apache.thrift.TBase<getStandardSearchResultForURIs_args, getStandardSearchResultForURIs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStandardSearchResultForURIs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStandardSearchResultForURIs_args");

    private static final org.apache.thrift.protocol.TField URIS_FIELD_DESC = new org.apache.thrift.protocol.TField("uris", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("userToken", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStandardSearchResultForURIs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStandardSearchResultForURIs_argsTupleSchemeFactory());
    }

    public List<String> uris; // required
    public ezbake.base.thrift.EzSecurityToken userToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URIS((short)1, "uris"),
      USER_TOKEN((short)2, "userToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URIS
            return URIS;
          case 2: // USER_TOKEN
            return USER_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URIS, new org.apache.thrift.meta_data.FieldMetaData("uris", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.USER_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("userToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStandardSearchResultForURIs_args.class, metaDataMap);
    }

    public getStandardSearchResultForURIs_args() {
    }

    public getStandardSearchResultForURIs_args(
      List<String> uris,
      ezbake.base.thrift.EzSecurityToken userToken)
    {
      this();
      this.uris = uris;
      this.userToken = userToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStandardSearchResultForURIs_args(getStandardSearchResultForURIs_args other) {
      if (other.isSetUris()) {
        List<String> __this__uris = new ArrayList<String>(other.uris);
        this.uris = __this__uris;
      }
      if (other.isSetUserToken()) {
        this.userToken = new ezbake.base.thrift.EzSecurityToken(other.userToken);
      }
    }

    public getStandardSearchResultForURIs_args deepCopy() {
      return new getStandardSearchResultForURIs_args(this);
    }

    @Override
    public void clear() {
      this.uris = null;
      this.userToken = null;
    }

    public int getUrisSize() {
      return (this.uris == null) ? 0 : this.uris.size();
    }

    public java.util.Iterator<String> getUrisIterator() {
      return (this.uris == null) ? null : this.uris.iterator();
    }

    public void addToUris(String elem) {
      if (this.uris == null) {
        this.uris = new ArrayList<String>();
      }
      this.uris.add(elem);
    }

    public List<String> getUris() {
      return this.uris;
    }

    public getStandardSearchResultForURIs_args setUris(List<String> uris) {
      this.uris = uris;
      return this;
    }

    public void unsetUris() {
      this.uris = null;
    }

    /** Returns true if field uris is set (has been assigned a value) and false otherwise */
    public boolean isSetUris() {
      return this.uris != null;
    }

    public void setUrisIsSet(boolean value) {
      if (!value) {
        this.uris = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getUserToken() {
      return this.userToken;
    }

    public getStandardSearchResultForURIs_args setUserToken(ezbake.base.thrift.EzSecurityToken userToken) {
      this.userToken = userToken;
      return this;
    }

    public void unsetUserToken() {
      this.userToken = null;
    }

    /** Returns true if field userToken is set (has been assigned a value) and false otherwise */
    public boolean isSetUserToken() {
      return this.userToken != null;
    }

    public void setUserTokenIsSet(boolean value) {
      if (!value) {
        this.userToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URIS:
        if (value == null) {
          unsetUris();
        } else {
          setUris((List<String>)value);
        }
        break;

      case USER_TOKEN:
        if (value == null) {
          unsetUserToken();
        } else {
          setUserToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URIS:
        return getUris();

      case USER_TOKEN:
        return getUserToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URIS:
        return isSetUris();
      case USER_TOKEN:
        return isSetUserToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStandardSearchResultForURIs_args)
        return this.equals((getStandardSearchResultForURIs_args)that);
      return false;
    }

    public boolean equals(getStandardSearchResultForURIs_args that) {
      if (that == null)
        return false;

      boolean this_present_uris = true && this.isSetUris();
      boolean that_present_uris = true && that.isSetUris();
      if (this_present_uris || that_present_uris) {
        if (!(this_present_uris && that_present_uris))
          return false;
        if (!this.uris.equals(that.uris))
          return false;
      }

      boolean this_present_userToken = true && this.isSetUserToken();
      boolean that_present_userToken = true && that.isSetUserToken();
      if (this_present_userToken || that_present_userToken) {
        if (!(this_present_userToken && that_present_userToken))
          return false;
        if (!this.userToken.equals(that.userToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStandardSearchResultForURIs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUris()).compareTo(other.isSetUris());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUris()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uris, other.uris);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserToken()).compareTo(other.isSetUserToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userToken, other.userToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStandardSearchResultForURIs_args(");
      boolean first = true;

      sb.append("uris:");
      if (this.uris == null) {
        sb.append("null");
      } else {
        sb.append(this.uris);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userToken:");
      if (this.userToken == null) {
        sb.append("null");
      } else {
        sb.append(this.userToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userToken != null) {
        userToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStandardSearchResultForURIs_argsStandardSchemeFactory implements SchemeFactory {
      public getStandardSearchResultForURIs_argsStandardScheme getScheme() {
        return new getStandardSearchResultForURIs_argsStandardScheme();
      }
    }

    private static class getStandardSearchResultForURIs_argsStandardScheme extends StandardScheme<getStandardSearchResultForURIs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStandardSearchResultForURIs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URIS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.uris = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2;
                    _elem2 = iprot.readString();
                    struct.uris.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setUrisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userToken = new ezbake.base.thrift.EzSecurityToken();
                struct.userToken.read(iprot);
                struct.setUserTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStandardSearchResultForURIs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uris != null) {
          oprot.writeFieldBegin(URIS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.uris.size()));
            for (String _iter3 : struct.uris)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.userToken != null) {
          oprot.writeFieldBegin(USER_TOKEN_FIELD_DESC);
          struct.userToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStandardSearchResultForURIs_argsTupleSchemeFactory implements SchemeFactory {
      public getStandardSearchResultForURIs_argsTupleScheme getScheme() {
        return new getStandardSearchResultForURIs_argsTupleScheme();
      }
    }

    private static class getStandardSearchResultForURIs_argsTupleScheme extends TupleScheme<getStandardSearchResultForURIs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStandardSearchResultForURIs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUris()) {
          optionals.set(0);
        }
        if (struct.isSetUserToken()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUris()) {
          {
            oprot.writeI32(struct.uris.size());
            for (String _iter4 : struct.uris)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetUserToken()) {
          struct.userToken.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStandardSearchResultForURIs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.uris = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7;
              _elem7 = iprot.readString();
              struct.uris.add(_elem7);
            }
          }
          struct.setUrisIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userToken = new ezbake.base.thrift.EzSecurityToken();
          struct.userToken.read(iprot);
          struct.setUserTokenIsSet(true);
        }
      }
    }

  }

  public static class getStandardSearchResultForURIs_result implements org.apache.thrift.TBase<getStandardSearchResultForURIs_result, getStandardSearchResultForURIs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStandardSearchResultForURIs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStandardSearchResultForURIs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStandardSearchResultForURIs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStandardSearchResultForURIs_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.SSR success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.SSR.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStandardSearchResultForURIs_result.class, metaDataMap);
    }

    public getStandardSearchResultForURIs_result() {
    }

    public getStandardSearchResultForURIs_result(
      ezbake.base.thrift.SSR success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStandardSearchResultForURIs_result(getStandardSearchResultForURIs_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.base.thrift.SSR(other.success);
      }
    }

    public getStandardSearchResultForURIs_result deepCopy() {
      return new getStandardSearchResultForURIs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ezbake.base.thrift.SSR getSuccess() {
      return this.success;
    }

    public getStandardSearchResultForURIs_result setSuccess(ezbake.base.thrift.SSR success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.base.thrift.SSR)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStandardSearchResultForURIs_result)
        return this.equals((getStandardSearchResultForURIs_result)that);
      return false;
    }

    public boolean equals(getStandardSearchResultForURIs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStandardSearchResultForURIs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStandardSearchResultForURIs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStandardSearchResultForURIs_resultStandardSchemeFactory implements SchemeFactory {
      public getStandardSearchResultForURIs_resultStandardScheme getScheme() {
        return new getStandardSearchResultForURIs_resultStandardScheme();
      }
    }

    private static class getStandardSearchResultForURIs_resultStandardScheme extends StandardScheme<getStandardSearchResultForURIs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStandardSearchResultForURIs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.base.thrift.SSR();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStandardSearchResultForURIs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStandardSearchResultForURIs_resultTupleSchemeFactory implements SchemeFactory {
      public getStandardSearchResultForURIs_resultTupleScheme getScheme() {
        return new getStandardSearchResultForURIs_resultTupleScheme();
      }
    }

    private static class getStandardSearchResultForURIs_resultTupleScheme extends TupleScheme<getStandardSearchResultForURIs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStandardSearchResultForURIs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStandardSearchResultForURIs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ezbake.base.thrift.SSR();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
