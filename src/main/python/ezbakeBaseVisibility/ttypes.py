#   Copyright (C) 2013-2014 Computer Sciences Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class PlatformObjectVisibilities(object):
  """
  Attributes:
   - platformObjectReadVisibility
   - platformObjectDiscoverVisibility
   - platformObjectWriteVisibility
   - platformObjectManageVisibility
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'platformObjectReadVisibility', (TType.I64,None), None, ), # 1
    (2, TType.SET, 'platformObjectDiscoverVisibility', (TType.I64,None), None, ), # 2
    (3, TType.SET, 'platformObjectWriteVisibility', (TType.I64,None), None, ), # 3
    (4, TType.SET, 'platformObjectManageVisibility', (TType.I64,None), None, ), # 4
  )

  def __init__(self, platformObjectReadVisibility=None, platformObjectDiscoverVisibility=None, platformObjectWriteVisibility=None, platformObjectManageVisibility=None,):
    self.platformObjectReadVisibility = platformObjectReadVisibility
    self.platformObjectDiscoverVisibility = platformObjectDiscoverVisibility
    self.platformObjectWriteVisibility = platformObjectWriteVisibility
    self.platformObjectManageVisibility = platformObjectManageVisibility

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.platformObjectReadVisibility = set()
          (_etype3, _size0) = iprot.readSetBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.platformObjectReadVisibility.add(_elem5)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.platformObjectDiscoverVisibility = set()
          (_etype9, _size6) = iprot.readSetBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.platformObjectDiscoverVisibility.add(_elem11)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.platformObjectWriteVisibility = set()
          (_etype15, _size12) = iprot.readSetBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readI64();
            self.platformObjectWriteVisibility.add(_elem17)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.platformObjectManageVisibility = set()
          (_etype21, _size18) = iprot.readSetBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readI64();
            self.platformObjectManageVisibility.add(_elem23)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlatformObjectVisibilities')
    if self.platformObjectReadVisibility is not None:
      oprot.writeFieldBegin('platformObjectReadVisibility', TType.SET, 1)
      oprot.writeSetBegin(TType.I64, len(self.platformObjectReadVisibility))
      for iter24 in self.platformObjectReadVisibility:
        oprot.writeI64(iter24)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.platformObjectDiscoverVisibility is not None:
      oprot.writeFieldBegin('platformObjectDiscoverVisibility', TType.SET, 2)
      oprot.writeSetBegin(TType.I64, len(self.platformObjectDiscoverVisibility))
      for iter25 in self.platformObjectDiscoverVisibility:
        oprot.writeI64(iter25)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.platformObjectWriteVisibility is not None:
      oprot.writeFieldBegin('platformObjectWriteVisibility', TType.SET, 3)
      oprot.writeSetBegin(TType.I64, len(self.platformObjectWriteVisibility))
      for iter26 in self.platformObjectWriteVisibility:
        oprot.writeI64(iter26)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.platformObjectManageVisibility is not None:
      oprot.writeFieldBegin('platformObjectManageVisibility', TType.SET, 4)
      oprot.writeSetBegin(TType.I64, len(self.platformObjectManageVisibility))
      for iter27 in self.platformObjectManageVisibility:
        oprot.writeI64(iter27)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdvancedMarkings(object):
  """
  Attributes:
   - externalCommunityVisibility
   - platformObjectVisibility
   - id
   - composite
   - purgeIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'externalCommunityVisibility', None, None, ), # 1
    (2, TType.STRUCT, 'platformObjectVisibility', (PlatformObjectVisibilities, PlatformObjectVisibilities.thrift_spec), None, ), # 2
    (3, TType.I64, 'id', None, None, ), # 3
    (4, TType.BOOL, 'composite', None, None, ), # 4
    (5, TType.SET, 'purgeIds', (TType.I64,None), None, ), # 5
  )

  def __init__(self, externalCommunityVisibility=None, platformObjectVisibility=None, id=None, composite=None, purgeIds=None,):
    self.externalCommunityVisibility = externalCommunityVisibility
    self.platformObjectVisibility = platformObjectVisibility
    self.id = id
    self.composite = composite
    self.purgeIds = purgeIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.externalCommunityVisibility = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.platformObjectVisibility = PlatformObjectVisibilities()
          self.platformObjectVisibility.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.composite = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.SET:
          self.purgeIds = set()
          (_etype31, _size28) = iprot.readSetBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readI64();
            self.purgeIds.add(_elem33)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdvancedMarkings')
    if self.externalCommunityVisibility is not None:
      oprot.writeFieldBegin('externalCommunityVisibility', TType.STRING, 1)
      oprot.writeString(self.externalCommunityVisibility)
      oprot.writeFieldEnd()
    if self.platformObjectVisibility is not None:
      oprot.writeFieldBegin('platformObjectVisibility', TType.STRUCT, 2)
      self.platformObjectVisibility.write(oprot)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 3)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.composite is not None:
      oprot.writeFieldBegin('composite', TType.BOOL, 4)
      oprot.writeBool(self.composite)
      oprot.writeFieldEnd()
    if self.purgeIds is not None:
      oprot.writeFieldBegin('purgeIds', TType.SET, 5)
      oprot.writeSetBegin(TType.I64, len(self.purgeIds))
      for iter34 in self.purgeIds:
        oprot.writeI64(iter34)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Visibility(object):
  """
  Attributes:
   - formalVisibility
   - advancedMarkings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'formalVisibility', None, None, ), # 1
    (2, TType.STRUCT, 'advancedMarkings', (AdvancedMarkings, AdvancedMarkings.thrift_spec), None, ), # 2
  )

  def __init__(self, formalVisibility=None, advancedMarkings=None,):
    self.formalVisibility = formalVisibility
    self.advancedMarkings = advancedMarkings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.formalVisibility = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.advancedMarkings = AdvancedMarkings()
          self.advancedMarkings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Visibility')
    if self.formalVisibility is not None:
      oprot.writeFieldBegin('formalVisibility', TType.STRING, 1)
      oprot.writeString(self.formalVisibility)
      oprot.writeFieldEnd()
    if self.advancedMarkings is not None:
      oprot.writeFieldBegin('advancedMarkings', TType.STRUCT, 2)
      self.advancedMarkings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
