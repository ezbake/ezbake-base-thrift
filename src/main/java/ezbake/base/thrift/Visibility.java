/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.base.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Visibility implements org.apache.thrift.TBase<Visibility, Visibility._Fields>, java.io.Serializable, Cloneable, Comparable<Visibility> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Visibility");

  private static final org.apache.thrift.protocol.TField FORMAL_VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("formalVisibility", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ADVANCED_MARKINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("advancedMarkings", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VisibilityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VisibilityTupleSchemeFactory());
  }

  public String formalVisibility; // optional
  public AdvancedMarkings advancedMarkings; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FORMAL_VISIBILITY((short)1, "formalVisibility"),
    ADVANCED_MARKINGS((short)2, "advancedMarkings");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FORMAL_VISIBILITY
          return FORMAL_VISIBILITY;
        case 2: // ADVANCED_MARKINGS
          return ADVANCED_MARKINGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.FORMAL_VISIBILITY,_Fields.ADVANCED_MARKINGS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FORMAL_VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("formalVisibility", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADVANCED_MARKINGS, new org.apache.thrift.meta_data.FieldMetaData("advancedMarkings", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdvancedMarkings.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Visibility.class, metaDataMap);
  }

  public Visibility() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Visibility(Visibility other) {
    if (other.isSetFormalVisibility()) {
      this.formalVisibility = other.formalVisibility;
    }
    if (other.isSetAdvancedMarkings()) {
      this.advancedMarkings = new AdvancedMarkings(other.advancedMarkings);
    }
  }

  public Visibility deepCopy() {
    return new Visibility(this);
  }

  @Override
  public void clear() {
    this.formalVisibility = null;
    this.advancedMarkings = null;
  }

  public String getFormalVisibility() {
    return this.formalVisibility;
  }

  public Visibility setFormalVisibility(String formalVisibility) {
    this.formalVisibility = formalVisibility;
    return this;
  }

  public void unsetFormalVisibility() {
    this.formalVisibility = null;
  }

  /** Returns true if field formalVisibility is set (has been assigned a value) and false otherwise */
  public boolean isSetFormalVisibility() {
    return this.formalVisibility != null;
  }

  public void setFormalVisibilityIsSet(boolean value) {
    if (!value) {
      this.formalVisibility = null;
    }
  }

  public AdvancedMarkings getAdvancedMarkings() {
    return this.advancedMarkings;
  }

  public Visibility setAdvancedMarkings(AdvancedMarkings advancedMarkings) {
    this.advancedMarkings = advancedMarkings;
    return this;
  }

  public void unsetAdvancedMarkings() {
    this.advancedMarkings = null;
  }

  /** Returns true if field advancedMarkings is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvancedMarkings() {
    return this.advancedMarkings != null;
  }

  public void setAdvancedMarkingsIsSet(boolean value) {
    if (!value) {
      this.advancedMarkings = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FORMAL_VISIBILITY:
      if (value == null) {
        unsetFormalVisibility();
      } else {
        setFormalVisibility((String)value);
      }
      break;

    case ADVANCED_MARKINGS:
      if (value == null) {
        unsetAdvancedMarkings();
      } else {
        setAdvancedMarkings((AdvancedMarkings)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FORMAL_VISIBILITY:
      return getFormalVisibility();

    case ADVANCED_MARKINGS:
      return getAdvancedMarkings();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FORMAL_VISIBILITY:
      return isSetFormalVisibility();
    case ADVANCED_MARKINGS:
      return isSetAdvancedMarkings();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Visibility)
      return this.equals((Visibility)that);
    return false;
  }

  public boolean equals(Visibility that) {
    if (that == null)
      return false;

    boolean this_present_formalVisibility = true && this.isSetFormalVisibility();
    boolean that_present_formalVisibility = true && that.isSetFormalVisibility();
    if (this_present_formalVisibility || that_present_formalVisibility) {
      if (!(this_present_formalVisibility && that_present_formalVisibility))
        return false;
      if (!this.formalVisibility.equals(that.formalVisibility))
        return false;
    }

    boolean this_present_advancedMarkings = true && this.isSetAdvancedMarkings();
    boolean that_present_advancedMarkings = true && that.isSetAdvancedMarkings();
    if (this_present_advancedMarkings || that_present_advancedMarkings) {
      if (!(this_present_advancedMarkings && that_present_advancedMarkings))
        return false;
      if (!this.advancedMarkings.equals(that.advancedMarkings))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Visibility other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFormalVisibility()).compareTo(other.isSetFormalVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormalVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formalVisibility, other.formalVisibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvancedMarkings()).compareTo(other.isSetAdvancedMarkings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvancedMarkings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advancedMarkings, other.advancedMarkings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Visibility(");
    boolean first = true;

    if (isSetFormalVisibility()) {
      sb.append("formalVisibility:");
      if (this.formalVisibility == null) {
        sb.append("null");
      } else {
        sb.append(this.formalVisibility);
      }
      first = false;
    }
    if (isSetAdvancedMarkings()) {
      if (!first) sb.append(", ");
      sb.append("advancedMarkings:");
      if (this.advancedMarkings == null) {
        sb.append("null");
      } else {
        sb.append(this.advancedMarkings);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (advancedMarkings != null) {
      advancedMarkings.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VisibilityStandardSchemeFactory implements SchemeFactory {
    public VisibilityStandardScheme getScheme() {
      return new VisibilityStandardScheme();
    }
  }

  private static class VisibilityStandardScheme extends StandardScheme<Visibility> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Visibility struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FORMAL_VISIBILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.formalVisibility = iprot.readString();
              struct.setFormalVisibilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADVANCED_MARKINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.advancedMarkings = new AdvancedMarkings();
              struct.advancedMarkings.read(iprot);
              struct.setAdvancedMarkingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Visibility struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.formalVisibility != null) {
        if (struct.isSetFormalVisibility()) {
          oprot.writeFieldBegin(FORMAL_VISIBILITY_FIELD_DESC);
          oprot.writeString(struct.formalVisibility);
          oprot.writeFieldEnd();
        }
      }
      if (struct.advancedMarkings != null) {
        if (struct.isSetAdvancedMarkings()) {
          oprot.writeFieldBegin(ADVANCED_MARKINGS_FIELD_DESC);
          struct.advancedMarkings.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VisibilityTupleSchemeFactory implements SchemeFactory {
    public VisibilityTupleScheme getScheme() {
      return new VisibilityTupleScheme();
    }
  }

  private static class VisibilityTupleScheme extends TupleScheme<Visibility> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Visibility struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFormalVisibility()) {
        optionals.set(0);
      }
      if (struct.isSetAdvancedMarkings()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFormalVisibility()) {
        oprot.writeString(struct.formalVisibility);
      }
      if (struct.isSetAdvancedMarkings()) {
        struct.advancedMarkings.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Visibility struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.formalVisibility = iprot.readString();
        struct.setFormalVisibilityIsSet(true);
      }
      if (incoming.get(1)) {
        struct.advancedMarkings = new AdvancedMarkings();
        struct.advancedMarkings.read(iprot);
        struct.setAdvancedMarkingsIsSet(true);
      }
    }
  }

}

