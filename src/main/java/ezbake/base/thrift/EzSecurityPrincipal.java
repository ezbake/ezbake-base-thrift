/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.base.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EzSecurityPrincipal implements org.apache.thrift.TBase<EzSecurityPrincipal, EzSecurityPrincipal._Fields>, java.io.Serializable, Cloneable, Comparable<EzSecurityPrincipal> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EzSecurityPrincipal");

  private static final org.apache.thrift.protocol.TField PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("principal", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ISSUER_FIELD_DESC = new org.apache.thrift.protocol.TField("issuer", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VALIDITY_FIELD_DESC = new org.apache.thrift.protocol.TField("validity", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_CHAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("requestChain", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField EXTERNAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("externalID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EzSecurityPrincipalStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EzSecurityPrincipalTupleSchemeFactory());
  }

  public String principal; // required
  public String issuer; // optional
  public ValidityCaveats validity; // required
  public List<String> requestChain; // optional
  public String externalID; // optional
  public String name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRINCIPAL((short)1, "principal"),
    ISSUER((short)6, "issuer"),
    VALIDITY((short)2, "validity"),
    REQUEST_CHAIN((short)3, "requestChain"),
    EXTERNAL_ID((short)4, "externalID"),
    NAME((short)5, "name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRINCIPAL
          return PRINCIPAL;
        case 6: // ISSUER
          return ISSUER;
        case 2: // VALIDITY
          return VALIDITY;
        case 3: // REQUEST_CHAIN
          return REQUEST_CHAIN;
        case 4: // EXTERNAL_ID
          return EXTERNAL_ID;
        case 5: // NAME
          return NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ISSUER,_Fields.REQUEST_CHAIN,_Fields.EXTERNAL_ID,_Fields.NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("principal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUER, new org.apache.thrift.meta_data.FieldMetaData("issuer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALIDITY, new org.apache.thrift.meta_data.FieldMetaData("validity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ValidityCaveats.class)));
    tmpMap.put(_Fields.REQUEST_CHAIN, new org.apache.thrift.meta_data.FieldMetaData("requestChain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXTERNAL_ID, new org.apache.thrift.meta_data.FieldMetaData("externalID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EzSecurityPrincipal.class, metaDataMap);
  }

  public EzSecurityPrincipal() {
  }

  public EzSecurityPrincipal(
    String principal,
    ValidityCaveats validity)
  {
    this();
    this.principal = principal;
    this.validity = validity;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EzSecurityPrincipal(EzSecurityPrincipal other) {
    if (other.isSetPrincipal()) {
      this.principal = other.principal;
    }
    if (other.isSetIssuer()) {
      this.issuer = other.issuer;
    }
    if (other.isSetValidity()) {
      this.validity = new ValidityCaveats(other.validity);
    }
    if (other.isSetRequestChain()) {
      List<String> __this__requestChain = new ArrayList<String>(other.requestChain);
      this.requestChain = __this__requestChain;
    }
    if (other.isSetExternalID()) {
      this.externalID = other.externalID;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
  }

  public EzSecurityPrincipal deepCopy() {
    return new EzSecurityPrincipal(this);
  }

  @Override
  public void clear() {
    this.principal = null;
    this.issuer = null;
    this.validity = null;
    this.requestChain = null;
    this.externalID = null;
    this.name = null;
  }

  public String getPrincipal() {
    return this.principal;
  }

  public EzSecurityPrincipal setPrincipal(String principal) {
    this.principal = principal;
    return this;
  }

  public void unsetPrincipal() {
    this.principal = null;
  }

  /** Returns true if field principal is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal() {
    return this.principal != null;
  }

  public void setPrincipalIsSet(boolean value) {
    if (!value) {
      this.principal = null;
    }
  }

  public String getIssuer() {
    return this.issuer;
  }

  public EzSecurityPrincipal setIssuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  public void unsetIssuer() {
    this.issuer = null;
  }

  /** Returns true if field issuer is set (has been assigned a value) and false otherwise */
  public boolean isSetIssuer() {
    return this.issuer != null;
  }

  public void setIssuerIsSet(boolean value) {
    if (!value) {
      this.issuer = null;
    }
  }

  public ValidityCaveats getValidity() {
    return this.validity;
  }

  public EzSecurityPrincipal setValidity(ValidityCaveats validity) {
    this.validity = validity;
    return this;
  }

  public void unsetValidity() {
    this.validity = null;
  }

  /** Returns true if field validity is set (has been assigned a value) and false otherwise */
  public boolean isSetValidity() {
    return this.validity != null;
  }

  public void setValidityIsSet(boolean value) {
    if (!value) {
      this.validity = null;
    }
  }

  public int getRequestChainSize() {
    return (this.requestChain == null) ? 0 : this.requestChain.size();
  }

  public java.util.Iterator<String> getRequestChainIterator() {
    return (this.requestChain == null) ? null : this.requestChain.iterator();
  }

  public void addToRequestChain(String elem) {
    if (this.requestChain == null) {
      this.requestChain = new ArrayList<String>();
    }
    this.requestChain.add(elem);
  }

  public List<String> getRequestChain() {
    return this.requestChain;
  }

  public EzSecurityPrincipal setRequestChain(List<String> requestChain) {
    this.requestChain = requestChain;
    return this;
  }

  public void unsetRequestChain() {
    this.requestChain = null;
  }

  /** Returns true if field requestChain is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestChain() {
    return this.requestChain != null;
  }

  public void setRequestChainIsSet(boolean value) {
    if (!value) {
      this.requestChain = null;
    }
  }

  public String getExternalID() {
    return this.externalID;
  }

  public EzSecurityPrincipal setExternalID(String externalID) {
    this.externalID = externalID;
    return this;
  }

  public void unsetExternalID() {
    this.externalID = null;
  }

  /** Returns true if field externalID is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalID() {
    return this.externalID != null;
  }

  public void setExternalIDIsSet(boolean value) {
    if (!value) {
      this.externalID = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public EzSecurityPrincipal setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRINCIPAL:
      if (value == null) {
        unsetPrincipal();
      } else {
        setPrincipal((String)value);
      }
      break;

    case ISSUER:
      if (value == null) {
        unsetIssuer();
      } else {
        setIssuer((String)value);
      }
      break;

    case VALIDITY:
      if (value == null) {
        unsetValidity();
      } else {
        setValidity((ValidityCaveats)value);
      }
      break;

    case REQUEST_CHAIN:
      if (value == null) {
        unsetRequestChain();
      } else {
        setRequestChain((List<String>)value);
      }
      break;

    case EXTERNAL_ID:
      if (value == null) {
        unsetExternalID();
      } else {
        setExternalID((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRINCIPAL:
      return getPrincipal();

    case ISSUER:
      return getIssuer();

    case VALIDITY:
      return getValidity();

    case REQUEST_CHAIN:
      return getRequestChain();

    case EXTERNAL_ID:
      return getExternalID();

    case NAME:
      return getName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRINCIPAL:
      return isSetPrincipal();
    case ISSUER:
      return isSetIssuer();
    case VALIDITY:
      return isSetValidity();
    case REQUEST_CHAIN:
      return isSetRequestChain();
    case EXTERNAL_ID:
      return isSetExternalID();
    case NAME:
      return isSetName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EzSecurityPrincipal)
      return this.equals((EzSecurityPrincipal)that);
    return false;
  }

  public boolean equals(EzSecurityPrincipal that) {
    if (that == null)
      return false;

    boolean this_present_principal = true && this.isSetPrincipal();
    boolean that_present_principal = true && that.isSetPrincipal();
    if (this_present_principal || that_present_principal) {
      if (!(this_present_principal && that_present_principal))
        return false;
      if (!this.principal.equals(that.principal))
        return false;
    }

    boolean this_present_issuer = true && this.isSetIssuer();
    boolean that_present_issuer = true && that.isSetIssuer();
    if (this_present_issuer || that_present_issuer) {
      if (!(this_present_issuer && that_present_issuer))
        return false;
      if (!this.issuer.equals(that.issuer))
        return false;
    }

    boolean this_present_validity = true && this.isSetValidity();
    boolean that_present_validity = true && that.isSetValidity();
    if (this_present_validity || that_present_validity) {
      if (!(this_present_validity && that_present_validity))
        return false;
      if (!this.validity.equals(that.validity))
        return false;
    }

    boolean this_present_requestChain = true && this.isSetRequestChain();
    boolean that_present_requestChain = true && that.isSetRequestChain();
    if (this_present_requestChain || that_present_requestChain) {
      if (!(this_present_requestChain && that_present_requestChain))
        return false;
      if (!this.requestChain.equals(that.requestChain))
        return false;
    }

    boolean this_present_externalID = true && this.isSetExternalID();
    boolean that_present_externalID = true && that.isSetExternalID();
    if (this_present_externalID || that_present_externalID) {
      if (!(this_present_externalID && that_present_externalID))
        return false;
      if (!this.externalID.equals(that.externalID))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EzSecurityPrincipal other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPrincipal()).compareTo(other.isSetPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal, other.principal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssuer()).compareTo(other.isSetIssuer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssuer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issuer, other.issuer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidity()).compareTo(other.isSetValidity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validity, other.validity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestChain()).compareTo(other.isSetRequestChain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestChain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestChain, other.requestChain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternalID()).compareTo(other.isSetExternalID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalID, other.externalID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EzSecurityPrincipal(");
    boolean first = true;

    sb.append("principal:");
    if (this.principal == null) {
      sb.append("null");
    } else {
      sb.append(this.principal);
    }
    first = false;
    if (isSetIssuer()) {
      if (!first) sb.append(", ");
      sb.append("issuer:");
      if (this.issuer == null) {
        sb.append("null");
      } else {
        sb.append(this.issuer);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("validity:");
    if (this.validity == null) {
      sb.append("null");
    } else {
      sb.append(this.validity);
    }
    first = false;
    if (isSetRequestChain()) {
      if (!first) sb.append(", ");
      sb.append("requestChain:");
      if (this.requestChain == null) {
        sb.append("null");
      } else {
        sb.append(this.requestChain);
      }
      first = false;
    }
    if (isSetExternalID()) {
      if (!first) sb.append(", ");
      sb.append("externalID:");
      if (this.externalID == null) {
        sb.append("null");
      } else {
        sb.append(this.externalID);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (principal == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'principal' was not present! Struct: " + toString());
    }
    if (validity == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'validity' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (validity != null) {
      validity.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EzSecurityPrincipalStandardSchemeFactory implements SchemeFactory {
    public EzSecurityPrincipalStandardScheme getScheme() {
      return new EzSecurityPrincipalStandardScheme();
    }
  }

  private static class EzSecurityPrincipalStandardScheme extends StandardScheme<EzSecurityPrincipal> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EzSecurityPrincipal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.principal = iprot.readString();
              struct.setPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ISSUER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issuer = iprot.readString();
              struct.setIssuerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALIDITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.validity = new ValidityCaveats();
              struct.validity.read(iprot);
              struct.setValidityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_CHAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.requestChain = new ArrayList<String>(_list64.size);
                for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                {
                  String _elem66;
                  _elem66 = iprot.readString();
                  struct.requestChain.add(_elem66);
                }
                iprot.readListEnd();
              }
              struct.setRequestChainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXTERNAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.externalID = iprot.readString();
              struct.setExternalIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EzSecurityPrincipal struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.principal != null) {
        oprot.writeFieldBegin(PRINCIPAL_FIELD_DESC);
        oprot.writeString(struct.principal);
        oprot.writeFieldEnd();
      }
      if (struct.validity != null) {
        oprot.writeFieldBegin(VALIDITY_FIELD_DESC);
        struct.validity.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.requestChain != null) {
        if (struct.isSetRequestChain()) {
          oprot.writeFieldBegin(REQUEST_CHAIN_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.requestChain.size()));
            for (String _iter67 : struct.requestChain)
            {
              oprot.writeString(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.externalID != null) {
        if (struct.isSetExternalID()) {
          oprot.writeFieldBegin(EXTERNAL_ID_FIELD_DESC);
          oprot.writeString(struct.externalID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.issuer != null) {
        if (struct.isSetIssuer()) {
          oprot.writeFieldBegin(ISSUER_FIELD_DESC);
          oprot.writeString(struct.issuer);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EzSecurityPrincipalTupleSchemeFactory implements SchemeFactory {
    public EzSecurityPrincipalTupleScheme getScheme() {
      return new EzSecurityPrincipalTupleScheme();
    }
  }

  private static class EzSecurityPrincipalTupleScheme extends TupleScheme<EzSecurityPrincipal> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EzSecurityPrincipal struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.principal);
      struct.validity.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetIssuer()) {
        optionals.set(0);
      }
      if (struct.isSetRequestChain()) {
        optionals.set(1);
      }
      if (struct.isSetExternalID()) {
        optionals.set(2);
      }
      if (struct.isSetName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetIssuer()) {
        oprot.writeString(struct.issuer);
      }
      if (struct.isSetRequestChain()) {
        {
          oprot.writeI32(struct.requestChain.size());
          for (String _iter68 : struct.requestChain)
          {
            oprot.writeString(_iter68);
          }
        }
      }
      if (struct.isSetExternalID()) {
        oprot.writeString(struct.externalID);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EzSecurityPrincipal struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.principal = iprot.readString();
      struct.setPrincipalIsSet(true);
      struct.validity = new ValidityCaveats();
      struct.validity.read(iprot);
      struct.setValidityIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.issuer = iprot.readString();
        struct.setIssuerIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.requestChain = new ArrayList<String>(_list69.size);
          for (int _i70 = 0; _i70 < _list69.size; ++_i70)
          {
            String _elem71;
            _elem71 = iprot.readString();
            struct.requestChain.add(_elem71);
          }
        }
        struct.setRequestChainIsSet(true);
      }
      if (incoming.get(2)) {
        struct.externalID = iprot.readString();
        struct.setExternalIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }
  }

}

