/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ezmetrics_TYPES_H
#define ezmetrics_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ezbake { namespace base { namespace thrift { namespace metrics {

typedef struct _GaugeThrift__isset {
  _GaugeThrift__isset() : value(false), error(false) {}
  bool value;
  bool error;
} _GaugeThrift__isset;

class GaugeThrift {
 public:

  static const char* ascii_fingerprint; // = "D0297FC5011701BD87898CC36146A565";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x29,0x7F,0xC5,0x01,0x17,0x01,0xBD,0x87,0x89,0x8C,0xC3,0x61,0x46,0xA5,0x65};

  GaugeThrift() : value(), error() {
  }

  virtual ~GaugeThrift() throw() {}

  std::string value;
  std::string error;

  _GaugeThrift__isset __isset;

  void __set_value(const std::string& val) {
    value = val;
    __isset.value = true;
  }

  void __set_error(const std::string& val) {
    error = val;
    __isset.error = true;
  }

  bool operator == (const GaugeThrift & rhs) const
  {
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GaugeThrift &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GaugeThrift & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GaugeThrift &a, GaugeThrift &b);


class CounterThrift {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  CounterThrift() : count(0) {
  }

  virtual ~CounterThrift() throw() {}

  int64_t count;

  void __set_count(const int64_t val) {
    count = val;
  }

  bool operator == (const CounterThrift & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const CounterThrift &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CounterThrift & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CounterThrift &a, CounterThrift &b);


class SnapShotThrift {
 public:

  static const char* ascii_fingerprint; // = "8BA62ABB3DD6F30F30ABCB05B3FD172D";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xA6,0x2A,0xBB,0x3D,0xD6,0xF3,0x0F,0x30,0xAB,0xCB,0x05,0xB3,0xFD,0x17,0x2D};

  SnapShotThrift() : max(0), min(0), mean(0), median(0), StdDev(0), p75(0), p95(0), p98(0), p99(0), p999(0) {
  }

  virtual ~SnapShotThrift() throw() {}

  int64_t max;
  int64_t min;
  double mean;
  double median;
  double StdDev;
  double p75;
  double p95;
  double p98;
  double p99;
  double p999;
  std::vector<int64_t>  values;

  void __set_max(const int64_t val) {
    max = val;
  }

  void __set_min(const int64_t val) {
    min = val;
  }

  void __set_mean(const double val) {
    mean = val;
  }

  void __set_median(const double val) {
    median = val;
  }

  void __set_StdDev(const double val) {
    StdDev = val;
  }

  void __set_p75(const double val) {
    p75 = val;
  }

  void __set_p95(const double val) {
    p95 = val;
  }

  void __set_p98(const double val) {
    p98 = val;
  }

  void __set_p99(const double val) {
    p99 = val;
  }

  void __set_p999(const double val) {
    p999 = val;
  }

  void __set_values(const std::vector<int64_t> & val) {
    values = val;
  }

  bool operator == (const SnapShotThrift & rhs) const
  {
    if (!(max == rhs.max))
      return false;
    if (!(min == rhs.min))
      return false;
    if (!(mean == rhs.mean))
      return false;
    if (!(median == rhs.median))
      return false;
    if (!(StdDev == rhs.StdDev))
      return false;
    if (!(p75 == rhs.p75))
      return false;
    if (!(p95 == rhs.p95))
      return false;
    if (!(p98 == rhs.p98))
      return false;
    if (!(p99 == rhs.p99))
      return false;
    if (!(p999 == rhs.p999))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const SnapShotThrift &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnapShotThrift & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SnapShotThrift &a, SnapShotThrift &b);


class HistogramThrift {
 public:

  static const char* ascii_fingerprint; // = "384B8C0F6263173D32F0159C9096F939";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0x4B,0x8C,0x0F,0x62,0x63,0x17,0x3D,0x32,0xF0,0x15,0x9C,0x90,0x96,0xF9,0x39};

  HistogramThrift() : count(0) {
  }

  virtual ~HistogramThrift() throw() {}

  int64_t count;
  SnapShotThrift snapshot;

  void __set_count(const int64_t val) {
    count = val;
  }

  void __set_snapshot(const SnapShotThrift& val) {
    snapshot = val;
  }

  bool operator == (const HistogramThrift & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(snapshot == rhs.snapshot))
      return false;
    return true;
  }
  bool operator != (const HistogramThrift &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HistogramThrift & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HistogramThrift &a, HistogramThrift &b);


class MeteredThrift {
 public:

  static const char* ascii_fingerprint; // = "649D0EC63F3E75D427DC39CC6296303C";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x9D,0x0E,0xC6,0x3F,0x3E,0x75,0xD4,0x27,0xDC,0x39,0xCC,0x62,0x96,0x30,0x3C};

  MeteredThrift() : count(0), m15Rate(0), m5Rate(0), m1Rate(0), meanRate(0) {
  }

  virtual ~MeteredThrift() throw() {}

  int64_t count;
  double m15Rate;
  double m5Rate;
  double m1Rate;
  double meanRate;

  void __set_count(const int64_t val) {
    count = val;
  }

  void __set_m15Rate(const double val) {
    m15Rate = val;
  }

  void __set_m5Rate(const double val) {
    m5Rate = val;
  }

  void __set_m1Rate(const double val) {
    m1Rate = val;
  }

  void __set_meanRate(const double val) {
    meanRate = val;
  }

  bool operator == (const MeteredThrift & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(m15Rate == rhs.m15Rate))
      return false;
    if (!(m5Rate == rhs.m5Rate))
      return false;
    if (!(m1Rate == rhs.m1Rate))
      return false;
    if (!(meanRate == rhs.meanRate))
      return false;
    return true;
  }
  bool operator != (const MeteredThrift &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MeteredThrift & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MeteredThrift &a, MeteredThrift &b);


class TimerThrift {
 public:

  static const char* ascii_fingerprint; // = "6A03034C2C9B8F731CB9420297819933";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x03,0x03,0x4C,0x2C,0x9B,0x8F,0x73,0x1C,0xB9,0x42,0x02,0x97,0x81,0x99,0x33};

  TimerThrift() : count(0) {
  }

  virtual ~TimerThrift() throw() {}

  int64_t count;
  SnapShotThrift snapshot;
  MeteredThrift meter;

  void __set_count(const int64_t val) {
    count = val;
  }

  void __set_snapshot(const SnapShotThrift& val) {
    snapshot = val;
  }

  void __set_meter(const MeteredThrift& val) {
    meter = val;
  }

  bool operator == (const TimerThrift & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(snapshot == rhs.snapshot))
      return false;
    if (!(meter == rhs.meter))
      return false;
    return true;
  }
  bool operator != (const TimerThrift &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimerThrift & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TimerThrift &a, TimerThrift &b);


class MetricRegistryThrift {
 public:

  static const char* ascii_fingerprint; // = "6589E43B9A96C8EAF8632B4584F0D4C8";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0x89,0xE4,0x3B,0x9A,0x96,0xC8,0xEA,0xF8,0x63,0x2B,0x45,0x84,0xF0,0xD4,0xC8};

  MetricRegistryThrift() {
  }

  virtual ~MetricRegistryThrift() throw() {}

  std::map<std::string, GaugeThrift>  gauges;
  std::map<std::string, CounterThrift>  counters;
  std::map<std::string, HistogramThrift>  histograms;
  std::map<std::string, MeteredThrift>  meters;
  std::map<std::string, TimerThrift>  timers;

  void __set_gauges(const std::map<std::string, GaugeThrift> & val) {
    gauges = val;
  }

  void __set_counters(const std::map<std::string, CounterThrift> & val) {
    counters = val;
  }

  void __set_histograms(const std::map<std::string, HistogramThrift> & val) {
    histograms = val;
  }

  void __set_meters(const std::map<std::string, MeteredThrift> & val) {
    meters = val;
  }

  void __set_timers(const std::map<std::string, TimerThrift> & val) {
    timers = val;
  }

  bool operator == (const MetricRegistryThrift & rhs) const
  {
    if (!(gauges == rhs.gauges))
      return false;
    if (!(counters == rhs.counters))
      return false;
    if (!(histograms == rhs.histograms))
      return false;
    if (!(meters == rhs.meters))
      return false;
    if (!(timers == rhs.timers))
      return false;
    return true;
  }
  bool operator != (const MetricRegistryThrift &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetricRegistryThrift & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MetricRegistryThrift &a, MetricRegistryThrift &b);

}}}} // namespace

#endif
