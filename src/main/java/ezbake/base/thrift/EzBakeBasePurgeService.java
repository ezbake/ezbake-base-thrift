/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.base.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EzBakeBasePurgeService {

  /**
   * This is the base thrift service an application needs to implement to support the centralized purging.  The
   * central purge service will call every application's purge service to initiate a purge operation.
   * 
   *   +-------------------------+
   *   |                         |
   *   |  Central Purge Service  |
   *   |                         |
   *   +-----------+-------------+
   *               |
   *               |
   *               |
   *   +-----------v-------------+
   *   |                         |
   *   |Application Purge Service|
   *   |                         |
   *   +-----------+-------------+
   *               |
   *               |
   *               |
   *   +-----------v-------------+
   *   |                         |
   *   |    Data Access Layer    |
   *   |                         |
   *   +-------------------------+
   * 
   */
  public interface Iface extends ezbake.base.thrift.EzBakeBaseService.Iface {

    /**
     * Start a purge of the given items.  This method will begin purging items
     * that match the given set of IDs and will call back to the
     * purgeCallbackService when the purge has completed. The return of this
     * function without exception indicates that the application has taken
     * responsibility of purging documents matching purgeIds from its data sets.
     * It does not indicate completion of the purge.
     * 
     * Returns the state of the new purge request.
     * 
     * @param purgeCallbackService ezDiscovery path of the purge service to
     *        call back to.
     * @param purgeId Unique id to use for this purge request. Will be the string
     *        representation of an i64 number in the case of a true purge, or be
     *        prefaced with “AgeOff_<rule#>_<timestamp>” in the case that this
     *        purge is occurring due to age-off processing. The implementing
     *        application typically should not care and should not take any
     *        action based on that fact.
     * 
     * @param idsToPurge set<i64> containing all the items to purge. This should
     *        be sent to the data access layer to perform the purge.
     * @param initiatorToken Security token for the service or user that
     *        initiated the purge.
     * 
     * @param purgeCallbackService
     * @param purgeId
     * @param idsToPurge
     * @param initiatorToken
     */
    public PurgeState beginPurge(String purgeCallbackService, long purgeId, Set<Long> idsToPurge, ezbake.base.thrift.EzSecurityToken initiatorToken) throws PurgeException, ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    public PurgeState beginVirusPurge(String purgeCallbackService, long purgeId, Set<Long> idsToPurge, ezbake.base.thrift.EzSecurityToken initiatorToken) throws PurgeException, ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    /**
     * Returns the state of a given purge request.
     * 
     * @param purgeId Unique id to use for this purge request
     * @returns Status of the given purge, UNKNOWN_ID if it was not found
     * 
     * @param token
     * @param purgeId
     */
    public PurgeState purgeStatus(ezbake.base.thrift.EzSecurityToken token, long purgeId) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    /**
     *  * Request cancelling a purge that is currently running. In order to attempt
     *  * to not leave the application in an unstable state the application may not
     *  * be able to cancelt the purge.
     *  *
     *  * @param token Security token for the service or user that requested the cancel.
     *  * @param purgeId Unique id for the purge to cancel
     *  *
     *  * @returns CancelStatus the enum for the current state of the cancel.
     * *
     * 
     * @param token
     * @param purgeId
     */
    public PurgeState cancelPurge(ezbake.base.thrift.EzSecurityToken token, long purgeId) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends ezbake.base.thrift.EzBakeBaseService .AsyncIface {

    public void beginPurge(String purgeCallbackService, long purgeId, Set<Long> idsToPurge, ezbake.base.thrift.EzSecurityToken initiatorToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void beginVirusPurge(String purgeCallbackService, long purgeId, Set<Long> idsToPurge, ezbake.base.thrift.EzSecurityToken initiatorToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void purgeStatus(ezbake.base.thrift.EzSecurityToken token, long purgeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelPurge(ezbake.base.thrift.EzSecurityToken token, long purgeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ezbake.base.thrift.EzBakeBaseService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public PurgeState beginPurge(String purgeCallbackService, long purgeId, Set<Long> idsToPurge, ezbake.base.thrift.EzSecurityToken initiatorToken) throws PurgeException, ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_beginPurge(purgeCallbackService, purgeId, idsToPurge, initiatorToken);
      return recv_beginPurge();
    }

    public void send_beginPurge(String purgeCallbackService, long purgeId, Set<Long> idsToPurge, ezbake.base.thrift.EzSecurityToken initiatorToken) throws org.apache.thrift.TException
    {
      beginPurge_args args = new beginPurge_args();
      args.setPurgeCallbackService(purgeCallbackService);
      args.setPurgeId(purgeId);
      args.setIdsToPurge(idsToPurge);
      args.setInitiatorToken(initiatorToken);
      sendBase("beginPurge", args);
    }

    public PurgeState recv_beginPurge() throws PurgeException, ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      beginPurge_result result = new beginPurge_result();
      receiveBase(result, "beginPurge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      if (result.tokenException != null) {
        throw result.tokenException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "beginPurge failed: unknown result");
    }

    public PurgeState beginVirusPurge(String purgeCallbackService, long purgeId, Set<Long> idsToPurge, ezbake.base.thrift.EzSecurityToken initiatorToken) throws PurgeException, ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_beginVirusPurge(purgeCallbackService, purgeId, idsToPurge, initiatorToken);
      return recv_beginVirusPurge();
    }

    public void send_beginVirusPurge(String purgeCallbackService, long purgeId, Set<Long> idsToPurge, ezbake.base.thrift.EzSecurityToken initiatorToken) throws org.apache.thrift.TException
    {
      beginVirusPurge_args args = new beginVirusPurge_args();
      args.setPurgeCallbackService(purgeCallbackService);
      args.setPurgeId(purgeId);
      args.setIdsToPurge(idsToPurge);
      args.setInitiatorToken(initiatorToken);
      sendBase("beginVirusPurge", args);
    }

    public PurgeState recv_beginVirusPurge() throws PurgeException, ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      beginVirusPurge_result result = new beginVirusPurge_result();
      receiveBase(result, "beginVirusPurge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      if (result.tokenException != null) {
        throw result.tokenException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "beginVirusPurge failed: unknown result");
    }

    public PurgeState purgeStatus(ezbake.base.thrift.EzSecurityToken token, long purgeId) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_purgeStatus(token, purgeId);
      return recv_purgeStatus();
    }

    public void send_purgeStatus(ezbake.base.thrift.EzSecurityToken token, long purgeId) throws org.apache.thrift.TException
    {
      purgeStatus_args args = new purgeStatus_args();
      args.setToken(token);
      args.setPurgeId(purgeId);
      sendBase("purgeStatus", args);
    }

    public PurgeState recv_purgeStatus() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      purgeStatus_result result = new purgeStatus_result();
      receiveBase(result, "purgeStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tokenException != null) {
        throw result.tokenException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "purgeStatus failed: unknown result");
    }

    public PurgeState cancelPurge(ezbake.base.thrift.EzSecurityToken token, long purgeId) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_cancelPurge(token, purgeId);
      return recv_cancelPurge();
    }

    public void send_cancelPurge(ezbake.base.thrift.EzSecurityToken token, long purgeId) throws org.apache.thrift.TException
    {
      cancelPurge_args args = new cancelPurge_args();
      args.setToken(token);
      args.setPurgeId(purgeId);
      sendBase("cancelPurge", args);
    }

    public PurgeState recv_cancelPurge() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      cancelPurge_result result = new cancelPurge_result();
      receiveBase(result, "cancelPurge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tokenException != null) {
        throw result.tokenException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelPurge failed: unknown result");
    }

  }
  public static class AsyncClient extends ezbake.base.thrift.EzBakeBaseService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void beginPurge(String purgeCallbackService, long purgeId, Set<Long> idsToPurge, ezbake.base.thrift.EzSecurityToken initiatorToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      beginPurge_call method_call = new beginPurge_call(purgeCallbackService, purgeId, idsToPurge, initiatorToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class beginPurge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String purgeCallbackService;
      private long purgeId;
      private Set<Long> idsToPurge;
      private ezbake.base.thrift.EzSecurityToken initiatorToken;
      public beginPurge_call(String purgeCallbackService, long purgeId, Set<Long> idsToPurge, ezbake.base.thrift.EzSecurityToken initiatorToken, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.purgeCallbackService = purgeCallbackService;
        this.purgeId = purgeId;
        this.idsToPurge = idsToPurge;
        this.initiatorToken = initiatorToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("beginPurge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        beginPurge_args args = new beginPurge_args();
        args.setPurgeCallbackService(purgeCallbackService);
        args.setPurgeId(purgeId);
        args.setIdsToPurge(idsToPurge);
        args.setInitiatorToken(initiatorToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PurgeState getResult() throws PurgeException, ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_beginPurge();
      }
    }

    public void beginVirusPurge(String purgeCallbackService, long purgeId, Set<Long> idsToPurge, ezbake.base.thrift.EzSecurityToken initiatorToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      beginVirusPurge_call method_call = new beginVirusPurge_call(purgeCallbackService, purgeId, idsToPurge, initiatorToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class beginVirusPurge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String purgeCallbackService;
      private long purgeId;
      private Set<Long> idsToPurge;
      private ezbake.base.thrift.EzSecurityToken initiatorToken;
      public beginVirusPurge_call(String purgeCallbackService, long purgeId, Set<Long> idsToPurge, ezbake.base.thrift.EzSecurityToken initiatorToken, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.purgeCallbackService = purgeCallbackService;
        this.purgeId = purgeId;
        this.idsToPurge = idsToPurge;
        this.initiatorToken = initiatorToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("beginVirusPurge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        beginVirusPurge_args args = new beginVirusPurge_args();
        args.setPurgeCallbackService(purgeCallbackService);
        args.setPurgeId(purgeId);
        args.setIdsToPurge(idsToPurge);
        args.setInitiatorToken(initiatorToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PurgeState getResult() throws PurgeException, ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_beginVirusPurge();
      }
    }

    public void purgeStatus(ezbake.base.thrift.EzSecurityToken token, long purgeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      purgeStatus_call method_call = new purgeStatus_call(token, purgeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class purgeStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private long purgeId;
      public purgeStatus_call(ezbake.base.thrift.EzSecurityToken token, long purgeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.purgeId = purgeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("purgeStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        purgeStatus_args args = new purgeStatus_args();
        args.setToken(token);
        args.setPurgeId(purgeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PurgeState getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_purgeStatus();
      }
    }

    public void cancelPurge(ezbake.base.thrift.EzSecurityToken token, long purgeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelPurge_call method_call = new cancelPurge_call(token, purgeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelPurge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private long purgeId;
      public cancelPurge_call(ezbake.base.thrift.EzSecurityToken token, long purgeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.purgeId = purgeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelPurge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelPurge_args args = new cancelPurge_args();
        args.setToken(token);
        args.setPurgeId(purgeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PurgeState getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelPurge();
      }
    }

  }

  public static class Processor<I extends Iface> extends ezbake.base.thrift.EzBakeBaseService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("beginPurge", new beginPurge());
      processMap.put("beginVirusPurge", new beginVirusPurge());
      processMap.put("purgeStatus", new purgeStatus());
      processMap.put("cancelPurge", new cancelPurge());
      return processMap;
    }

    public static class beginPurge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, beginPurge_args> {
      public beginPurge() {
        super("beginPurge");
      }

      public beginPurge_args getEmptyArgsInstance() {
        return new beginPurge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public beginPurge_result getResult(I iface, beginPurge_args args) throws org.apache.thrift.TException {
        beginPurge_result result = new beginPurge_result();
        try {
          result.success = iface.beginPurge(args.purgeCallbackService, args.purgeId, args.idsToPurge, args.initiatorToken);
        } catch (PurgeException e) {
          result.e = e;
        } catch (ezbake.base.thrift.EzSecurityTokenException tokenException) {
          result.tokenException = tokenException;
        }
        return result;
      }
    }

    public static class beginVirusPurge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, beginVirusPurge_args> {
      public beginVirusPurge() {
        super("beginVirusPurge");
      }

      public beginVirusPurge_args getEmptyArgsInstance() {
        return new beginVirusPurge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public beginVirusPurge_result getResult(I iface, beginVirusPurge_args args) throws org.apache.thrift.TException {
        beginVirusPurge_result result = new beginVirusPurge_result();
        try {
          result.success = iface.beginVirusPurge(args.purgeCallbackService, args.purgeId, args.idsToPurge, args.initiatorToken);
        } catch (PurgeException e) {
          result.e = e;
        } catch (ezbake.base.thrift.EzSecurityTokenException tokenException) {
          result.tokenException = tokenException;
        }
        return result;
      }
    }

    public static class purgeStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, purgeStatus_args> {
      public purgeStatus() {
        super("purgeStatus");
      }

      public purgeStatus_args getEmptyArgsInstance() {
        return new purgeStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public purgeStatus_result getResult(I iface, purgeStatus_args args) throws org.apache.thrift.TException {
        purgeStatus_result result = new purgeStatus_result();
        try {
          result.success = iface.purgeStatus(args.token, args.purgeId);
        } catch (ezbake.base.thrift.EzSecurityTokenException tokenException) {
          result.tokenException = tokenException;
        }
        return result;
      }
    }

    public static class cancelPurge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelPurge_args> {
      public cancelPurge() {
        super("cancelPurge");
      }

      public cancelPurge_args getEmptyArgsInstance() {
        return new cancelPurge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelPurge_result getResult(I iface, cancelPurge_args args) throws org.apache.thrift.TException {
        cancelPurge_result result = new cancelPurge_result();
        try {
          result.success = iface.cancelPurge(args.token, args.purgeId);
        } catch (ezbake.base.thrift.EzSecurityTokenException tokenException) {
          result.tokenException = tokenException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends ezbake.base.thrift.EzBakeBaseService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("beginPurge", new beginPurge());
      processMap.put("beginVirusPurge", new beginVirusPurge());
      processMap.put("purgeStatus", new purgeStatus());
      processMap.put("cancelPurge", new cancelPurge());
      return processMap;
    }

    public static class beginPurge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, beginPurge_args, PurgeState> {
      public beginPurge() {
        super("beginPurge");
      }

      public beginPurge_args getEmptyArgsInstance() {
        return new beginPurge_args();
      }

      public AsyncMethodCallback<PurgeState> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PurgeState>() { 
          public void onComplete(PurgeState o) {
            beginPurge_result result = new beginPurge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            beginPurge_result result = new beginPurge_result();
            if (e instanceof PurgeException) {
                        result.e = (PurgeException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.tokenException = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setTokenExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, beginPurge_args args, org.apache.thrift.async.AsyncMethodCallback<PurgeState> resultHandler) throws TException {
        iface.beginPurge(args.purgeCallbackService, args.purgeId, args.idsToPurge, args.initiatorToken,resultHandler);
      }
    }

    public static class beginVirusPurge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, beginVirusPurge_args, PurgeState> {
      public beginVirusPurge() {
        super("beginVirusPurge");
      }

      public beginVirusPurge_args getEmptyArgsInstance() {
        return new beginVirusPurge_args();
      }

      public AsyncMethodCallback<PurgeState> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PurgeState>() { 
          public void onComplete(PurgeState o) {
            beginVirusPurge_result result = new beginVirusPurge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            beginVirusPurge_result result = new beginVirusPurge_result();
            if (e instanceof PurgeException) {
                        result.e = (PurgeException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.tokenException = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setTokenExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, beginVirusPurge_args args, org.apache.thrift.async.AsyncMethodCallback<PurgeState> resultHandler) throws TException {
        iface.beginVirusPurge(args.purgeCallbackService, args.purgeId, args.idsToPurge, args.initiatorToken,resultHandler);
      }
    }

    public static class purgeStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, purgeStatus_args, PurgeState> {
      public purgeStatus() {
        super("purgeStatus");
      }

      public purgeStatus_args getEmptyArgsInstance() {
        return new purgeStatus_args();
      }

      public AsyncMethodCallback<PurgeState> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PurgeState>() { 
          public void onComplete(PurgeState o) {
            purgeStatus_result result = new purgeStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            purgeStatus_result result = new purgeStatus_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.tokenException = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setTokenExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, purgeStatus_args args, org.apache.thrift.async.AsyncMethodCallback<PurgeState> resultHandler) throws TException {
        iface.purgeStatus(args.token, args.purgeId,resultHandler);
      }
    }

    public static class cancelPurge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelPurge_args, PurgeState> {
      public cancelPurge() {
        super("cancelPurge");
      }

      public cancelPurge_args getEmptyArgsInstance() {
        return new cancelPurge_args();
      }

      public AsyncMethodCallback<PurgeState> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PurgeState>() { 
          public void onComplete(PurgeState o) {
            cancelPurge_result result = new cancelPurge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelPurge_result result = new cancelPurge_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.tokenException = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setTokenExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelPurge_args args, org.apache.thrift.async.AsyncMethodCallback<PurgeState> resultHandler) throws TException {
        iface.cancelPurge(args.token, args.purgeId,resultHandler);
      }
    }

  }

  public static class beginPurge_args implements org.apache.thrift.TBase<beginPurge_args, beginPurge_args._Fields>, java.io.Serializable, Cloneable, Comparable<beginPurge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginPurge_args");

    private static final org.apache.thrift.protocol.TField PURGE_CALLBACK_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeCallbackService", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PURGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField IDS_TO_PURGE_FIELD_DESC = new org.apache.thrift.protocol.TField("idsToPurge", org.apache.thrift.protocol.TType.SET, (short)3);
    private static final org.apache.thrift.protocol.TField INITIATOR_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("initiatorToken", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginPurge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginPurge_argsTupleSchemeFactory());
    }

    public String purgeCallbackService; // required
    public long purgeId; // required
    public Set<Long> idsToPurge; // required
    public ezbake.base.thrift.EzSecurityToken initiatorToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PURGE_CALLBACK_SERVICE((short)1, "purgeCallbackService"),
      PURGE_ID((short)2, "purgeId"),
      IDS_TO_PURGE((short)3, "idsToPurge"),
      INITIATOR_TOKEN((short)4, "initiatorToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PURGE_CALLBACK_SERVICE
            return PURGE_CALLBACK_SERVICE;
          case 2: // PURGE_ID
            return PURGE_ID;
          case 3: // IDS_TO_PURGE
            return IDS_TO_PURGE;
          case 4: // INITIATOR_TOKEN
            return INITIATOR_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PURGEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PURGE_CALLBACK_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("purgeCallbackService", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PURGE_ID, new org.apache.thrift.meta_data.FieldMetaData("purgeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IDS_TO_PURGE, new org.apache.thrift.meta_data.FieldMetaData("idsToPurge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.INITIATOR_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("initiatorToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginPurge_args.class, metaDataMap);
    }

    public beginPurge_args() {
    }

    public beginPurge_args(
      String purgeCallbackService,
      long purgeId,
      Set<Long> idsToPurge,
      ezbake.base.thrift.EzSecurityToken initiatorToken)
    {
      this();
      this.purgeCallbackService = purgeCallbackService;
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
      this.idsToPurge = idsToPurge;
      this.initiatorToken = initiatorToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginPurge_args(beginPurge_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPurgeCallbackService()) {
        this.purgeCallbackService = other.purgeCallbackService;
      }
      this.purgeId = other.purgeId;
      if (other.isSetIdsToPurge()) {
        Set<Long> __this__idsToPurge = new HashSet<Long>(other.idsToPurge);
        this.idsToPurge = __this__idsToPurge;
      }
      if (other.isSetInitiatorToken()) {
        this.initiatorToken = new ezbake.base.thrift.EzSecurityToken(other.initiatorToken);
      }
    }

    public beginPurge_args deepCopy() {
      return new beginPurge_args(this);
    }

    @Override
    public void clear() {
      this.purgeCallbackService = null;
      setPurgeIdIsSet(false);
      this.purgeId = 0;
      this.idsToPurge = null;
      this.initiatorToken = null;
    }

    public String getPurgeCallbackService() {
      return this.purgeCallbackService;
    }

    public beginPurge_args setPurgeCallbackService(String purgeCallbackService) {
      this.purgeCallbackService = purgeCallbackService;
      return this;
    }

    public void unsetPurgeCallbackService() {
      this.purgeCallbackService = null;
    }

    /** Returns true if field purgeCallbackService is set (has been assigned a value) and false otherwise */
    public boolean isSetPurgeCallbackService() {
      return this.purgeCallbackService != null;
    }

    public void setPurgeCallbackServiceIsSet(boolean value) {
      if (!value) {
        this.purgeCallbackService = null;
      }
    }

    public long getPurgeId() {
      return this.purgeId;
    }

    public beginPurge_args setPurgeId(long purgeId) {
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
      return this;
    }

    public void unsetPurgeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    /** Returns true if field purgeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPurgeId() {
      return EncodingUtils.testBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    public void setPurgeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURGEID_ISSET_ID, value);
    }

    public int getIdsToPurgeSize() {
      return (this.idsToPurge == null) ? 0 : this.idsToPurge.size();
    }

    public java.util.Iterator<Long> getIdsToPurgeIterator() {
      return (this.idsToPurge == null) ? null : this.idsToPurge.iterator();
    }

    public void addToIdsToPurge(long elem) {
      if (this.idsToPurge == null) {
        this.idsToPurge = new HashSet<Long>();
      }
      this.idsToPurge.add(elem);
    }

    public Set<Long> getIdsToPurge() {
      return this.idsToPurge;
    }

    public beginPurge_args setIdsToPurge(Set<Long> idsToPurge) {
      this.idsToPurge = idsToPurge;
      return this;
    }

    public void unsetIdsToPurge() {
      this.idsToPurge = null;
    }

    /** Returns true if field idsToPurge is set (has been assigned a value) and false otherwise */
    public boolean isSetIdsToPurge() {
      return this.idsToPurge != null;
    }

    public void setIdsToPurgeIsSet(boolean value) {
      if (!value) {
        this.idsToPurge = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getInitiatorToken() {
      return this.initiatorToken;
    }

    public beginPurge_args setInitiatorToken(ezbake.base.thrift.EzSecurityToken initiatorToken) {
      this.initiatorToken = initiatorToken;
      return this;
    }

    public void unsetInitiatorToken() {
      this.initiatorToken = null;
    }

    /** Returns true if field initiatorToken is set (has been assigned a value) and false otherwise */
    public boolean isSetInitiatorToken() {
      return this.initiatorToken != null;
    }

    public void setInitiatorTokenIsSet(boolean value) {
      if (!value) {
        this.initiatorToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PURGE_CALLBACK_SERVICE:
        if (value == null) {
          unsetPurgeCallbackService();
        } else {
          setPurgeCallbackService((String)value);
        }
        break;

      case PURGE_ID:
        if (value == null) {
          unsetPurgeId();
        } else {
          setPurgeId((Long)value);
        }
        break;

      case IDS_TO_PURGE:
        if (value == null) {
          unsetIdsToPurge();
        } else {
          setIdsToPurge((Set<Long>)value);
        }
        break;

      case INITIATOR_TOKEN:
        if (value == null) {
          unsetInitiatorToken();
        } else {
          setInitiatorToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PURGE_CALLBACK_SERVICE:
        return getPurgeCallbackService();

      case PURGE_ID:
        return Long.valueOf(getPurgeId());

      case IDS_TO_PURGE:
        return getIdsToPurge();

      case INITIATOR_TOKEN:
        return getInitiatorToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PURGE_CALLBACK_SERVICE:
        return isSetPurgeCallbackService();
      case PURGE_ID:
        return isSetPurgeId();
      case IDS_TO_PURGE:
        return isSetIdsToPurge();
      case INITIATOR_TOKEN:
        return isSetInitiatorToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginPurge_args)
        return this.equals((beginPurge_args)that);
      return false;
    }

    public boolean equals(beginPurge_args that) {
      if (that == null)
        return false;

      boolean this_present_purgeCallbackService = true && this.isSetPurgeCallbackService();
      boolean that_present_purgeCallbackService = true && that.isSetPurgeCallbackService();
      if (this_present_purgeCallbackService || that_present_purgeCallbackService) {
        if (!(this_present_purgeCallbackService && that_present_purgeCallbackService))
          return false;
        if (!this.purgeCallbackService.equals(that.purgeCallbackService))
          return false;
      }

      boolean this_present_purgeId = true;
      boolean that_present_purgeId = true;
      if (this_present_purgeId || that_present_purgeId) {
        if (!(this_present_purgeId && that_present_purgeId))
          return false;
        if (this.purgeId != that.purgeId)
          return false;
      }

      boolean this_present_idsToPurge = true && this.isSetIdsToPurge();
      boolean that_present_idsToPurge = true && that.isSetIdsToPurge();
      if (this_present_idsToPurge || that_present_idsToPurge) {
        if (!(this_present_idsToPurge && that_present_idsToPurge))
          return false;
        if (!this.idsToPurge.equals(that.idsToPurge))
          return false;
      }

      boolean this_present_initiatorToken = true && this.isSetInitiatorToken();
      boolean that_present_initiatorToken = true && that.isSetInitiatorToken();
      if (this_present_initiatorToken || that_present_initiatorToken) {
        if (!(this_present_initiatorToken && that_present_initiatorToken))
          return false;
        if (!this.initiatorToken.equals(that.initiatorToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(beginPurge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPurgeCallbackService()).compareTo(other.isSetPurgeCallbackService());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurgeCallbackService()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeCallbackService, other.purgeCallbackService);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurgeId()).compareTo(other.isSetPurgeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurgeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeId, other.purgeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdsToPurge()).compareTo(other.isSetIdsToPurge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdsToPurge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idsToPurge, other.idsToPurge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInitiatorToken()).compareTo(other.isSetInitiatorToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInitiatorToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initiatorToken, other.initiatorToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginPurge_args(");
      boolean first = true;

      sb.append("purgeCallbackService:");
      if (this.purgeCallbackService == null) {
        sb.append("null");
      } else {
        sb.append(this.purgeCallbackService);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("purgeId:");
      sb.append(this.purgeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("idsToPurge:");
      if (this.idsToPurge == null) {
        sb.append("null");
      } else {
        sb.append(this.idsToPurge);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("initiatorToken:");
      if (this.initiatorToken == null) {
        sb.append("null");
      } else {
        sb.append(this.initiatorToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'purgeId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (initiatorToken != null) {
        initiatorToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginPurge_argsStandardSchemeFactory implements SchemeFactory {
      public beginPurge_argsStandardScheme getScheme() {
        return new beginPurge_argsStandardScheme();
      }
    }

    private static class beginPurge_argsStandardScheme extends StandardScheme<beginPurge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginPurge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PURGE_CALLBACK_SERVICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.purgeCallbackService = iprot.readString();
                struct.setPurgeCallbackServiceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PURGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.purgeId = iprot.readI64();
                struct.setPurgeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IDS_TO_PURGE
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set16 = iprot.readSetBegin();
                  struct.idsToPurge = new HashSet<Long>(2*_set16.size);
                  for (int _i17 = 0; _i17 < _set16.size; ++_i17)
                  {
                    long _elem18;
                    _elem18 = iprot.readI64();
                    struct.idsToPurge.add(_elem18);
                  }
                  iprot.readSetEnd();
                }
                struct.setIdsToPurgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INITIATOR_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.initiatorToken = new ezbake.base.thrift.EzSecurityToken();
                struct.initiatorToken.read(iprot);
                struct.setInitiatorTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPurgeId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'purgeId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginPurge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.purgeCallbackService != null) {
          oprot.writeFieldBegin(PURGE_CALLBACK_SERVICE_FIELD_DESC);
          oprot.writeString(struct.purgeCallbackService);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PURGE_ID_FIELD_DESC);
        oprot.writeI64(struct.purgeId);
        oprot.writeFieldEnd();
        if (struct.idsToPurge != null) {
          oprot.writeFieldBegin(IDS_TO_PURGE_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.idsToPurge.size()));
            for (long _iter19 : struct.idsToPurge)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.initiatorToken != null) {
          oprot.writeFieldBegin(INITIATOR_TOKEN_FIELD_DESC);
          struct.initiatorToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginPurge_argsTupleSchemeFactory implements SchemeFactory {
      public beginPurge_argsTupleScheme getScheme() {
        return new beginPurge_argsTupleScheme();
      }
    }

    private static class beginPurge_argsTupleScheme extends TupleScheme<beginPurge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginPurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI64(struct.purgeId);
        BitSet optionals = new BitSet();
        if (struct.isSetPurgeCallbackService()) {
          optionals.set(0);
        }
        if (struct.isSetIdsToPurge()) {
          optionals.set(1);
        }
        if (struct.isSetInitiatorToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPurgeCallbackService()) {
          oprot.writeString(struct.purgeCallbackService);
        }
        if (struct.isSetIdsToPurge()) {
          {
            oprot.writeI32(struct.idsToPurge.size());
            for (long _iter20 : struct.idsToPurge)
            {
              oprot.writeI64(_iter20);
            }
          }
        }
        if (struct.isSetInitiatorToken()) {
          struct.initiatorToken.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginPurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.purgeId = iprot.readI64();
        struct.setPurgeIdIsSet(true);
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.purgeCallbackService = iprot.readString();
          struct.setPurgeCallbackServiceIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set21 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.idsToPurge = new HashSet<Long>(2*_set21.size);
            for (int _i22 = 0; _i22 < _set21.size; ++_i22)
            {
              long _elem23;
              _elem23 = iprot.readI64();
              struct.idsToPurge.add(_elem23);
            }
          }
          struct.setIdsToPurgeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.initiatorToken = new ezbake.base.thrift.EzSecurityToken();
          struct.initiatorToken.read(iprot);
          struct.setInitiatorTokenIsSet(true);
        }
      }
    }

  }

  public static class beginPurge_result implements org.apache.thrift.TBase<beginPurge_result, beginPurge_result._Fields>, java.io.Serializable, Cloneable, Comparable<beginPurge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginPurge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginPurge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginPurge_resultTupleSchemeFactory());
    }

    public PurgeState success; // required
    public PurgeException e; // required
    public ezbake.base.thrift.EzSecurityTokenException tokenException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e"),
      TOKEN_EXCEPTION((short)2, "tokenException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          case 2: // TOKEN_EXCEPTION
            return TOKEN_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PurgeState.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TOKEN_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tokenException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginPurge_result.class, metaDataMap);
    }

    public beginPurge_result() {
    }

    public beginPurge_result(
      PurgeState success,
      PurgeException e,
      ezbake.base.thrift.EzSecurityTokenException tokenException)
    {
      this();
      this.success = success;
      this.e = e;
      this.tokenException = tokenException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginPurge_result(beginPurge_result other) {
      if (other.isSetSuccess()) {
        this.success = new PurgeState(other.success);
      }
      if (other.isSetE()) {
        this.e = new PurgeException(other.e);
      }
      if (other.isSetTokenException()) {
        this.tokenException = new ezbake.base.thrift.EzSecurityTokenException(other.tokenException);
      }
    }

    public beginPurge_result deepCopy() {
      return new beginPurge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
      this.tokenException = null;
    }

    public PurgeState getSuccess() {
      return this.success;
    }

    public beginPurge_result setSuccess(PurgeState success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public PurgeException getE() {
      return this.e;
    }

    public beginPurge_result setE(PurgeException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getTokenException() {
      return this.tokenException;
    }

    public beginPurge_result setTokenException(ezbake.base.thrift.EzSecurityTokenException tokenException) {
      this.tokenException = tokenException;
      return this;
    }

    public void unsetTokenException() {
      this.tokenException = null;
    }

    /** Returns true if field tokenException is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenException() {
      return this.tokenException != null;
    }

    public void setTokenExceptionIsSet(boolean value) {
      if (!value) {
        this.tokenException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PurgeState)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((PurgeException)value);
        }
        break;

      case TOKEN_EXCEPTION:
        if (value == null) {
          unsetTokenException();
        } else {
          setTokenException((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      case TOKEN_EXCEPTION:
        return getTokenException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      case TOKEN_EXCEPTION:
        return isSetTokenException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginPurge_result)
        return this.equals((beginPurge_result)that);
      return false;
    }

    public boolean equals(beginPurge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      boolean this_present_tokenException = true && this.isSetTokenException();
      boolean that_present_tokenException = true && that.isSetTokenException();
      if (this_present_tokenException || that_present_tokenException) {
        if (!(this_present_tokenException && that_present_tokenException))
          return false;
        if (!this.tokenException.equals(that.tokenException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(beginPurge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTokenException()).compareTo(other.isSetTokenException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenException, other.tokenException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginPurge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenException:");
      if (this.tokenException == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginPurge_resultStandardSchemeFactory implements SchemeFactory {
      public beginPurge_resultStandardScheme getScheme() {
        return new beginPurge_resultStandardScheme();
      }
    }

    private static class beginPurge_resultStandardScheme extends StandardScheme<beginPurge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginPurge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PurgeState();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new PurgeException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tokenException = new ezbake.base.thrift.EzSecurityTokenException();
                struct.tokenException.read(iprot);
                struct.setTokenExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginPurge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tokenException != null) {
          oprot.writeFieldBegin(TOKEN_EXCEPTION_FIELD_DESC);
          struct.tokenException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginPurge_resultTupleSchemeFactory implements SchemeFactory {
      public beginPurge_resultTupleScheme getScheme() {
        return new beginPurge_resultTupleScheme();
      }
    }

    private static class beginPurge_resultTupleScheme extends TupleScheme<beginPurge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginPurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        if (struct.isSetTokenException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
        if (struct.isSetTokenException()) {
          struct.tokenException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginPurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new PurgeState();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new PurgeException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tokenException = new ezbake.base.thrift.EzSecurityTokenException();
          struct.tokenException.read(iprot);
          struct.setTokenExceptionIsSet(true);
        }
      }
    }

  }

  public static class beginVirusPurge_args implements org.apache.thrift.TBase<beginVirusPurge_args, beginVirusPurge_args._Fields>, java.io.Serializable, Cloneable, Comparable<beginVirusPurge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginVirusPurge_args");

    private static final org.apache.thrift.protocol.TField PURGE_CALLBACK_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeCallbackService", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PURGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField IDS_TO_PURGE_FIELD_DESC = new org.apache.thrift.protocol.TField("idsToPurge", org.apache.thrift.protocol.TType.SET, (short)3);
    private static final org.apache.thrift.protocol.TField INITIATOR_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("initiatorToken", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginVirusPurge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginVirusPurge_argsTupleSchemeFactory());
    }

    public String purgeCallbackService; // required
    public long purgeId; // required
    public Set<Long> idsToPurge; // required
    public ezbake.base.thrift.EzSecurityToken initiatorToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PURGE_CALLBACK_SERVICE((short)1, "purgeCallbackService"),
      PURGE_ID((short)2, "purgeId"),
      IDS_TO_PURGE((short)3, "idsToPurge"),
      INITIATOR_TOKEN((short)4, "initiatorToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PURGE_CALLBACK_SERVICE
            return PURGE_CALLBACK_SERVICE;
          case 2: // PURGE_ID
            return PURGE_ID;
          case 3: // IDS_TO_PURGE
            return IDS_TO_PURGE;
          case 4: // INITIATOR_TOKEN
            return INITIATOR_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PURGEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PURGE_CALLBACK_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("purgeCallbackService", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PURGE_ID, new org.apache.thrift.meta_data.FieldMetaData("purgeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IDS_TO_PURGE, new org.apache.thrift.meta_data.FieldMetaData("idsToPurge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.INITIATOR_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("initiatorToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginVirusPurge_args.class, metaDataMap);
    }

    public beginVirusPurge_args() {
    }

    public beginVirusPurge_args(
      String purgeCallbackService,
      long purgeId,
      Set<Long> idsToPurge,
      ezbake.base.thrift.EzSecurityToken initiatorToken)
    {
      this();
      this.purgeCallbackService = purgeCallbackService;
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
      this.idsToPurge = idsToPurge;
      this.initiatorToken = initiatorToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginVirusPurge_args(beginVirusPurge_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPurgeCallbackService()) {
        this.purgeCallbackService = other.purgeCallbackService;
      }
      this.purgeId = other.purgeId;
      if (other.isSetIdsToPurge()) {
        Set<Long> __this__idsToPurge = new HashSet<Long>(other.idsToPurge);
        this.idsToPurge = __this__idsToPurge;
      }
      if (other.isSetInitiatorToken()) {
        this.initiatorToken = new ezbake.base.thrift.EzSecurityToken(other.initiatorToken);
      }
    }

    public beginVirusPurge_args deepCopy() {
      return new beginVirusPurge_args(this);
    }

    @Override
    public void clear() {
      this.purgeCallbackService = null;
      setPurgeIdIsSet(false);
      this.purgeId = 0;
      this.idsToPurge = null;
      this.initiatorToken = null;
    }

    public String getPurgeCallbackService() {
      return this.purgeCallbackService;
    }

    public beginVirusPurge_args setPurgeCallbackService(String purgeCallbackService) {
      this.purgeCallbackService = purgeCallbackService;
      return this;
    }

    public void unsetPurgeCallbackService() {
      this.purgeCallbackService = null;
    }

    /** Returns true if field purgeCallbackService is set (has been assigned a value) and false otherwise */
    public boolean isSetPurgeCallbackService() {
      return this.purgeCallbackService != null;
    }

    public void setPurgeCallbackServiceIsSet(boolean value) {
      if (!value) {
        this.purgeCallbackService = null;
      }
    }

    public long getPurgeId() {
      return this.purgeId;
    }

    public beginVirusPurge_args setPurgeId(long purgeId) {
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
      return this;
    }

    public void unsetPurgeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    /** Returns true if field purgeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPurgeId() {
      return EncodingUtils.testBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    public void setPurgeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURGEID_ISSET_ID, value);
    }

    public int getIdsToPurgeSize() {
      return (this.idsToPurge == null) ? 0 : this.idsToPurge.size();
    }

    public java.util.Iterator<Long> getIdsToPurgeIterator() {
      return (this.idsToPurge == null) ? null : this.idsToPurge.iterator();
    }

    public void addToIdsToPurge(long elem) {
      if (this.idsToPurge == null) {
        this.idsToPurge = new HashSet<Long>();
      }
      this.idsToPurge.add(elem);
    }

    public Set<Long> getIdsToPurge() {
      return this.idsToPurge;
    }

    public beginVirusPurge_args setIdsToPurge(Set<Long> idsToPurge) {
      this.idsToPurge = idsToPurge;
      return this;
    }

    public void unsetIdsToPurge() {
      this.idsToPurge = null;
    }

    /** Returns true if field idsToPurge is set (has been assigned a value) and false otherwise */
    public boolean isSetIdsToPurge() {
      return this.idsToPurge != null;
    }

    public void setIdsToPurgeIsSet(boolean value) {
      if (!value) {
        this.idsToPurge = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getInitiatorToken() {
      return this.initiatorToken;
    }

    public beginVirusPurge_args setInitiatorToken(ezbake.base.thrift.EzSecurityToken initiatorToken) {
      this.initiatorToken = initiatorToken;
      return this;
    }

    public void unsetInitiatorToken() {
      this.initiatorToken = null;
    }

    /** Returns true if field initiatorToken is set (has been assigned a value) and false otherwise */
    public boolean isSetInitiatorToken() {
      return this.initiatorToken != null;
    }

    public void setInitiatorTokenIsSet(boolean value) {
      if (!value) {
        this.initiatorToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PURGE_CALLBACK_SERVICE:
        if (value == null) {
          unsetPurgeCallbackService();
        } else {
          setPurgeCallbackService((String)value);
        }
        break;

      case PURGE_ID:
        if (value == null) {
          unsetPurgeId();
        } else {
          setPurgeId((Long)value);
        }
        break;

      case IDS_TO_PURGE:
        if (value == null) {
          unsetIdsToPurge();
        } else {
          setIdsToPurge((Set<Long>)value);
        }
        break;

      case INITIATOR_TOKEN:
        if (value == null) {
          unsetInitiatorToken();
        } else {
          setInitiatorToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PURGE_CALLBACK_SERVICE:
        return getPurgeCallbackService();

      case PURGE_ID:
        return Long.valueOf(getPurgeId());

      case IDS_TO_PURGE:
        return getIdsToPurge();

      case INITIATOR_TOKEN:
        return getInitiatorToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PURGE_CALLBACK_SERVICE:
        return isSetPurgeCallbackService();
      case PURGE_ID:
        return isSetPurgeId();
      case IDS_TO_PURGE:
        return isSetIdsToPurge();
      case INITIATOR_TOKEN:
        return isSetInitiatorToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginVirusPurge_args)
        return this.equals((beginVirusPurge_args)that);
      return false;
    }

    public boolean equals(beginVirusPurge_args that) {
      if (that == null)
        return false;

      boolean this_present_purgeCallbackService = true && this.isSetPurgeCallbackService();
      boolean that_present_purgeCallbackService = true && that.isSetPurgeCallbackService();
      if (this_present_purgeCallbackService || that_present_purgeCallbackService) {
        if (!(this_present_purgeCallbackService && that_present_purgeCallbackService))
          return false;
        if (!this.purgeCallbackService.equals(that.purgeCallbackService))
          return false;
      }

      boolean this_present_purgeId = true;
      boolean that_present_purgeId = true;
      if (this_present_purgeId || that_present_purgeId) {
        if (!(this_present_purgeId && that_present_purgeId))
          return false;
        if (this.purgeId != that.purgeId)
          return false;
      }

      boolean this_present_idsToPurge = true && this.isSetIdsToPurge();
      boolean that_present_idsToPurge = true && that.isSetIdsToPurge();
      if (this_present_idsToPurge || that_present_idsToPurge) {
        if (!(this_present_idsToPurge && that_present_idsToPurge))
          return false;
        if (!this.idsToPurge.equals(that.idsToPurge))
          return false;
      }

      boolean this_present_initiatorToken = true && this.isSetInitiatorToken();
      boolean that_present_initiatorToken = true && that.isSetInitiatorToken();
      if (this_present_initiatorToken || that_present_initiatorToken) {
        if (!(this_present_initiatorToken && that_present_initiatorToken))
          return false;
        if (!this.initiatorToken.equals(that.initiatorToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(beginVirusPurge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPurgeCallbackService()).compareTo(other.isSetPurgeCallbackService());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurgeCallbackService()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeCallbackService, other.purgeCallbackService);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurgeId()).compareTo(other.isSetPurgeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurgeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeId, other.purgeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdsToPurge()).compareTo(other.isSetIdsToPurge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdsToPurge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idsToPurge, other.idsToPurge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInitiatorToken()).compareTo(other.isSetInitiatorToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInitiatorToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initiatorToken, other.initiatorToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginVirusPurge_args(");
      boolean first = true;

      sb.append("purgeCallbackService:");
      if (this.purgeCallbackService == null) {
        sb.append("null");
      } else {
        sb.append(this.purgeCallbackService);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("purgeId:");
      sb.append(this.purgeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("idsToPurge:");
      if (this.idsToPurge == null) {
        sb.append("null");
      } else {
        sb.append(this.idsToPurge);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("initiatorToken:");
      if (this.initiatorToken == null) {
        sb.append("null");
      } else {
        sb.append(this.initiatorToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'purgeId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (initiatorToken != null) {
        initiatorToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginVirusPurge_argsStandardSchemeFactory implements SchemeFactory {
      public beginVirusPurge_argsStandardScheme getScheme() {
        return new beginVirusPurge_argsStandardScheme();
      }
    }

    private static class beginVirusPurge_argsStandardScheme extends StandardScheme<beginVirusPurge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginVirusPurge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PURGE_CALLBACK_SERVICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.purgeCallbackService = iprot.readString();
                struct.setPurgeCallbackServiceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PURGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.purgeId = iprot.readI64();
                struct.setPurgeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IDS_TO_PURGE
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                  struct.idsToPurge = new HashSet<Long>(2*_set24.size);
                  for (int _i25 = 0; _i25 < _set24.size; ++_i25)
                  {
                    long _elem26;
                    _elem26 = iprot.readI64();
                    struct.idsToPurge.add(_elem26);
                  }
                  iprot.readSetEnd();
                }
                struct.setIdsToPurgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INITIATOR_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.initiatorToken = new ezbake.base.thrift.EzSecurityToken();
                struct.initiatorToken.read(iprot);
                struct.setInitiatorTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPurgeId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'purgeId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginVirusPurge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.purgeCallbackService != null) {
          oprot.writeFieldBegin(PURGE_CALLBACK_SERVICE_FIELD_DESC);
          oprot.writeString(struct.purgeCallbackService);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PURGE_ID_FIELD_DESC);
        oprot.writeI64(struct.purgeId);
        oprot.writeFieldEnd();
        if (struct.idsToPurge != null) {
          oprot.writeFieldBegin(IDS_TO_PURGE_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.idsToPurge.size()));
            for (long _iter27 : struct.idsToPurge)
            {
              oprot.writeI64(_iter27);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.initiatorToken != null) {
          oprot.writeFieldBegin(INITIATOR_TOKEN_FIELD_DESC);
          struct.initiatorToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginVirusPurge_argsTupleSchemeFactory implements SchemeFactory {
      public beginVirusPurge_argsTupleScheme getScheme() {
        return new beginVirusPurge_argsTupleScheme();
      }
    }

    private static class beginVirusPurge_argsTupleScheme extends TupleScheme<beginVirusPurge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginVirusPurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI64(struct.purgeId);
        BitSet optionals = new BitSet();
        if (struct.isSetPurgeCallbackService()) {
          optionals.set(0);
        }
        if (struct.isSetIdsToPurge()) {
          optionals.set(1);
        }
        if (struct.isSetInitiatorToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPurgeCallbackService()) {
          oprot.writeString(struct.purgeCallbackService);
        }
        if (struct.isSetIdsToPurge()) {
          {
            oprot.writeI32(struct.idsToPurge.size());
            for (long _iter28 : struct.idsToPurge)
            {
              oprot.writeI64(_iter28);
            }
          }
        }
        if (struct.isSetInitiatorToken()) {
          struct.initiatorToken.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginVirusPurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.purgeId = iprot.readI64();
        struct.setPurgeIdIsSet(true);
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.purgeCallbackService = iprot.readString();
          struct.setPurgeCallbackServiceIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set29 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.idsToPurge = new HashSet<Long>(2*_set29.size);
            for (int _i30 = 0; _i30 < _set29.size; ++_i30)
            {
              long _elem31;
              _elem31 = iprot.readI64();
              struct.idsToPurge.add(_elem31);
            }
          }
          struct.setIdsToPurgeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.initiatorToken = new ezbake.base.thrift.EzSecurityToken();
          struct.initiatorToken.read(iprot);
          struct.setInitiatorTokenIsSet(true);
        }
      }
    }

  }

  public static class beginVirusPurge_result implements org.apache.thrift.TBase<beginVirusPurge_result, beginVirusPurge_result._Fields>, java.io.Serializable, Cloneable, Comparable<beginVirusPurge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginVirusPurge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginVirusPurge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginVirusPurge_resultTupleSchemeFactory());
    }

    public PurgeState success; // required
    public PurgeException e; // required
    public ezbake.base.thrift.EzSecurityTokenException tokenException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e"),
      TOKEN_EXCEPTION((short)2, "tokenException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          case 2: // TOKEN_EXCEPTION
            return TOKEN_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PurgeState.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TOKEN_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tokenException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginVirusPurge_result.class, metaDataMap);
    }

    public beginVirusPurge_result() {
    }

    public beginVirusPurge_result(
      PurgeState success,
      PurgeException e,
      ezbake.base.thrift.EzSecurityTokenException tokenException)
    {
      this();
      this.success = success;
      this.e = e;
      this.tokenException = tokenException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginVirusPurge_result(beginVirusPurge_result other) {
      if (other.isSetSuccess()) {
        this.success = new PurgeState(other.success);
      }
      if (other.isSetE()) {
        this.e = new PurgeException(other.e);
      }
      if (other.isSetTokenException()) {
        this.tokenException = new ezbake.base.thrift.EzSecurityTokenException(other.tokenException);
      }
    }

    public beginVirusPurge_result deepCopy() {
      return new beginVirusPurge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
      this.tokenException = null;
    }

    public PurgeState getSuccess() {
      return this.success;
    }

    public beginVirusPurge_result setSuccess(PurgeState success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public PurgeException getE() {
      return this.e;
    }

    public beginVirusPurge_result setE(PurgeException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getTokenException() {
      return this.tokenException;
    }

    public beginVirusPurge_result setTokenException(ezbake.base.thrift.EzSecurityTokenException tokenException) {
      this.tokenException = tokenException;
      return this;
    }

    public void unsetTokenException() {
      this.tokenException = null;
    }

    /** Returns true if field tokenException is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenException() {
      return this.tokenException != null;
    }

    public void setTokenExceptionIsSet(boolean value) {
      if (!value) {
        this.tokenException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PurgeState)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((PurgeException)value);
        }
        break;

      case TOKEN_EXCEPTION:
        if (value == null) {
          unsetTokenException();
        } else {
          setTokenException((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      case TOKEN_EXCEPTION:
        return getTokenException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      case TOKEN_EXCEPTION:
        return isSetTokenException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginVirusPurge_result)
        return this.equals((beginVirusPurge_result)that);
      return false;
    }

    public boolean equals(beginVirusPurge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      boolean this_present_tokenException = true && this.isSetTokenException();
      boolean that_present_tokenException = true && that.isSetTokenException();
      if (this_present_tokenException || that_present_tokenException) {
        if (!(this_present_tokenException && that_present_tokenException))
          return false;
        if (!this.tokenException.equals(that.tokenException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(beginVirusPurge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTokenException()).compareTo(other.isSetTokenException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenException, other.tokenException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginVirusPurge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenException:");
      if (this.tokenException == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginVirusPurge_resultStandardSchemeFactory implements SchemeFactory {
      public beginVirusPurge_resultStandardScheme getScheme() {
        return new beginVirusPurge_resultStandardScheme();
      }
    }

    private static class beginVirusPurge_resultStandardScheme extends StandardScheme<beginVirusPurge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginVirusPurge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PurgeState();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new PurgeException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tokenException = new ezbake.base.thrift.EzSecurityTokenException();
                struct.tokenException.read(iprot);
                struct.setTokenExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginVirusPurge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tokenException != null) {
          oprot.writeFieldBegin(TOKEN_EXCEPTION_FIELD_DESC);
          struct.tokenException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginVirusPurge_resultTupleSchemeFactory implements SchemeFactory {
      public beginVirusPurge_resultTupleScheme getScheme() {
        return new beginVirusPurge_resultTupleScheme();
      }
    }

    private static class beginVirusPurge_resultTupleScheme extends TupleScheme<beginVirusPurge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginVirusPurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        if (struct.isSetTokenException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
        if (struct.isSetTokenException()) {
          struct.tokenException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginVirusPurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new PurgeState();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new PurgeException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tokenException = new ezbake.base.thrift.EzSecurityTokenException();
          struct.tokenException.read(iprot);
          struct.setTokenExceptionIsSet(true);
        }
      }
    }

  }

  public static class purgeStatus_args implements org.apache.thrift.TBase<purgeStatus_args, purgeStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<purgeStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purgeStatus_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PURGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purgeStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purgeStatus_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public long purgeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      PURGE_ID((short)2, "purgeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // PURGE_ID
            return PURGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PURGEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.PURGE_ID, new org.apache.thrift.meta_data.FieldMetaData("purgeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purgeStatus_args.class, metaDataMap);
    }

    public purgeStatus_args() {
    }

    public purgeStatus_args(
      ezbake.base.thrift.EzSecurityToken token,
      long purgeId)
    {
      this();
      this.token = token;
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purgeStatus_args(purgeStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      this.purgeId = other.purgeId;
    }

    public purgeStatus_args deepCopy() {
      return new purgeStatus_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setPurgeIdIsSet(false);
      this.purgeId = 0;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public purgeStatus_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long getPurgeId() {
      return this.purgeId;
    }

    public purgeStatus_args setPurgeId(long purgeId) {
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
      return this;
    }

    public void unsetPurgeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    /** Returns true if field purgeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPurgeId() {
      return EncodingUtils.testBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    public void setPurgeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURGEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case PURGE_ID:
        if (value == null) {
          unsetPurgeId();
        } else {
          setPurgeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case PURGE_ID:
        return Long.valueOf(getPurgeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case PURGE_ID:
        return isSetPurgeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purgeStatus_args)
        return this.equals((purgeStatus_args)that);
      return false;
    }

    public boolean equals(purgeStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_purgeId = true;
      boolean that_present_purgeId = true;
      if (this_present_purgeId || that_present_purgeId) {
        if (!(this_present_purgeId && that_present_purgeId))
          return false;
        if (this.purgeId != that.purgeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(purgeStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurgeId()).compareTo(other.isSetPurgeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurgeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeId, other.purgeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purgeStatus_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("purgeId:");
      sb.append(this.purgeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'purgeId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class purgeStatus_argsStandardSchemeFactory implements SchemeFactory {
      public purgeStatus_argsStandardScheme getScheme() {
        return new purgeStatus_argsStandardScheme();
      }
    }

    private static class purgeStatus_argsStandardScheme extends StandardScheme<purgeStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purgeStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PURGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.purgeId = iprot.readI64();
                struct.setPurgeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPurgeId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'purgeId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purgeStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PURGE_ID_FIELD_DESC);
        oprot.writeI64(struct.purgeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purgeStatus_argsTupleSchemeFactory implements SchemeFactory {
      public purgeStatus_argsTupleScheme getScheme() {
        return new purgeStatus_argsTupleScheme();
      }
    }

    private static class purgeStatus_argsTupleScheme extends TupleScheme<purgeStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purgeStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
        oprot.writeI64(struct.purgeId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purgeStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
        struct.purgeId = iprot.readI64();
        struct.setPurgeIdIsSet(true);
      }
    }

  }

  public static class purgeStatus_result implements org.apache.thrift.TBase<purgeStatus_result, purgeStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<purgeStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purgeStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField TOKEN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purgeStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purgeStatus_resultTupleSchemeFactory());
    }

    public PurgeState success; // required
    public ezbake.base.thrift.EzSecurityTokenException tokenException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      TOKEN_EXCEPTION((short)1, "tokenException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // TOKEN_EXCEPTION
            return TOKEN_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PurgeState.class)));
      tmpMap.put(_Fields.TOKEN_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tokenException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purgeStatus_result.class, metaDataMap);
    }

    public purgeStatus_result() {
    }

    public purgeStatus_result(
      PurgeState success,
      ezbake.base.thrift.EzSecurityTokenException tokenException)
    {
      this();
      this.success = success;
      this.tokenException = tokenException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purgeStatus_result(purgeStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new PurgeState(other.success);
      }
      if (other.isSetTokenException()) {
        this.tokenException = new ezbake.base.thrift.EzSecurityTokenException(other.tokenException);
      }
    }

    public purgeStatus_result deepCopy() {
      return new purgeStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tokenException = null;
    }

    public PurgeState getSuccess() {
      return this.success;
    }

    public purgeStatus_result setSuccess(PurgeState success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getTokenException() {
      return this.tokenException;
    }

    public purgeStatus_result setTokenException(ezbake.base.thrift.EzSecurityTokenException tokenException) {
      this.tokenException = tokenException;
      return this;
    }

    public void unsetTokenException() {
      this.tokenException = null;
    }

    /** Returns true if field tokenException is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenException() {
      return this.tokenException != null;
    }

    public void setTokenExceptionIsSet(boolean value) {
      if (!value) {
        this.tokenException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PurgeState)value);
        }
        break;

      case TOKEN_EXCEPTION:
        if (value == null) {
          unsetTokenException();
        } else {
          setTokenException((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case TOKEN_EXCEPTION:
        return getTokenException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case TOKEN_EXCEPTION:
        return isSetTokenException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purgeStatus_result)
        return this.equals((purgeStatus_result)that);
      return false;
    }

    public boolean equals(purgeStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tokenException = true && this.isSetTokenException();
      boolean that_present_tokenException = true && that.isSetTokenException();
      if (this_present_tokenException || that_present_tokenException) {
        if (!(this_present_tokenException && that_present_tokenException))
          return false;
        if (!this.tokenException.equals(that.tokenException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(purgeStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTokenException()).compareTo(other.isSetTokenException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenException, other.tokenException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purgeStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenException:");
      if (this.tokenException == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class purgeStatus_resultStandardSchemeFactory implements SchemeFactory {
      public purgeStatus_resultStandardScheme getScheme() {
        return new purgeStatus_resultStandardScheme();
      }
    }

    private static class purgeStatus_resultStandardScheme extends StandardScheme<purgeStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purgeStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PurgeState();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // TOKEN_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tokenException = new ezbake.base.thrift.EzSecurityTokenException();
                struct.tokenException.read(iprot);
                struct.setTokenExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purgeStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tokenException != null) {
          oprot.writeFieldBegin(TOKEN_EXCEPTION_FIELD_DESC);
          struct.tokenException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purgeStatus_resultTupleSchemeFactory implements SchemeFactory {
      public purgeStatus_resultTupleScheme getScheme() {
        return new purgeStatus_resultTupleScheme();
      }
    }

    private static class purgeStatus_resultTupleScheme extends TupleScheme<purgeStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purgeStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTokenException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetTokenException()) {
          struct.tokenException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purgeStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PurgeState();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tokenException = new ezbake.base.thrift.EzSecurityTokenException();
          struct.tokenException.read(iprot);
          struct.setTokenExceptionIsSet(true);
        }
      }
    }

  }

  public static class cancelPurge_args implements org.apache.thrift.TBase<cancelPurge_args, cancelPurge_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelPurge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelPurge_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PURGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelPurge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelPurge_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public long purgeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      PURGE_ID((short)2, "purgeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // PURGE_ID
            return PURGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PURGEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.PURGE_ID, new org.apache.thrift.meta_data.FieldMetaData("purgeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelPurge_args.class, metaDataMap);
    }

    public cancelPurge_args() {
    }

    public cancelPurge_args(
      ezbake.base.thrift.EzSecurityToken token,
      long purgeId)
    {
      this();
      this.token = token;
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelPurge_args(cancelPurge_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      this.purgeId = other.purgeId;
    }

    public cancelPurge_args deepCopy() {
      return new cancelPurge_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setPurgeIdIsSet(false);
      this.purgeId = 0;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public cancelPurge_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long getPurgeId() {
      return this.purgeId;
    }

    public cancelPurge_args setPurgeId(long purgeId) {
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
      return this;
    }

    public void unsetPurgeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    /** Returns true if field purgeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPurgeId() {
      return EncodingUtils.testBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    public void setPurgeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURGEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case PURGE_ID:
        if (value == null) {
          unsetPurgeId();
        } else {
          setPurgeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case PURGE_ID:
        return Long.valueOf(getPurgeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case PURGE_ID:
        return isSetPurgeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelPurge_args)
        return this.equals((cancelPurge_args)that);
      return false;
    }

    public boolean equals(cancelPurge_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_purgeId = true;
      boolean that_present_purgeId = true;
      if (this_present_purgeId || that_present_purgeId) {
        if (!(this_present_purgeId && that_present_purgeId))
          return false;
        if (this.purgeId != that.purgeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(cancelPurge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurgeId()).compareTo(other.isSetPurgeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurgeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeId, other.purgeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelPurge_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("purgeId:");
      sb.append(this.purgeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'purgeId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelPurge_argsStandardSchemeFactory implements SchemeFactory {
      public cancelPurge_argsStandardScheme getScheme() {
        return new cancelPurge_argsStandardScheme();
      }
    }

    private static class cancelPurge_argsStandardScheme extends StandardScheme<cancelPurge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelPurge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PURGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.purgeId = iprot.readI64();
                struct.setPurgeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPurgeId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'purgeId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelPurge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PURGE_ID_FIELD_DESC);
        oprot.writeI64(struct.purgeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelPurge_argsTupleSchemeFactory implements SchemeFactory {
      public cancelPurge_argsTupleScheme getScheme() {
        return new cancelPurge_argsTupleScheme();
      }
    }

    private static class cancelPurge_argsTupleScheme extends TupleScheme<cancelPurge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelPurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
        oprot.writeI64(struct.purgeId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelPurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
        struct.purgeId = iprot.readI64();
        struct.setPurgeIdIsSet(true);
      }
    }

  }

  public static class cancelPurge_result implements org.apache.thrift.TBase<cancelPurge_result, cancelPurge_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelPurge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelPurge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField TOKEN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelPurge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelPurge_resultTupleSchemeFactory());
    }

    public PurgeState success; // required
    public ezbake.base.thrift.EzSecurityTokenException tokenException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      TOKEN_EXCEPTION((short)1, "tokenException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // TOKEN_EXCEPTION
            return TOKEN_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PurgeState.class)));
      tmpMap.put(_Fields.TOKEN_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("tokenException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelPurge_result.class, metaDataMap);
    }

    public cancelPurge_result() {
    }

    public cancelPurge_result(
      PurgeState success,
      ezbake.base.thrift.EzSecurityTokenException tokenException)
    {
      this();
      this.success = success;
      this.tokenException = tokenException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelPurge_result(cancelPurge_result other) {
      if (other.isSetSuccess()) {
        this.success = new PurgeState(other.success);
      }
      if (other.isSetTokenException()) {
        this.tokenException = new ezbake.base.thrift.EzSecurityTokenException(other.tokenException);
      }
    }

    public cancelPurge_result deepCopy() {
      return new cancelPurge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tokenException = null;
    }

    public PurgeState getSuccess() {
      return this.success;
    }

    public cancelPurge_result setSuccess(PurgeState success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getTokenException() {
      return this.tokenException;
    }

    public cancelPurge_result setTokenException(ezbake.base.thrift.EzSecurityTokenException tokenException) {
      this.tokenException = tokenException;
      return this;
    }

    public void unsetTokenException() {
      this.tokenException = null;
    }

    /** Returns true if field tokenException is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenException() {
      return this.tokenException != null;
    }

    public void setTokenExceptionIsSet(boolean value) {
      if (!value) {
        this.tokenException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PurgeState)value);
        }
        break;

      case TOKEN_EXCEPTION:
        if (value == null) {
          unsetTokenException();
        } else {
          setTokenException((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case TOKEN_EXCEPTION:
        return getTokenException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case TOKEN_EXCEPTION:
        return isSetTokenException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelPurge_result)
        return this.equals((cancelPurge_result)that);
      return false;
    }

    public boolean equals(cancelPurge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tokenException = true && this.isSetTokenException();
      boolean that_present_tokenException = true && that.isSetTokenException();
      if (this_present_tokenException || that_present_tokenException) {
        if (!(this_present_tokenException && that_present_tokenException))
          return false;
        if (!this.tokenException.equals(that.tokenException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(cancelPurge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTokenException()).compareTo(other.isSetTokenException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenException, other.tokenException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelPurge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenException:");
      if (this.tokenException == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelPurge_resultStandardSchemeFactory implements SchemeFactory {
      public cancelPurge_resultStandardScheme getScheme() {
        return new cancelPurge_resultStandardScheme();
      }
    }

    private static class cancelPurge_resultStandardScheme extends StandardScheme<cancelPurge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelPurge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PurgeState();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // TOKEN_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tokenException = new ezbake.base.thrift.EzSecurityTokenException();
                struct.tokenException.read(iprot);
                struct.setTokenExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelPurge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tokenException != null) {
          oprot.writeFieldBegin(TOKEN_EXCEPTION_FIELD_DESC);
          struct.tokenException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelPurge_resultTupleSchemeFactory implements SchemeFactory {
      public cancelPurge_resultTupleScheme getScheme() {
        return new cancelPurge_resultTupleScheme();
      }
    }

    private static class cancelPurge_resultTupleScheme extends TupleScheme<cancelPurge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelPurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTokenException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetTokenException()) {
          struct.tokenException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelPurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PurgeState();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tokenException = new ezbake.base.thrift.EzSecurityTokenException();
          struct.tokenException.read(iprot);
          struct.setTokenExceptionIsSet(true);
        }
      }
    }

  }

}
